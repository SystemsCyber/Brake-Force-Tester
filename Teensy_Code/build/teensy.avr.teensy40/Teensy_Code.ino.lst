
C:\Users\jdaily\AppData\Local\Temp\arduino\sketches\32A5C8A468362A2B0C1B6A599FFEB488/Teensy_Code.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	4288      	cmp	r0, r1
60001402:	d007      	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	4290      	cmp	r0, r2
60001406:	d205      	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	f851 3b04 	ldr.w	r3, [r1], #4
6000140c:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001410:	4282      	cmp	r2, r0
60001412:	d8f9      	bhi.n	60001408 <memory_copy+0x8>
	}
}
60001414:	4770      	bx	lr
60001416:	bf00      	nop

60001418 <memory_clear>:

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	4288      	cmp	r0, r1
6000141a:	d204      	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	2300      	movs	r3, #0
6000141e:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001422:	4281      	cmp	r1, r0
60001424:	d8fb      	bhi.n	6000141e <memory_clear+0x6>
	}
}
60001426:	4770      	bx	lr

60001428 <ResetHandler2>:
{
60001428:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000142c:	f000 f93a 	bl	600016a4 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001430:	2408      	movs	r4, #8
60001432:	4b60      	ldr	r3, [pc, #384]	; (600015b4 <ResetHandler2+0x18c>)
	memory_copy(&_stext, &_stextload, &_etext);
60001434:	4a60      	ldr	r2, [pc, #384]	; (600015b8 <ResetHandler2+0x190>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001436:	f8c3 4154 	str.w	r4, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
6000143a:	4960      	ldr	r1, [pc, #384]	; (600015bc <ResetHandler2+0x194>)
6000143c:	4860      	ldr	r0, [pc, #384]	; (600015c0 <ResetHandler2+0x198>)
6000143e:	f7ff ffdf 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001442:	4a60      	ldr	r2, [pc, #384]	; (600015c4 <ResetHandler2+0x19c>)
60001444:	4960      	ldr	r1, [pc, #384]	; (600015c8 <ResetHandler2+0x1a0>)
60001446:	4861      	ldr	r0, [pc, #388]	; (600015cc <ResetHandler2+0x1a4>)
60001448:	f7ff ffda 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
6000144c:	4960      	ldr	r1, [pc, #384]	; (600015d0 <ResetHandler2+0x1a8>)
6000144e:	4861      	ldr	r0, [pc, #388]	; (600015d4 <ResetHandler2+0x1ac>)
60001450:	f7ff ffe2 	bl	60001418 <memory_clear>
	SCB_CPACR = 0x00F00000;
60001454:	4c60      	ldr	r4, [pc, #384]	; (600015d8 <ResetHandler2+0x1b0>)
60001456:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
6000145a:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000145e:	2300      	movs	r3, #0
60001460:	4a5e      	ldr	r2, [pc, #376]	; (600015dc <ResetHandler2+0x1b4>)
	SCB_CPACR = 0x00F00000;
60001462:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001466:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000146a:	3301      	adds	r3, #1
6000146c:	2bb0      	cmp	r3, #176	; 0xb0
6000146e:	d1fa      	bne.n	60001466 <ResetHandler2+0x3e>
60001470:	4b5b      	ldr	r3, [pc, #364]	; (600015e0 <ResetHandler2+0x1b8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
60001472:	2180      	movs	r1, #128	; 0x80
60001474:	4a5b      	ldr	r2, [pc, #364]	; (600015e4 <ResetHandler2+0x1bc>)
60001476:	f803 1b01 	strb.w	r1, [r3], #1
6000147a:	4293      	cmp	r3, r2
6000147c:	d1fb      	bne.n	60001476 <ResetHandler2+0x4e>
	SCB_VTOR = (uint32_t)_VectorsRam;
6000147e:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001482:	4e4c      	ldr	r6, [pc, #304]	; (600015b4 <ResetHandler2+0x18c>)
60001484:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001488:	f8df b188 	ldr.w	fp, [pc, #392]	; 60001614 <ResetHandler2+0x1ec>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000148c:	f8df a188 	ldr.w	sl, [pc, #392]	; 60001618 <ResetHandler2+0x1f0>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001490:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
60001494:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
60001498:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000149a:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000149e:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014a2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014aa:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ae:	f8df 816c 	ldr.w	r8, [pc, #364]	; 6000161c <ResetHandler2+0x1f4>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014b6:	4a4c      	ldr	r2, [pc, #304]	; (600015e8 <ResetHandler2+0x1c0>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014bc:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014c8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014cc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
600014d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014d8:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014dc:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014de:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014e0:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014e2:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
600014e4:	f000 f8e6 	bl	600016b4 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
600014e8:	4b40      	ldr	r3, [pc, #256]	; (600015ec <ResetHandler2+0x1c4>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
600014ea:	4941      	ldr	r1, [pc, #260]	; (600015f0 <ResetHandler2+0x1c8>)
	_VectorsRam[14] = pendablesrvreq_isr;
600014ec:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
600014ee:	4b41      	ldr	r3, [pc, #260]	; (600015f4 <ResetHandler2+0x1cc>)
600014f0:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014f2:	2363      	movs	r3, #99	; 0x63
600014f4:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014f6:	2303      	movs	r3, #3
	SYST_CVR = 0;
600014f8:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014fa:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
600014fc:	4b3e      	ldr	r3, [pc, #248]	; (600015f8 <ResetHandler2+0x1d0>)
600014fe:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001502:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000150a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000150e:	4b3b      	ldr	r3, [pc, #236]	; (600015fc <ResetHandler2+0x1d4>)
60001510:	681a      	ldr	r2, [r3, #0]
60001512:	f042 0201 	orr.w	r2, r2, #1
60001516:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001518:	685b      	ldr	r3, [r3, #4]
6000151a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000151c:	f000 f946 	bl	600017ac <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001520:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001524:	4836      	ldr	r0, [pc, #216]	; (60001600 <ResetHandler2+0x1d8>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001526:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000152a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000152e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001532:	f000 faad 	bl	60001a90 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001536:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000153a:	4b32      	ldr	r3, [pc, #200]	; (60001604 <ResetHandler2+0x1dc>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000153c:	4a32      	ldr	r2, [pc, #200]	; (60001608 <ResetHandler2+0x1e0>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000153e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001542:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001546:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001548:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000154c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001550:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001554:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001558:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000155a:	07db      	lsls	r3, r3, #31
6000155c:	d408      	bmi.n	60001570 <ResetHandler2+0x148>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000155e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001562:	492a      	ldr	r1, [pc, #168]	; (6000160c <ResetHandler2+0x1e4>)
60001564:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001566:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001568:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000156a:	f043 0301 	orr.w	r3, r3, #1
6000156e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001570:	4a25      	ldr	r2, [pc, #148]	; (60001608 <ResetHandler2+0x1e0>)
60001572:	4c27      	ldr	r4, [pc, #156]	; (60001610 <ResetHandler2+0x1e8>)
60001574:	6893      	ldr	r3, [r2, #8]
60001576:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000157a:	6093      	str	r3, [r2, #8]
	analog_init();
6000157c:	f000 f868 	bl	60001650 <analog_init>
	pwm_init();
60001580:	f000 fa82 	bl	60001a88 <__pwm_init_veneer>
	tempmon_init();
60001584:	f000 f940 	bl	60001808 <tempmon_init>
	startup_middle_hook();
60001588:	f000 f88e 	bl	600016a8 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
6000158c:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
6000158e:	2b13      	cmp	r3, #19
60001590:	d9fc      	bls.n	6000158c <ResetHandler2+0x164>
	usb_init();
60001592:	f000 f9d1 	bl	60001938 <usb_init>
60001596:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
60001598:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
6000159c:	d3fb      	bcc.n	60001596 <ResetHandler2+0x16e>
	startup_debug_reset();
6000159e:	f000 f887 	bl	600016b0 <startup_debug_reset>
	startup_late_hook();
600015a2:	f000 f883 	bl	600016ac <startup_default_late_hook>
	__libc_init_array();
600015a6:	f000 fa6b 	bl	60001a80 <____libc_init_array_veneer>
	main();
600015aa:	f000 fa81 	bl	60001ab0 <__main_veneer>
	while (1) asm("WFI");
600015ae:	bf30      	wfi
600015b0:	e7fd      	b.n	600015ae <ResetHandler2+0x186>
600015b2:	bf00      	nop
600015b4:	400d8000 	.word	0x400d8000
600015b8:	00009c18 	.word	0x00009c18
600015bc:	60001bf0 	.word	0x60001bf0
600015c0:	00000000 	.word	0x00000000
600015c4:	20001ac0 	.word	0x20001ac0
600015c8:	6000b80c 	.word	0x6000b80c
600015cc:	20000000 	.word	0x20000000
600015d0:	200026e0 	.word	0x200026e0
600015d4:	20001ac0 	.word	0x20001ac0
600015d8:	20001800 	.word	0x20001800
600015dc:	00002391 	.word	0x00002391
600015e0:	e000e400 	.word	0xe000e400
600015e4:	e000e4a0 	.word	0xe000e4a0
600015e8:	400ac000 	.word	0x400ac000
600015ec:	000037b1 	.word	0x000037b1
600015f0:	20002678 	.word	0x20002678
600015f4:	000037b5 	.word	0x000037b5
600015f8:	20200000 	.word	0x20200000
600015fc:	e0001000 	.word	0xe0001000
60001600:	23c34600 	.word	0x23c34600
60001604:	40084000 	.word	0x40084000
60001608:	400d4000 	.word	0x400d4000
6000160c:	56c00000 	.word	0x56c00000
60001610:	2000267c 	.word	0x2000267c
60001614:	2018101b 	.word	0x2018101b
60001618:	13110d0c 	.word	0x13110d0c
6000161c:	400fc000 	.word	0x400fc000

60001620 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001620:	4b07      	ldr	r3, [pc, #28]	; (60001640 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001622:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001626:	4a07      	ldr	r2, [pc, #28]	; (60001644 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001628:	4807      	ldr	r0, [pc, #28]	; (60001648 <ResetHandler+0x28>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162a:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
6000162c:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000162e:	4a07      	ldr	r2, [pc, #28]	; (6000164c <ResetHandler+0x2c>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001630:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001632:	4695      	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001634:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
60001638:	f3bf 8f6f 	isb	sy
	ResetHandler2();
6000163c:	f7ff fef4 	bl	60001428 <ResetHandler2>
60001640:	400ac000 	.word	0x400ac000
60001644:	aaaaaaaf 	.word	0xaaaaaaaf
60001648:	00200007 	.word	0x00200007
6000164c:	20070000 	.word	0x20070000

60001650 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001650:	4b10      	ldr	r3, [pc, #64]	; (60001694 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001652:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001654:	4a10      	ldr	r2, [pc, #64]	; (60001698 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001656:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001658:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
6000165c:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000165e:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001660:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001664:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001666:	f441 7140 	orr.w	r1, r1, #768	; 0x300
6000166a:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000166c:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000166e:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001670:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001672:	061b      	lsls	r3, r3, #24
60001674:	d4fc      	bmi.n	60001670 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001676:	4a09      	ldr	r2, [pc, #36]	; (6000169c <analog_init+0x4c>)
60001678:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000167c:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000167e:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001680:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001682:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001684:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001688:	d1fb      	bne.n	60001682 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
6000168a:	4a05      	ldr	r2, [pc, #20]	; (600016a0 <analog_init+0x50>)
6000168c:	7013      	strb	r3, [r2, #0]
}
6000168e:	f85d 4b04 	ldr.w	r4, [sp], #4
60001692:	4770      	bx	lr
60001694:	400fc000 	.word	0x400fc000
60001698:	400c4000 	.word	0x400c4000
6000169c:	400c8000 	.word	0x400c8000
600016a0:	200026ad 	.word	0x200026ad

600016a4 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
600016a4:	4770      	bx	lr
600016a6:	bf00      	nop

600016a8 <startup_default_middle_hook>:
600016a8:	4770      	bx	lr
600016aa:	bf00      	nop

600016ac <startup_default_late_hook>:
600016ac:	4770      	bx	lr
600016ae:	bf00      	nop

600016b0 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600016b0:	bf00      	nop
600016b2:	4770      	bx	lr

600016b4 <configure_cache>:
{
600016b4:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
600016b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600016ba:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600016bc:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600016be:	482b      	ldr	r0, [pc, #172]	; (6000176c <configure_cache+0xb8>)
	SCB_MPU_CTRL = 0; // turn off MPU
600016c0:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600016c4:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600016c8:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600016ca:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600016ce:	4828      	ldr	r0, [pc, #160]	; (60001770 <configure_cache+0xbc>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600016d0:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016d4:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600016d6:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016da:	4826      	ldr	r0, [pc, #152]	; (60001774 <configure_cache+0xc0>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016dc:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016e0:	4a25      	ldr	r2, [pc, #148]	; (60001778 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016e2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016e6:	4c25      	ldr	r4, [pc, #148]	; (6000177c <configure_cache+0xc8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016e8:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016ec:	4824      	ldr	r0, [pc, #144]	; (60001780 <configure_cache+0xcc>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016ee:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016f2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016f6:	4c23      	ldr	r4, [pc, #140]	; (60001784 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016f8:	4823      	ldr	r0, [pc, #140]	; (60001788 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016fa:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016fe:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001702:	4c22      	ldr	r4, [pc, #136]	; (6000178c <configure_cache+0xd8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001704:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001708:	4821      	ldr	r0, [pc, #132]	; (60001790 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000170a:	4a22      	ldr	r2, [pc, #136]	; (60001794 <configure_cache+0xe0>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000170c:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001710:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001714:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001718:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000171c:	4c1e      	ldr	r4, [pc, #120]	; (60001798 <configure_cache+0xe4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000171e:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001720:	481e      	ldr	r0, [pc, #120]	; (6000179c <configure_cache+0xe8>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001722:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001726:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000172a:	4a1d      	ldr	r2, [pc, #116]	; (600017a0 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000172c:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001730:	4c1c      	ldr	r4, [pc, #112]	; (600017a4 <configure_cache+0xf0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001732:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001736:	2201      	movs	r2, #1
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001738:	481b      	ldr	r0, [pc, #108]	; (600017a8 <configure_cache+0xf4>)
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000173a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000173e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001742:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60001746:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000174a:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
6000174e:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001752:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001756:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000175a:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
6000175e:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001762:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001766:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
6000176a:	4770      	bx	lr
6000176c:	1000003f 	.word	0x1000003f
60001770:	03080025 	.word	0x03080025
60001774:	00100009 	.word	0x00100009
60001778:	200026e0 	.word	0x200026e0
6000177c:	00200013 	.word	0x00200013
60001780:	07020021 	.word	0x07020021
60001784:	20000014 	.word	0x20000014
60001788:	13080025 	.word	0x13080025
6000178c:	10000009 	.word	0x10000009
60001790:	20200016 	.word	0x20200016
60001794:	130b0027 	.word	0x130b0027
60001798:	40000017 	.word	0x40000017
6000179c:	60000018 	.word	0x60000018
600017a0:	070b002f 	.word	0x070b002f
600017a4:	70000019 	.word	0x70000019
600017a8:	130b002f 	.word	0x130b002f

600017ac <usb_pll_start>:
{
600017ac:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600017ae:	4a15      	ldr	r2, [pc, #84]	; (60001804 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600017b0:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600017b2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600017b6:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600017ba:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600017be:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600017c2:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600017c6:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600017c8:	f013 0f02 	tst.w	r3, #2
600017cc:	d10e      	bne.n	600017ec <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600017ce:	f413 5f00 	tst.w	r3, #8192	; 0x2000
600017d2:	d00f      	beq.n	600017f4 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600017d4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
600017d8:	d00e      	beq.n	600017f8 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600017da:	2b00      	cmp	r3, #0
600017dc:	daf3      	bge.n	600017c6 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600017de:	f413 3f80 	tst.w	r3, #65536	; 0x10000
600017e2:	d10b      	bne.n	600017fc <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600017e4:	065b      	lsls	r3, r3, #25
600017e6:	d50b      	bpl.n	60001800 <usb_pll_start+0x54>
}
600017e8:	bcf0      	pop	{r4, r5, r6, r7}
600017ea:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600017ec:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
600017ee:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600017f0:	6190      	str	r0, [r2, #24]
			continue;
600017f2:	e7e8      	b.n	600017c6 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600017f4:	6155      	str	r5, [r2, #20]
			continue;
600017f6:	e7e6      	b.n	600017c6 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600017f8:	6156      	str	r6, [r2, #20]
			continue;
600017fa:	e7e4      	b.n	600017c6 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600017fc:	6191      	str	r1, [r2, #24]
			continue;
600017fe:	e7e2      	b.n	600017c6 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001800:	6157      	str	r7, [r2, #20]
			continue;
60001802:	e7e0      	b.n	600017c6 <usb_pll_start+0x1a>
60001804:	400d8000 	.word	0x400d8000

60001808 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001808:	4a3f      	ldr	r2, [pc, #252]	; (60001908 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000180a:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000180c:	493f      	ldr	r1, [pc, #252]	; (6000190c <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000180e:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001812:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001816:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000181a:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001910 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000181e:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001822:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001914 <tempmon_init+0x10c>
{
60001826:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001828:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000182c:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001830:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001834:	4d38      	ldr	r5, [pc, #224]	; (60001918 <tempmon_init+0x110>)
60001836:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001838:	4c38      	ldr	r4, [pc, #224]	; (6000191c <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000183a:	4839      	ldr	r0, [pc, #228]	; (60001920 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000183c:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000183e:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001842:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001844:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001848:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
6000184c:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001850:	ee07 1a10 	vmov	s14, r1
60001854:	4b33      	ldr	r3, [pc, #204]	; (60001924 <tempmon_init+0x11c>)
60001856:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000185a:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000185c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001860:	4931      	ldr	r1, [pc, #196]	; (60001928 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001862:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001866:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000186a:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000186e:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001872:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001876:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000187a:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000187e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001882:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001886:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000188a:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000188e:	4827      	ldr	r0, [pc, #156]	; (6000192c <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001890:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001894:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001898:	ee75 5a87 	vadd.f32	s11, s11, s14
6000189c:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018a0:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600018a4:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018a8:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600018ac:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018b0:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600018b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600018b8:	ee16 3a10 	vmov	r3, s12
600018bc:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600018c4:	ea01 4103 	and.w	r1, r1, r3, lsl #16
600018c8:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018ca:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600018ce:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600018d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
600018d6:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
600018da:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600018dc:	4914      	ldr	r1, [pc, #80]	; (60001930 <tempmon_init+0x128>)
600018de:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600018e2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
600018e6:	f043 0302 	orr.w	r3, r3, #2
600018ea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
600018ee:	4b11      	ldr	r3, [pc, #68]	; (60001934 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600018f0:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
600018f4:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600018f8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600018fc:	2201      	movs	r2, #1
}
600018fe:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001900:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001904:	4770      	bx	lr
60001906:	bf00      	nop
60001908:	400d8100 	.word	0x400d8100
6000190c:	401f4400 	.word	0x401f4400
60001910:	42aa0000 	.word	0x42aa0000
60001914:	42b40000 	.word	0x42b40000
60001918:	20002640 	.word	0x20002640
6000191c:	2000263c 	.word	0x2000263c
60001920:	20002644 	.word	0x20002644
60001924:	20002648 	.word	0x20002648
60001928:	0fff0000 	.word	0x0fff0000
6000192c:	e000e400 	.word	0xe000e400
60001930:	20001800 	.word	0x20001800
60001934:	0000256d 	.word	0x0000256d

60001938 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001938:	4b31      	ldr	r3, [pc, #196]	; (60001a00 <usb_init+0xc8>)
6000193a:	f640 7261 	movw	r2, #3937	; 0xf61
{
6000193e:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001940:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001944:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001948:	f000 f8aa 	bl	60001aa0 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000194c:	4a2d      	ldr	r2, [pc, #180]	; (60001a04 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
6000194e:	492e      	ldr	r1, [pc, #184]	; (60001a08 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001950:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001954:	482d      	ldr	r0, [pc, #180]	; (60001a0c <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001956:	f043 0303 	orr.w	r3, r3, #3
6000195a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000195e:	4b2c      	ldr	r3, [pc, #176]	; (60001a10 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001960:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001964:	6802      	ldr	r2, [r0, #0]
60001966:	421a      	tst	r2, r3
60001968:	d103      	bne.n	60001972 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000196a:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
6000196e:	079a      	lsls	r2, r3, #30
60001970:	d01b      	beq.n	600019aa <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001972:	4a25      	ldr	r2, [pc, #148]	; (60001a08 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001974:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001978:	4b24      	ldr	r3, [pc, #144]	; (60001a0c <usb_init+0xd4>)
6000197a:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000197c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001980:	f043 0302 	orr.w	r3, r3, #2
60001984:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001988:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
6000198c:	079b      	lsls	r3, r3, #30
6000198e:	d4fb      	bmi.n	60001988 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001990:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001994:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001998:	4b1c      	ldr	r3, [pc, #112]	; (60001a0c <usb_init+0xd4>)
6000199a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000199e:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600019a2:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600019a4:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
600019a6:	f000 f877 	bl	60001a98 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600019aa:	4a18      	ldr	r2, [pc, #96]	; (60001a0c <usb_init+0xd4>)
600019ac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600019b0:	4c15      	ldr	r4, [pc, #84]	; (60001a08 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
600019b2:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600019b4:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600019b6:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600019b8:	4b16      	ldr	r3, [pc, #88]	; (60001a14 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
600019ba:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600019bc:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600019c0:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600019c4:	4618      	mov	r0, r3
600019c6:	f000 f86f 	bl	60001aa8 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
600019ca:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600019ce:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600019d0:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600019d4:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600019d8:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600019da:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
600019de:	641a      	str	r2, [r3, #64]	; 0x40
600019e0:	4b0d      	ldr	r3, [pc, #52]	; (60001a18 <usb_init+0xe0>)
600019e2:	4a0e      	ldr	r2, [pc, #56]	; (60001a1c <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600019e4:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
600019e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600019ec:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
600019f0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600019f4:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
600019f6:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
600019fa:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
600019fe:	bd10      	pop	{r4, pc}
60001a00:	400d8000 	.word	0x400d8000
60001a04:	400fc000 	.word	0x400fc000
60001a08:	402e0000 	.word	0x402e0000
60001a0c:	400d9000 	.word	0x400d9000
60001a10:	001e1c00 	.word	0x001e1c00
60001a14:	20000000 	.word	0x20000000
60001a18:	20001800 	.word	0x20001800
60001a1c:	00002755 	.word	0x00002755

60001a20 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60001a20:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001a22:	4b0e      	ldr	r3, [pc, #56]	; (60001a5c <_reboot_Teensyduino_+0x3c>)
60001a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001a26:	079b      	lsls	r3, r3, #30
60001a28:	d400      	bmi.n	60001a2c <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001a2a:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001a2c:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001a2e:	4b0c      	ldr	r3, [pc, #48]	; (60001a60 <_reboot_Teensyduino_+0x40>)
60001a30:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001a32:	4a0c      	ldr	r2, [pc, #48]	; (60001a64 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001a34:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001a38:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001a3c:	490a      	ldr	r1, [pc, #40]	; (60001a68 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001a3e:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001a42:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001a44:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001a46:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001a4a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001a4e:	4807      	ldr	r0, [pc, #28]	; (60001a6c <_reboot_Teensyduino_+0x4c>)
60001a50:	4a07      	ldr	r2, [pc, #28]	; (60001a70 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001a52:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001a54:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001a56:	689b      	ldr	r3, [r3, #8]
60001a58:	4798      	blx	r3
	}
	__builtin_unreachable();
60001a5a:	bf00      	nop
60001a5c:	401f4400 	.word	0x401f4400
60001a60:	402e0000 	.word	0x402e0000
60001a64:	400ac000 	.word	0x400ac000
60001a68:	00200003 	.word	0x00200003
60001a6c:	20208000 	.word	0x20208000
60001a70:	eb120000 	.word	0xeb120000

60001a74 <_init>:
60001a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001a76:	bf00      	nop
60001a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001a7a:	bc08      	pop	{r3}
60001a7c:	469e      	mov	lr, r3
60001a7e:	4770      	bx	lr

60001a80 <____libc_init_array_veneer>:
60001a80:	f85f f000 	ldr.w	pc, [pc]	; 60001a84 <____libc_init_array_veneer+0x4>
60001a84:	000047a1 	.word	0x000047a1

60001a88 <__pwm_init_veneer>:
60001a88:	f85f f000 	ldr.w	pc, [pc]	; 60001a8c <__pwm_init_veneer+0x4>
60001a8c:	00002281 	.word	0x00002281

60001a90 <__set_arm_clock_veneer>:
60001a90:	f85f f000 	ldr.w	pc, [pc]	; 60001a94 <__set_arm_clock_veneer+0x4>
60001a94:	00001a5d 	.word	0x00001a5d

60001a98 <__delay_veneer>:
60001a98:	f85f f000 	ldr.w	pc, [pc]	; 60001a9c <__delay_veneer+0x4>
60001a9c:	00001d4d 	.word	0x00001d4d

60001aa0 <__usb_init_serialnumber_veneer>:
60001aa0:	f85f f000 	ldr.w	pc, [pc]	; 60001aa4 <__usb_init_serialnumber_veneer+0x4>
60001aa4:	00002ec5 	.word	0x00002ec5

60001aa8 <__memset_veneer>:
60001aa8:	f85f f000 	ldr.w	pc, [pc]	; 60001aac <__memset_veneer+0x4>
60001aac:	000045b5 	.word	0x000045b5

60001ab0 <__main_veneer>:
60001ab0:	f85f f000 	ldr.w	pc, [pc]	; 60001ab4 <__main_veneer+0x4>
60001ab4:	00001edd 	.word	0x00001edd

60001ab8 <__frame_dummy_init_array_entry>:
60001ab8:	00000045 000004ed 00001499 00001519     E...............
60001ac8:	0000159d 00001621 000016a5 00001729     ....!.......)...
60001ad8:	000017ad                                ....

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
	// Event Handler functions and data
	static uint8_t serial_event_handlers_active;

	using Print::write; 
	// Transmit a single byte
	size_t write(unsigned long n) { return write((uint8_t)n); }
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x14>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x18>)

void serial_phex(uint32_t n)
{
	serial_phex1(n >> 4);
	serial_phex1(n);
}
      24:	1a1b      	subs	r3, r3, r0
      26:	0fd9      	lsrs	r1, r3, #31
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x12>
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1c>)
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x12>
      34:	4718      	bx	r3
      36:	4770      	bx	lr
      38:	20001ac0 	.word	0x20001ac0
      3c:	20001ac0 	.word	0x20001ac0
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
}
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	200025bc 	.word	0x200025bc
      64:	6000e000 	.word	0x6000e000

00000068 <setup>:
      68:	b510      	push	{r4, lr}
      6a:	2101      	movs	r1, #1
uint32_t run_time = 0; //milliseconds

void setup()
{

  pinMode(BlueLED_pin,OUTPUT);
      6c:	2010      	movs	r0, #16
      6e:	f001 fefd 	bl	1e6c <pinMode>
  pinMode(GreenLED_pin,OUTPUT);
      72:	2101      	movs	r1, #1
      74:	2015      	movs	r0, #21
  pinMode(SwitchApply_Input,INPUT);
  pinMode(SwitchRetract_Input,INPUT);
  pinMode(SupplyPressure_Input,INPUT);
  pinMode(ServicePressure_Input,INPUT);

  positionEncoder.setInitConfig();
      76:	4c1c      	ldr	r4, [pc, #112]	; (e8 <setup+0x80>)
  pinMode(GreenLED_pin,OUTPUT);
      78:	f001 fef8 	bl	1e6c <pinMode>
  pinMode(YellowLED_pin,OUTPUT);
      7c:	2101      	movs	r1, #1
      7e:	2017      	movs	r0, #23
      80:	f001 fef4 	bl	1e6c <pinMode>
  pinMode(OrangeLED_pin,OUTPUT);
      84:	2101      	movs	r1, #1
      86:	2016      	movs	r0, #22
      88:	f001 fef0 	bl	1e6c <pinMode>
  pinMode(ResetButton_Input, INPUT);
      8c:	2100      	movs	r1, #0
      8e:	200d      	movs	r0, #13
      90:	f001 feec 	bl	1e6c <pinMode>
  pinMode(LimitApply_Input,INPUT);
      94:	2100      	movs	r1, #0
      96:	2008      	movs	r0, #8
      98:	f001 fee8 	bl	1e6c <pinMode>
  pinMode(LimitRetract_Input,INPUT);
      9c:	2100      	movs	r1, #0
      9e:	2009      	movs	r0, #9
      a0:	f001 fee4 	bl	1e6c <pinMode>
  pinMode(SafetyApply_Input,INPUT);
      a4:	2100      	movs	r1, #0
      a6:	200b      	movs	r0, #11
      a8:	f001 fee0 	bl	1e6c <pinMode>
  pinMode(SafetyRetract_Input,INPUT);
      ac:	2100      	movs	r1, #0
      ae:	200a      	movs	r0, #10
      b0:	f001 fedc 	bl	1e6c <pinMode>
  pinMode(SwitchApply_Input,INPUT);
      b4:	2100      	movs	r1, #0
      b6:	2012      	movs	r0, #18
      b8:	f001 fed8 	bl	1e6c <pinMode>
  pinMode(SwitchRetract_Input,INPUT);
      bc:	2100      	movs	r1, #0
      be:	2013      	movs	r0, #19
      c0:	f001 fed4 	bl	1e6c <pinMode>
  pinMode(SupplyPressure_Input,INPUT);
      c4:	2100      	movs	r1, #0
      c6:	200e      	movs	r0, #14
      c8:	f001 fed0 	bl	1e6c <pinMode>
  pinMode(ServicePressure_Input,INPUT);
      cc:	2100      	movs	r1, #0
      ce:	200f      	movs	r0, #15
      d0:	f001 fecc 	bl	1e6c <pinMode>
  positionEncoder.setInitConfig();
      d4:	4620      	mov	r0, r4
      d6:	f000 fc71 	bl	9bc <QuadEncoder::setInitConfig()>
  positionEncoder.EncConfig.INDEXTriggerMode = RISING_EDGE;
      da:	2301      	movs	r3, #1
  positionEncoder.init();
      dc:	4620      	mov	r0, r4
  positionEncoder.EncConfig.INDEXTriggerMode = RISING_EDGE;
      de:	70e3      	strb	r3, [r4, #3]
  
}
      e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  positionEncoder.init();
      e4:	f000 bf28 	b.w	f38 <QuadEncoder::init()>
      e8:	200025d4 	.word	0x200025d4

000000ec <readInputs()>:
	Serial.printf("\tpositionModulusValue: %d\n", config->positionModulusValue);
	
	Serial.printf("\tpositionInitialValue: %d\n",config->positionInitialValue);
	Serial.printf("\tpositionROIE: %d\n",config->positionROIE);
	Serial.printf("\tpositionRUIE: %x\n",config->positionRUIE);
	Serial.printf("\n");
      ec:	b538      	push	{r3, r4, r5, lr}
      ee:	2008      	movs	r0, #8
      f0:	4d3f      	ldr	r5, [pc, #252]	; (1f0 <readInputs()+0x104>)
      f2:	f001 fea9 	bl	1e48 <digitalRead>
      f6:	4603      	mov	r3, r0
      f8:	4a3e      	ldr	r2, [pc, #248]	; (1f4 <readInputs()+0x108>)
      fa:	2009      	movs	r0, #9
      fc:	3b00      	subs	r3, #0
      fe:	4c3e      	ldr	r4, [pc, #248]	; (1f8 <readInputs()+0x10c>)
     100:	bf18      	it	ne
     102:	2301      	movne	r3, #1
     104:	7013      	strb	r3, [r2, #0]
     106:	f001 fe9f 	bl	1e48 <digitalRead>
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     10a:	4603      	mov	r3, r0
     10c:	4a3b      	ldr	r2, [pc, #236]	; (1fc <readInputs()+0x110>)
     10e:	200e      	movs	r0, #14
	if (newbuffer) {
     110:	3b00      	subs	r3, #0
     112:	bf18      	it	ne
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return *this;
		if (size > capacity && !changeBuffer(size)) return *this;
		int index = len - 1;
     114:	2301      	movne	r3, #1
		capacity = maxStrLen;
     116:	7013      	strb	r3, [r2, #0]
     118:	f001 fc5a 	bl	19d0 <analogRead>


void readInputs(){
  LimitApply_Value = digitalRead(LimitApply_Input); 
  LimitRetract_Value = digitalRead(LimitRetract_Input);
  SupplyPressure_bytes = analogRead(SupplyPressure_Input);
     11c:	4603      	mov	r3, r0
  ServicePressure_bytes = analogRead(ServicePressure_Input);
     11e:	200f      	movs	r0, #15
  SupplyPressure_bytes = analogRead(SupplyPressure_Input);
     120:	802b      	strh	r3, [r5, #0]
  ServicePressure_bytes = analogRead(ServicePressure_Input);
     122:	f001 fc55 	bl	19d0 <analogRead>
     126:	4603      	mov	r3, r0
  SwitchApply_Value = digitalRead(SwitchApply_Input); 
     128:	2012      	movs	r0, #18
  ServicePressure_bytes = analogRead(ServicePressure_Input);
     12a:	8023      	strh	r3, [r4, #0]
  SwitchApply_Value = digitalRead(SwitchApply_Input); 
     12c:	f001 fe8c 	bl	1e48 <digitalRead>
     130:	4603      	mov	r3, r0
     132:	4a33      	ldr	r2, [pc, #204]	; (200 <readInputs()+0x114>)
  SwitchRetract_Value = digitalRead(SwitchRetract_Input);
     134:	2013      	movs	r0, #19
  SwitchApply_Value = digitalRead(SwitchApply_Input); 
     136:	3b00      	subs	r3, #0
     138:	bf18      	it	ne
     13a:	2301      	movne	r3, #1
     13c:	7013      	strb	r3, [r2, #0]
  SwitchRetract_Value = digitalRead(SwitchRetract_Input);
     13e:	f001 fe83 	bl	1e48 <digitalRead>
     142:	4603      	mov	r3, r0
     144:	4a2f      	ldr	r2, [pc, #188]	; (204 <readInputs()+0x118>)
  ResetButton_Value = digitalRead(ResetButton_Input);
     146:	200d      	movs	r0, #13
  SwitchRetract_Value = digitalRead(SwitchRetract_Input);
     148:	3b00      	subs	r3, #0
     14a:	bf18      	it	ne
     14c:	2301      	movne	r3, #1
     14e:	7013      	strb	r3, [r2, #0]
  ResetButton_Value = digitalRead(ResetButton_Input);
     150:	f001 fe7a 	bl	1e48 <digitalRead>
     154:	4603      	mov	r3, r0
     156:	4a2c      	ldr	r2, [pc, #176]	; (208 <readInputs()+0x11c>)

  // Read encoder value
  mCurPosValue = positionEncoder.read();
     158:	482c      	ldr	r0, [pc, #176]	; (20c <readInputs()+0x120>)
  ResetButton_Value = digitalRead(ResetButton_Input);
     15a:	3b00      	subs	r3, #0
     15c:	bf18      	it	ne
     15e:	2301      	movne	r3, #1
     160:	7013      	strb	r3, [r2, #0]
  mCurPosValue = positionEncoder.read();
     162:	f000 fcf9 	bl	b58 <QuadEncoder::read()>
     166:	492a      	ldr	r1, [pc, #168]	; (210 <readInputs()+0x124>)
  Displacement = mCurPosValue/STEPS_PER_MM;
     168:	4a2a      	ldr	r2, [pc, #168]	; (214 <readInputs()+0x128>)
// mapping.
template <class T, class A, class B, class C, class D>
long map(T _x, A _in_min, B _in_max, C _out_min, D _out_max, typename std::enable_if<std::is_integral<T>::value >::type* = 0)
{
	// when the input number is an integer type, do all math as 32 bit signed long
	long x = _x, in_min = _in_min, in_max = _in_max, out_min = _out_min, out_max = _out_max;
     16a:	f9b5 3000 	ldrsh.w	r3, [r5]
  mCurPosValue = positionEncoder.read();
     16e:	6008      	str	r0, [r1, #0]
  Displacement = mCurPosValue/STEPS_PER_MM;
     170:	fb82 5200 	smull	r5, r2, r2, r0
     174:	17c0      	asrs	r0, r0, #31
	// first compute the ranges and check if input doesn't matter
	long in_range = in_max - in_min;
	long out_range = out_max - out_min;
	if (in_range == 0) return out_min + out_range / 2;
	// compute the numerator
	long num = (x - in_min) * out_range;
     176:	3b84      	subs	r3, #132	; 0x84
     178:	2564      	movs	r5, #100	; 0x64
     17a:	ebc0 1062 	rsb	r0, r0, r2, asr #5
		num += in_range / 2;
	} else {
		num -= in_range / 2;
	}
	// divide by input range and add output offset to complete map() compute
	long result = num / in_range + out_min;
     17e:	4926      	ldr	r1, [pc, #152]	; (218 <readInputs()+0x12c>)
	long num = (x - in_min) * out_range;
     180:	fb05 f303 	mul.w	r3, r5, r3
     184:	4a25      	ldr	r2, [pc, #148]	; (21c <readInputs()+0x130>)
     186:	ee07 0a90 	vmov	s15, r0
     18a:	2064      	movs	r0, #100	; 0x64
		num += in_range / 2;
     18c:	f203 1329 	addw	r3, r3, #297	; 0x129
     190:	eeb8 7be7 	vcvt.f64.s32	d7, s15
	// fix "a strange behaviour with negative numbers" (see ArduinoCore-API issue #51)
	//   this step can be deleted if you don't care about non-linear output
	//   behavior extrapolating slightly beyond the mapped input & output range
	if (out_range >= 0) {
		if (in_range * num < 0) return result - 1;
     194:	2b00      	cmp	r3, #0
     196:	ed82 7b00 	vstr	d7, [r2]
	long result = num / in_range + out_min;
     19a:	fb81 2103 	smull	r2, r1, r1, r3
     19e:	ea4f 72e3 	mov.w	r2, r3, asr #31
	long x = _x, in_min = _in_min, in_max = _in_max, out_min = _out_min, out_max = _out_max;
     1a2:	f9b4 3000 	ldrsh.w	r3, [r4]
	long result = num / in_range + out_min;
     1a6:	ebc2 2221 	rsb	r2, r2, r1, asr #8
     1aa:	491d      	ldr	r1, [pc, #116]	; (220 <readInputs()+0x134>)
	long num = (x - in_min) * out_range;
     1ac:	f1a3 0396 	sub.w	r3, r3, #150	; 0x96
		if (in_range * num < 0) return result - 1;
     1b0:	bfb8      	it	lt
     1b2:	f102 32ff 	addlt.w	r2, r2, #4294967295
	long num = (x - in_min) * out_range;
     1b6:	fb00 f303 	mul.w	r3, r0, r3
  
  // Map pressure readings
  //TODO: Kaushik, please label these magic numbers
  SupplyPressure_Value = map(SupplyPressure_bytes, 132 , 726, 0, 100); //
     1ba:	ee07 2a90 	vmov	s15, r2
     1be:	4a19      	ldr	r2, [pc, #100]	; (224 <readInputs()+0x138>)
		num += in_range / 2;
     1c0:	f503 73c9 	add.w	r3, r3, #402	; 0x192
     1c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
		if (in_range * num < 0) return result - 1;
     1c8:	2b00      	cmp	r3, #0
     1ca:	ed82 7b00 	vstr	d7, [r2]
	long result = num / in_range + out_min;
     1ce:	fb81 2103 	smull	r2, r1, r1, r3
     1d2:	ea4f 72e3 	mov.w	r2, r3, asr #31
  ServicePressure_Value = map(ServicePressure_bytes, 150, 954, 0, 100);
     1d6:	4b14      	ldr	r3, [pc, #80]	; (228 <readInputs()+0x13c>)
     1d8:	ebc2 02e1 	rsb	r2, r2, r1, asr #3
		if (in_range * num < 0) return result - 1;
     1dc:	bfb8      	it	lt
     1de:	f102 32ff 	addlt.w	r2, r2, #4294967295
     1e2:	ee07 2a90 	vmov	s15, r2
     1e6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     1ea:	ed83 7b00 	vstr	d7, [r3]
  
}
     1ee:	bd38      	pop	{r3, r4, r5, pc}
     1f0:	2000269a 	.word	0x2000269a
     1f4:	200026a2 	.word	0x200026a2
     1f8:	20002698 	.word	0x20002698
     1fc:	200026a3 	.word	0x200026a3
     200:	200026a7 	.word	0x200026a7
     204:	200026a8 	.word	0x200026a8
     208:	200026a4 	.word	0x200026a4
     20c:	200025d4 	.word	0x200025d4
     210:	200025b4 	.word	0x200025b4
     214:	05d065bf 	.word	0x05d065bf
     218:	6e5478ad 	.word	0x6e5478ad
     21c:	20001c80 	.word	0x20001c80
     220:	028c1979 	.word	0x028c1979
     224:	20001c90 	.word	0x20001c90
     228:	20001c88 	.word	0x20001c88

0000022c <loop>:

void HardwareSerial::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     230:	4a8d      	ldr	r2, [pc, #564]	; (468 <loop+0x23c>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     232:	b093      	sub	sp, #76	; 0x4c
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     234:	4c8d      	ldr	r4, [pc, #564]	; (46c <loop+0x240>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     236:	6811      	ldr	r1, [r2, #0]
     238:	6823      	ldr	r3, [r4, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     23a:	1a5b      	subs	r3, r3, r1
     23c:	2b31      	cmp	r3, #49	; 0x31
     23e:	d802      	bhi.n	246 <loop+0x1a>
};
     240:	b013      	add	sp, #76	; 0x4c
     242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     246:	6823      	ldr	r3, [r4, #0]
     248:	4d89      	ldr	r5, [pc, #548]	; (470 <loop+0x244>)
     24a:	6013      	str	r3, [r2, #0]
     24c:	f7ff ff4e 	bl	ec <readInputs()>
     250:	4b88      	ldr	r3, [pc, #544]	; (474 <loop+0x248>)
     252:	f8df 9288 	ldr.w	r9, [pc, #648]	; 4dc <loop+0x2b0>
     256:	f893 8000 	ldrb.w	r8, [r3]
     25a:	f1b8 0f00 	cmp.w	r8, #0
     25e:	f000 80c7 	beq.w	3f0 <loop+0x1c4>
     262:	4f85      	ldr	r7, [pc, #532]	; (478 <loop+0x24c>)
     264:	4e85      	ldr	r6, [pc, #532]	; (47c <loop+0x250>)
     266:	f003 f921 	bl	34ac <usb_serial_available>
     26a:	2800      	cmp	r0, #0
     26c:	f040 80bb 	bne.w	3e6 <loop+0x1ba>
     270:	4b83      	ldr	r3, [pc, #524]	; (480 <loop+0x254>)
     272:	781b      	ldrb	r3, [r3, #0]
     274:	2b00      	cmp	r3, #0
     276:	f000 8092 	beq.w	39e <loop+0x172>
    else if (SwitchRetract_Value == PRESSED) magnitude_increase = -1;
     27a:	4b82      	ldr	r3, [pc, #520]	; (484 <loop+0x258>)
    if (LimitApply_Value == PRESSED || SafetyApply_Value == PRESSED){ // Limit Switch Left
     27c:	f8df a260 	ldr.w	sl, [pc, #608]	; 4e0 <loop+0x2b4>
    else if (SwitchRetract_Value == PRESSED) magnitude_increase = -1;
     280:	781b      	ldrb	r3, [r3, #0]
     282:	3b01      	subs	r3, #1
    if (SwitchApply_Value == PRESSED) magnitude_increase = 1;
     284:	f8c9 3000 	str.w	r3, [r9]
    if (LimitApply_Value == PRESSED || SafetyApply_Value == PRESSED){ // Limit Switch Left
     288:	f89a 3000 	ldrb.w	r3, [sl]
     28c:	2b00      	cmp	r3, #0
     28e:	f000 8090 	beq.w	3b2 <loop+0x186>
     292:	4b7d      	ldr	r3, [pc, #500]	; (488 <loop+0x25c>)
     294:	781b      	ldrb	r3, [r3, #0]
     296:	2b00      	cmp	r3, #0
     298:	f000 808b 	beq.w	3b2 <loop+0x186>
     29c:	2300      	movs	r3, #0
    if (LimitRetract_Value == PRESSED || SafetyRetract_Value == PRESSED){ // Limit Switch Right
     29e:	f8df b244 	ldr.w	fp, [pc, #580]	; 4e4 <loop+0x2b8>
      BlueLED_state = HIGH;
     2a2:	703b      	strb	r3, [r7, #0]
    if (LimitRetract_Value == PRESSED || SafetyRetract_Value == PRESSED){ // Limit Switch Right
     2a4:	f89b 3000 	ldrb.w	r3, [fp]
     2a8:	b123      	cbz	r3, 2b4 <loop+0x88>
     2aa:	4b78      	ldr	r3, [pc, #480]	; (48c <loop+0x260>)
     2ac:	781b      	ldrb	r3, [r3, #0]
     2ae:	2b00      	cmp	r3, #0
     2b0:	f040 8083 	bne.w	3ba <loop+0x18e>
      ActuatorVelocity = 0;
     2b4:	2300      	movs	r3, #0
     2b6:	602b      	str	r3, [r5, #0]
      GreenLED_state = HIGH;
     2b8:	2301      	movs	r3, #1
     2ba:	7033      	strb	r3, [r6, #0]
      Direction = "Halt";
     2bc:	2301      	movs	r3, #1
     2be:	4974      	ldr	r1, [pc, #464]	; (490 <loop+0x264>)
     2c0:	4874      	ldr	r0, [pc, #464]	; (494 <loop+0x268>)
     2c2:	930d      	str	r3, [sp, #52]	; 0x34
     2c4:	f001 fb72 	bl	19ac <String::operator=(char const*)>
     2c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     2ca:	4618      	mov	r0, r3
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
     2cc:	4972      	ldr	r1, [pc, #456]	; (498 <loop+0x26c>)
      YellowLED_state = HIGH;
     2ce:	f8df 8218 	ldr.w	r8, [pc, #536]	; 4e8 <loop+0x2bc>
     2d2:	6822      	ldr	r2, [r4, #0]
     2d4:	f888 3000 	strb.w	r3, [r8]
     2d8:	680b      	ldr	r3, [r1, #0]
     2da:	1ad2      	subs	r2, r2, r3
      OrangeLED_state = LOW;
     2dc:	4b6f      	ldr	r3, [pc, #444]	; (49c <loop+0x270>)
    if (ramp_timer >= ramp_time){
     2de:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
      OrangeLED_state = LOW;
     2e2:	7018      	strb	r0, [r3, #0]
    if (ramp_timer >= ramp_time){
     2e4:	d278      	bcs.n	3d8 <loop+0x1ac>
      ActuatorVelocity += magnitude_increase;
     2e6:	682a      	ldr	r2, [r5, #0]
    ActuatorVelocity = constrain(ActuatorVelocity, MIN_SPEED, MAX_SPEED);
     2e8:	2a28      	cmp	r2, #40	; 0x28
     2ea:	f06f 0127 	mvn.w	r1, #39	; 0x27
    smartDriveDuo30.control(ActuatorVelocity, ActuatorVelocity);
     2ee:	486c      	ldr	r0, [pc, #432]	; (4a0 <loop+0x274>)
     2f0:	bfa8      	it	ge
     2f2:	2228      	movge	r2, #40	; 0x28
     2f4:	428a      	cmp	r2, r1
     2f6:	bfb8      	it	lt
     2f8:	460a      	movlt	r2, r1
     2fa:	4611      	mov	r1, r2
    ActuatorVelocity = constrain(ActuatorVelocity, MIN_SPEED, MAX_SPEED);
     2fc:	602a      	str	r2, [r5, #0]
    smartDriveDuo30.control(ActuatorVelocity, ActuatorVelocity);
     2fe:	f000 f95f 	bl	5c0 <Cytron_SmartDriveDuo::control(int, int)>
    digitalWrite(BlueLED_pin,BlueLED_state);
     302:	7839      	ldrb	r1, [r7, #0]
     304:	2010      	movs	r0, #16
     306:	f001 fd75 	bl	1df4 <digitalWrite>
    digitalWrite(GreenLED_pin,GreenLED_state);
     30a:	7831      	ldrb	r1, [r6, #0]
     30c:	2015      	movs	r0, #21
     30e:	f001 fd71 	bl	1df4 <digitalWrite>
    digitalWrite(OrangeLED_pin,OrangeLED_state);
     312:	4b62      	ldr	r3, [pc, #392]	; (49c <loop+0x270>)
     314:	2016      	movs	r0, #22
     316:	7819      	ldrb	r1, [r3, #0]
     318:	f001 fd6c 	bl	1df4 <digitalWrite>
    digitalWrite(YellowLED_pin,YellowLED_state);
     31c:	f898 1000 	ldrb.w	r1, [r8]
     320:	2017      	movs	r0, #23
     322:	f001 fd67 	bl	1df4 <digitalWrite>
     326:	495f      	ldr	r1, [pc, #380]	; (4a4 <loop+0x278>)
     328:	6823      	ldr	r3, [r4, #0]
     32a:	680a      	ldr	r2, [r1, #0]
     32c:	1a9b      	subs	r3, r3, r2
    if (serial_send_timer>= serial_send_time){
     32e:	2b63      	cmp	r3, #99	; 0x63
     330:	d986      	bls.n	240 <loop+0x14>
     332:	4b5d      	ldr	r3, [pc, #372]	; (4a8 <loop+0x27c>)
      Serial.printf("% 12d, % 6.3f, % 8s, % +3d, % 5d, % 5d, %b, %b, %b, %b\n",
     334:	ae0e      	add	r6, sp, #56	; 0x38
     336:	6822      	ldr	r2, [r4, #0]
     338:	681b      	ldr	r3, [r3, #0]
     33a:	4630      	mov	r0, r6
     33c:	6824      	ldr	r4, [r4, #0]
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
     33e:	600a      	str	r2, [r1, #0]
	operator unsigned long () const { return millis() - ms; }
     340:	1ae4      	subs	r4, r4, r3
      run_time = run_timer;
     342:	4b5a      	ldr	r3, [pc, #360]	; (4ac <loop+0x280>)
      Serial.printf("% 12d, % 6.3f, % 8s, % +3d, % 5d, % 5d, %b, %b, %b, %b\n",
     344:	4953      	ldr	r1, [pc, #332]	; (494 <loop+0x268>)
      run_time = run_timer;
     346:	601c      	str	r4, [r3, #0]
      Serial.printf("% 12d, % 6.3f, % 8s, % +3d, % 5d, % 5d, %b, %b, %b, %b\n",
     348:	4b59      	ldr	r3, [pc, #356]	; (4b0 <loop+0x284>)
     34a:	e9d3 8900 	ldrd	r8, r9, [r3]
     34e:	f001 fabf 	bl	18d0 <String::String(String const&)>
     352:	4858      	ldr	r0, [pc, #352]	; (4b4 <loop+0x288>)
     354:	4958      	ldr	r1, [pc, #352]	; (4b8 <loop+0x28c>)
     356:	e9cd 8900 	strd	r8, r9, [sp]
     35a:	f89b 3000 	ldrb.w	r3, [fp]
     35e:	9309      	str	r3, [sp, #36]	; 0x24
     360:	682a      	ldr	r2, [r5, #0]
     362:	f89a 3000 	ldrb.w	r3, [sl]
     366:	9203      	str	r2, [sp, #12]
     368:	4622      	mov	r2, r4
     36a:	4c48      	ldr	r4, [pc, #288]	; (48c <loop+0x260>)
     36c:	9308      	str	r3, [sp, #32]
     36e:	9602      	str	r6, [sp, #8]
     370:	7824      	ldrb	r4, [r4, #0]
     372:	4b52      	ldr	r3, [pc, #328]	; (4bc <loop+0x290>)
     374:	940b      	str	r4, [sp, #44]	; 0x2c
     376:	4c44      	ldr	r4, [pc, #272]	; (488 <loop+0x25c>)
     378:	7824      	ldrb	r4, [r4, #0]
     37a:	940a      	str	r4, [sp, #40]	; 0x28
     37c:	e9d0 4500 	ldrd	r4, r5, [r0]
     380:	484f      	ldr	r0, [pc, #316]	; (4c0 <loop+0x294>)
     382:	e9cd 4506 	strd	r4, r5, [sp, #24]
     386:	e9d3 4500 	ldrd	r4, r5, [r3]
     38a:	e9cd 4504 	strd	r4, r5, [sp, #16]
     38e:	f001 fa91 	bl	18b4 <Print::printf(char const*, ...)>
     392:	4630      	mov	r0, r6
     394:	f001 faba 	bl	190c <String::~String()>
}
     398:	b013      	add	sp, #76	; 0x4c
     39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     39e:	2301      	movs	r3, #1
    if (LimitApply_Value == PRESSED || SafetyApply_Value == PRESSED){ // Limit Switch Left
     3a0:	f8df a13c 	ldr.w	sl, [pc, #316]	; 4e0 <loop+0x2b4>
    if (SwitchApply_Value == PRESSED) magnitude_increase = 1;
     3a4:	f8c9 3000 	str.w	r3, [r9]
    if (LimitApply_Value == PRESSED || SafetyApply_Value == PRESSED){ // Limit Switch Left
     3a8:	f89a 3000 	ldrb.w	r3, [sl]
     3ac:	2b00      	cmp	r3, #0
     3ae:	f47f af70 	bne.w	292 <loop+0x66>
      ActuatorVelocity = 0; 
     3b2:	2300      	movs	r3, #0
     3b4:	602b      	str	r3, [r5, #0]
      BlueLED_state = HIGH;
     3b6:	2301      	movs	r3, #1
     3b8:	e771      	b.n	29e <loop+0x72>
      GreenLED_state = LOW;
     3ba:	f04f 0800 	mov.w	r8, #0
    if (ActuatorVelocity > 0) {
     3be:	682a      	ldr	r2, [r5, #0]
     3c0:	930d      	str	r3, [sp, #52]	; 0x34
     3c2:	4542      	cmp	r2, r8
      GreenLED_state = LOW;
     3c4:	f886 8000 	strb.w	r8, [r6]
    if (ActuatorVelocity > 0) {
     3c8:	dd44      	ble.n	454 <loop+0x228>
      Direction = "Apply";
     3ca:	493e      	ldr	r1, [pc, #248]	; (4c4 <loop+0x298>)
     3cc:	4831      	ldr	r0, [pc, #196]	; (494 <loop+0x268>)
     3ce:	f001 faed 	bl	19ac <String::operator=(char const*)>
      OrangeLED_state = LOW;
     3d2:	4640      	mov	r0, r8
     3d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     3d6:	e779      	b.n	2cc <loop+0xa0>
      ActuatorVelocity += magnitude_increase;
     3d8:	f8d9 0000 	ldr.w	r0, [r9]
     3dc:	682a      	ldr	r2, [r5, #0]
     3de:	4402      	add	r2, r0
     3e0:	6820      	ldr	r0, [r4, #0]
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
     3e2:	6008      	str	r0, [r1, #0]
     3e4:	e780      	b.n	2e8 <loop+0xbc>
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
	// Reads the next received byte, or returns -1 if nothing has been received
	// from your PC.
        virtual int read() { return usb_serial_getchar(); }
     3e6:	f003 f8a5 	bl	3534 <usb_serial_getchar>
	// Wait for all data written by print() or write() to actually transmit to
	// your PC.  On Teensy 4, this function has a known limitation where it
	// returns early, when buffered data has been given to Teensy's USB device
	// controller, but before your PC's USB host controller actually transfers
	// the data across your USB cable.
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
     3ea:	f003 f8fd 	bl	35e8 <usb_serial_flush_output>
      if (inChar == '0') magnitude_increase = 0;
     3ee:	e73f      	b.n	270 <loop+0x44>
      Displacement = 0;
     3f0:	4b2f      	ldr	r3, [pc, #188]	; (4b0 <loop+0x284>)
     3f2:	f04f 0a00 	mov.w	sl, #0
     3f6:	f04f 0b00 	mov.w	fp, #0
      positionEncoder.init();
     3fa:	4833      	ldr	r0, [pc, #204]	; (4c8 <loop+0x29c>)
      BlueLED_state = HIGH;
     3fc:	4f1e      	ldr	r7, [pc, #120]	; (478 <loop+0x24c>)
      GreenLED_state = HIGH;
     3fe:	4e1f      	ldr	r6, [pc, #124]	; (47c <loop+0x250>)
      ActuatorVelocity = 0;
     400:	f8c5 8000 	str.w	r8, [r5]
      magnitude_increase = 0;
     404:	f8c9 8000 	str.w	r8, [r9]
      Displacement = 0;
     408:	e9c3 ab00 	strd	sl, fp, [r3]
      positionEncoder.init();
     40c:	f000 fd94 	bl	f38 <QuadEncoder::init()>
      BlueLED_state = HIGH;
     410:	2301      	movs	r3, #1
     412:	6822      	ldr	r2, [r4, #0]
     414:	703b      	strb	r3, [r7, #0]
      GreenLED_state = HIGH;
     416:	7033      	strb	r3, [r6, #0]
      mCurPosValue = 0;
     418:	4b2c      	ldr	r3, [pc, #176]	; (4cc <loop+0x2a0>)
     41a:	f8c3 8000 	str.w	r8, [r3]
     41e:	4b22      	ldr	r3, [pc, #136]	; (4a8 <loop+0x27c>)
     420:	601a      	str	r2, [r3, #0]
     422:	e001      	b.n	428 <loop+0x1fc>
        virtual int read() { return usb_serial_getchar(); }
     424:	f003 f886 	bl	3534 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
     428:	f003 f840 	bl	34ac <usb_serial_available>
      while (Serial.available()) Serial.read();
     42c:	2800      	cmp	r0, #0
     42e:	d1f9      	bne.n	424 <loop+0x1f8>
      Serial.println();
     430:	4823      	ldr	r0, [pc, #140]	; (4c0 <loop+0x294>)
     432:	f001 fa23 	bl	187c <Print::println()>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     436:	21a8      	movs	r1, #168	; 0xa8
     438:	4825      	ldr	r0, [pc, #148]	; (4d0 <loop+0x2a4>)
     43a:	f003 f8a1 	bl	3580 <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     43e:	4820      	ldr	r0, [pc, #128]	; (4c0 <loop+0x294>)
     440:	f001 fa1c 	bl	187c <Print::println()>
     444:	2166      	movs	r1, #102	; 0x66
     446:	4823      	ldr	r0, [pc, #140]	; (4d4 <loop+0x2a8>)
     448:	f003 f89a 	bl	3580 <usb_serial_write>
     44c:	481c      	ldr	r0, [pc, #112]	; (4c0 <loop+0x294>)
     44e:	f001 fa15 	bl	187c <Print::println()>
     452:	e708      	b.n	266 <loop+0x3a>
    else if (ActuatorVelocity < 0) {
     454:	f43f af32 	beq.w	2bc <loop+0x90>
      Direction = "Retract";
     458:	491f      	ldr	r1, [pc, #124]	; (4d8 <loop+0x2ac>)
     45a:	480e      	ldr	r0, [pc, #56]	; (494 <loop+0x268>)
     45c:	f001 faa6 	bl	19ac <String::operator=(char const*)>
      OrangeLED_state = HIGH;
     460:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     462:	4618      	mov	r0, r3
     464:	4643      	mov	r3, r8
     466:	e731      	b.n	2cc <loop+0xa0>
     468:	2000259c 	.word	0x2000259c
     46c:	2000267c 	.word	0x2000267c
     470:	20001ca0 	.word	0x20001ca0
     474:	200026a4 	.word	0x200026a4
     478:	20001736 	.word	0x20001736
     47c:	20001737 	.word	0x20001737
     480:	200026a7 	.word	0x200026a7
     484:	200026a8 	.word	0x200026a8
     488:	200026a5 	.word	0x200026a5
     48c:	200026a6 	.word	0x200026a6
     490:	20000bb4 	.word	0x20000bb4
     494:	20001ca4 	.word	0x20001ca4
     498:	200025f8 	.word	0x200025f8
     49c:	20001738 	.word	0x20001738
     4a0:	20002654 	.word	0x20002654
     4a4:	20002650 	.word	0x20002650
     4a8:	20002608 	.word	0x20002608
     4ac:	20002604 	.word	0x20002604
     4b0:	20001c80 	.word	0x20001c80
     4b4:	20001c90 	.word	0x20001c90
     4b8:	20000bbc 	.word	0x20000bbc
     4bc:	20001c88 	.word	0x20001c88
     4c0:	20000ed0 	.word	0x20000ed0
     4c4:	20000ba4 	.word	0x20000ba4
     4c8:	200025d4 	.word	0x200025d4
     4cc:	200025b4 	.word	0x200025b4
     4d0:	20000a90 	.word	0x20000a90
     4d4:	20000b3c 	.word	0x20000b3c
     4d8:	20000bac 	.word	0x20000bac
     4dc:	200025b8 	.word	0x200025b8
     4e0:	200026a2 	.word	0x200026a2
     4e4:	200026a3 	.word	0x200026a3
     4e8:	20001739 	.word	0x20001739

000004ec <_GLOBAL__sub_I_positionEncoder>:
}
     4ec:	b530      	push	{r4, r5, lr}
QuadEncoder positionEncoder(1, EncoderA_pin, EncoderB_pin, 0, 4); // Teensy Pins 2&3 are coneected to the A and B of the Encoder.
     4ee:	21ff      	movs	r1, #255	; 0xff
}
     4f0:	b085      	sub	sp, #20
QuadEncoder positionEncoder(1, EncoderA_pin, EncoderB_pin, 0, 4); // Teensy Pins 2&3 are coneected to the A and B of the Encoder.
     4f2:	2404      	movs	r4, #4
     4f4:	2000      	movs	r0, #0
     4f6:	2303      	movs	r3, #3
     4f8:	2202      	movs	r2, #2
Cytron_SmartDriveDuo smartDriveDuo30(PWM_INDEPENDENT, IN1, IN2, AN1, AN2);
     4fa:	2506      	movs	r5, #6
QuadEncoder positionEncoder(1, EncoderA_pin, EncoderB_pin, 0, 4); // Teensy Pins 2&3 are coneected to the A and B of the Encoder.
     4fc:	e9cd 0400 	strd	r0, r4, [sp]
     500:	e9cd 1102 	strd	r1, r1, [sp, #8]
     504:	4812      	ldr	r0, [pc, #72]	; (550 <_GLOBAL__sub_I_positionEncoder+0x64>)
     506:	2101      	movs	r1, #1
     508:	f000 fc04 	bl	d14 <QuadEncoder::QuadEncoder(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
Cytron_SmartDriveDuo smartDriveDuo30(PWM_INDEPENDENT, IN1, IN2, AN1, AN2);
     50c:	2005      	movs	r0, #5
     50e:	4622      	mov	r2, r4
String Direction = "unknown";
     510:	4c10      	ldr	r4, [pc, #64]	; (554 <_GLOBAL__sub_I_positionEncoder+0x68>)
Cytron_SmartDriveDuo smartDriveDuo30(PWM_INDEPENDENT, IN1, IN2, AN1, AN2);
     512:	2307      	movs	r3, #7
     514:	2101      	movs	r1, #1
     516:	e9cd 0500 	strd	r0, r5, [sp]
     51a:	480f      	ldr	r0, [pc, #60]	; (558 <_GLOBAL__sub_I_positionEncoder+0x6c>)
     51c:	f000 f82e 	bl	57c <Cytron_SmartDriveDuo::Cytron_SmartDriveDuo(int, int, int, int, int)>
String Direction = "unknown";
     520:	490e      	ldr	r1, [pc, #56]	; (55c <_GLOBAL__sub_I_positionEncoder+0x70>)
     522:	4620      	mov	r0, r4
     524:	f001 fa2e 	bl	1984 <String::String(char const*)>
     528:	4a0d      	ldr	r2, [pc, #52]	; (560 <_GLOBAL__sub_I_positionEncoder+0x74>)
     52a:	490e      	ldr	r1, [pc, #56]	; (564 <_GLOBAL__sub_I_positionEncoder+0x78>)
     52c:	4620      	mov	r0, r4
     52e:	f003 f965 	bl	37fc <__aeabi_atexit>
     532:	4b0d      	ldr	r3, [pc, #52]	; (568 <_GLOBAL__sub_I_positionEncoder+0x7c>)
	elapsedMillis(void) { ms = millis(); }
     534:	4a0d      	ldr	r2, [pc, #52]	; (56c <_GLOBAL__sub_I_positionEncoder+0x80>)
     536:	681d      	ldr	r5, [r3, #0]
     538:	6818      	ldr	r0, [r3, #0]
     53a:	4c0d      	ldr	r4, [pc, #52]	; (570 <_GLOBAL__sub_I_positionEncoder+0x84>)
     53c:	6010      	str	r0, [r2, #0]
     53e:	490d      	ldr	r1, [pc, #52]	; (574 <_GLOBAL__sub_I_positionEncoder+0x88>)
     540:	6818      	ldr	r0, [r3, #0]
     542:	681a      	ldr	r2, [r3, #0]
     544:	4b0c      	ldr	r3, [pc, #48]	; (578 <_GLOBAL__sub_I_positionEncoder+0x8c>)
     546:	6025      	str	r5, [r4, #0]
     548:	6008      	str	r0, [r1, #0]
     54a:	601a      	str	r2, [r3, #0]
}
     54c:	b005      	add	sp, #20
     54e:	bd30      	pop	{r4, r5, pc}
     550:	200025d4 	.word	0x200025d4
     554:	20001ca4 	.word	0x20001ca4
     558:	20002654 	.word	0x20002654
     55c:	20000370 	.word	0x20000370
     560:	20001140 	.word	0x20001140
     564:	0000190d 	.word	0x0000190d
     568:	2000267c 	.word	0x2000267c
     56c:	20002650 	.word	0x20002650
     570:	2000259c 	.word	0x2000259c
     574:	200025f8 	.word	0x200025f8
     578:	20002608 	.word	0x20002608

0000057c <Cytron_SmartDriveDuo::Cytron_SmartDriveDuo(int, int, int, int, int)>:
  pinMode(_rc1Pin, OUTPUT);
  pinMode(_rc2Pin, OUTPUT);
}
*/

Cytron_SmartDriveDuo::Cytron_SmartDriveDuo(int mode, int in1Pin, int in2Pin, int an1Pin, int an2Pin)
     57c:	b538      	push	{r3, r4, r5, lr}
     57e:	4604      	mov	r4, r0
{
  _mode = mode;
     580:	7101      	strb	r1, [r0, #4]
  _an1Pin = an1Pin;
  _an2Pin = an2Pin;
     582:	9d05      	ldr	r5, [sp, #20]
  _in1Pin = in1Pin;
  _in2Pin = in2Pin;
  
  pinMode(_an1Pin, OUTPUT);
     584:	2101      	movs	r1, #1
  _an1Pin = an1Pin;
     586:	f89d 0010 	ldrb.w	r0, [sp, #16]
  _in1Pin = in1Pin;
     58a:	7262      	strb	r2, [r4, #9]
Cytron_SmartDriveDuo::Cytron_SmartDriveDuo(int mode, int in1Pin, int in2Pin, int an1Pin, int an2Pin)
     58c:	2263      	movs	r2, #99	; 0x63
  _in2Pin = in2Pin;
     58e:	72a3      	strb	r3, [r4, #10]
Cytron_SmartDriveDuo::Cytron_SmartDriveDuo(int mode, int in1Pin, int in2Pin, int an1Pin, int an2Pin)
     590:	2385      	movs	r3, #133	; 0x85
     592:	7322      	strb	r2, [r4, #12]
     594:	73a3      	strb	r3, [r4, #14]
  _an1Pin = an1Pin;
     596:	71e0      	strb	r0, [r4, #7]
  _an2Pin = an2Pin;
     598:	7225      	strb	r5, [r4, #8]
  pinMode(_an1Pin, OUTPUT);
     59a:	f001 fc67 	bl	1e6c <pinMode>
  pinMode(_an2Pin, OUTPUT);
     59e:	7a20      	ldrb	r0, [r4, #8]
     5a0:	2101      	movs	r1, #1
     5a2:	f001 fc63 	bl	1e6c <pinMode>
  pinMode(_in1Pin, OUTPUT);
     5a6:	7a60      	ldrb	r0, [r4, #9]
     5a8:	2101      	movs	r1, #1
     5aa:	f001 fc5f 	bl	1e6c <pinMode>
  pinMode(_in2Pin, OUTPUT);
     5ae:	7aa0      	ldrb	r0, [r4, #10]
     5b0:	2101      	movs	r1, #1
     5b2:	f001 fc5b 	bl	1e6c <pinMode>
}
     5b6:	4620      	mov	r0, r4
     5b8:	bd38      	pop	{r3, r4, r5, pc}
     5ba:	bf00      	nop
     5bc:	0000      	movs	r0, r0
	...

000005c0 <Cytron_SmartDriveDuo::control(int, int)>:
    MDDSSerial->write(dummyByte);
  }
}

void Cytron_SmartDriveDuo::control(signed int motorLSpeed, signed int motorRSpeed)
{
     5c0:	b570      	push	{r4, r5, r6, lr}
  switch (_mode) {
     5c2:	7903      	ldrb	r3, [r0, #4]
{
     5c4:	4604      	mov	r4, r0
     5c6:	4615      	mov	r5, r2
  switch (_mode) {
     5c8:	2b04      	cmp	r3, #4
     5ca:	f200 8120 	bhi.w	80e <Cytron_SmartDriveDuo::control(int, int)+0x24e>
     5ce:	e8df f013 	tbh	[pc, r3, lsl #1]
     5d2:	00cb      	.short	0x00cb
     5d4:	011e0097 	.word	0x011e0097
     5d8:	00050064 	.word	0x00050064
	long num = (x - in_min) * out_range;
     5dc:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
	long result = num / in_range + out_min;
     5e0:	48bb      	ldr	r0, [pc, #748]	; (8d0 <Cytron_SmartDriveDuo::control(int, int)+0x310>)
      }
      break;

    case SERIAL_PACKETIZED:
      // Left motor
      addressByte = _boardId;
     5e2:	7b62      	ldrb	r2, [r4, #13]
		num += in_range / 2;
     5e4:	f501 41c8 	add.w	r1, r1, #25600	; 0x6400
      commandByte = map(motorLSpeed, -100, 100, 0, 255);
      checksum = headerByte + addressByte + commandByte;
      if (hardwareSerial == true) {
     5e8:	4eba      	ldr	r6, [pc, #744]	; (8d4 <Cytron_SmartDriveDuo::control(int, int)+0x314>)
      addressByte = _boardId;
     5ea:	73e2      	strb	r2, [r4, #15]
	long result = num / in_range + out_min;
     5ec:	fb80 3001 	smull	r3, r0, r0, r1
     5f0:	17cb      	asrs	r3, r1, #31
		if (in_range * num < 0) return result - 1;
     5f2:	2900      	cmp	r1, #0
      checksum = headerByte + addressByte + commandByte;
     5f4:	7ba1      	ldrb	r1, [r4, #14]
	long result = num / in_range + out_min;
     5f6:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
     5fa:	440a      	add	r2, r1
		if (in_range * num < 0) return result - 1;
     5fc:	bfb8      	it	lt
     5fe:	f103 33ff 	addlt.w	r3, r3, #4294967295
      commandByte = map(motorLSpeed, -100, 100, 0, 255);
     602:	b2db      	uxtb	r3, r3
     604:	7423      	strb	r3, [r4, #16]
      checksum = headerByte + addressByte + commandByte;
     606:	4413      	add	r3, r2
     608:	7463      	strb	r3, [r4, #17]
      if (hardwareSerial == true) {
     60a:	7833      	ldrb	r3, [r6, #0]
     60c:	2b00      	cmp	r3, #0
     60e:	f040 8148 	bne.w	8a2 <Cytron_SmartDriveDuo::control(int, int)+0x2e2>
        Serial.write(addressByte);
        Serial.write(commandByte);
        Serial.write(checksum);
      }
      else {
        MDDSSerial->write(headerByte);
     612:	6820      	ldr	r0, [r4, #0]
     614:	6803      	ldr	r3, [r0, #0]
     616:	681b      	ldr	r3, [r3, #0]
     618:	4798      	blx	r3
        MDDSSerial->write(addressByte);
     61a:	6820      	ldr	r0, [r4, #0]
     61c:	7be1      	ldrb	r1, [r4, #15]
     61e:	6803      	ldr	r3, [r0, #0]
     620:	681b      	ldr	r3, [r3, #0]
     622:	4798      	blx	r3
        MDDSSerial->write(commandByte);
     624:	6820      	ldr	r0, [r4, #0]
     626:	7c21      	ldrb	r1, [r4, #16]
     628:	6803      	ldr	r3, [r0, #0]
     62a:	681b      	ldr	r3, [r3, #0]
     62c:	4798      	blx	r3
        MDDSSerial->write(checksum);
     62e:	6820      	ldr	r0, [r4, #0]
     630:	7c61      	ldrb	r1, [r4, #17]
     632:	6803      	ldr	r3, [r0, #0]
     634:	681b      	ldr	r3, [r3, #0]
     636:	4798      	blx	r3
	long num = (x - in_min) * out_range;
     638:	ebc5 2505 	rsb	r5, r5, r5, lsl #8
	long result = num / in_range + out_min;
     63c:	49a4      	ldr	r1, [pc, #656]	; (8d0 <Cytron_SmartDriveDuo::control(int, int)+0x310>)
      }
      // Right motor
      addressByte = _boardId | 0b00001000;
     63e:	7b62      	ldrb	r2, [r4, #13]
		num += in_range / 2;
     640:	f505 45c8 	add.w	r5, r5, #25600	; 0x6400
      commandByte = map(motorRSpeed, -100, 100, 0, 255);
      checksum = headerByte + addressByte + commandByte;
      if (hardwareSerial == true) {
     644:	7830      	ldrb	r0, [r6, #0]
      addressByte = _boardId | 0b00001000;
     646:	f042 0208 	orr.w	r2, r2, #8
	long result = num / in_range + out_min;
     64a:	fb81 3105 	smull	r3, r1, r1, r5
     64e:	17eb      	asrs	r3, r5, #31
		if (in_range * num < 0) return result - 1;
     650:	2d00      	cmp	r5, #0
     652:	73e2      	strb	r2, [r4, #15]
	long result = num / in_range + out_min;
     654:	ebc3 13a1 	rsb	r3, r3, r1, asr #6
      checksum = headerByte + addressByte + commandByte;
     658:	7ba1      	ldrb	r1, [r4, #14]
		if (in_range * num < 0) return result - 1;
     65a:	bfb8      	it	lt
     65c:	f103 33ff 	addlt.w	r3, r3, #4294967295
     660:	440a      	add	r2, r1
      commandByte = map(motorRSpeed, -100, 100, 0, 255);
     662:	b2db      	uxtb	r3, r3
     664:	7423      	strb	r3, [r4, #16]
      checksum = headerByte + addressByte + commandByte;
     666:	4413      	add	r3, r2
     668:	7463      	strb	r3, [r4, #17]
      if (hardwareSerial == true) {
     66a:	2800      	cmp	r0, #0
     66c:	f040 8189 	bne.w	982 <Cytron_SmartDriveDuo::control(int, int)+0x3c2>
        Serial.write(addressByte);
        Serial.write(commandByte);
        Serial.write(checksum);
      }
      else {
        MDDSSerial->write(headerByte);
     670:	6820      	ldr	r0, [r4, #0]
     672:	6803      	ldr	r3, [r0, #0]
     674:	681b      	ldr	r3, [r3, #0]
     676:	4798      	blx	r3
        MDDSSerial->write(addressByte);
     678:	6820      	ldr	r0, [r4, #0]
     67a:	7be1      	ldrb	r1, [r4, #15]
     67c:	6803      	ldr	r3, [r0, #0]
     67e:	681b      	ldr	r3, [r3, #0]
     680:	4798      	blx	r3
        MDDSSerial->write(commandByte);
     682:	6820      	ldr	r0, [r4, #0]
     684:	7c21      	ldrb	r1, [r4, #16]
     686:	6803      	ldr	r3, [r0, #0]
     688:	681b      	ldr	r3, [r3, #0]
     68a:	4798      	blx	r3
        MDDSSerial->write(checksum);
     68c:	6820      	ldr	r0, [r4, #0]
     68e:	7c61      	ldrb	r1, [r4, #17]
     690:	6803      	ldr	r3, [r0, #0]
      break;

    default:
      break;
  }
}
     692:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MDDSSerial->write(checksum);
     696:	681b      	ldr	r3, [r3, #0]
     698:	4718      	bx	r3
      if (motorLSpeed >= 0) {
     69a:	2900      	cmp	r1, #0
	long num = (x - in_min) * out_range;
     69c:	ebc1 1181 	rsb	r1, r1, r1, lsl #6
     6a0:	f2c0 80cf 	blt.w	842 <Cytron_SmartDriveDuo::control(int, int)+0x282>
	long result = num / in_range + out_min;
     6a4:	4a8a      	ldr	r2, [pc, #552]	; (8d0 <Cytron_SmartDriveDuo::control(int, int)+0x310>)
		num += in_range / 2;
     6a6:	f101 0332 	add.w	r3, r1, #50	; 0x32
     6aa:	2000      	movs	r0, #0
	long result = num / in_range + out_min;
     6ac:	fba2 2303 	umull	r2, r3, r2, r3
     6b0:	095b      	lsrs	r3, r3, #5
      commandByte = commandByte | _motorLSpeed;
     6b2:	ea40 0103 	orr.w	r1, r0, r3
      if (hardwareSerial == true) {
     6b6:	4e87      	ldr	r6, [pc, #540]	; (8d4 <Cytron_SmartDriveDuo::control(int, int)+0x314>)
        _motorLSpeed = map(motorLSpeed, 0, 100, 0, 63);
     6b8:	6163      	str	r3, [r4, #20]
      commandByte = commandByte | _motorLSpeed;
     6ba:	b2c9      	uxtb	r1, r1
      if (hardwareSerial == true) {
     6bc:	7833      	ldrb	r3, [r6, #0]
      commandByte = commandByte | _motorLSpeed;
     6be:	7421      	strb	r1, [r4, #16]
      if (hardwareSerial == true) {
     6c0:	2b00      	cmp	r3, #0
     6c2:	f040 815a 	bne.w	97a <Cytron_SmartDriveDuo::control(int, int)+0x3ba>
        MDDSSerial->write(commandByte);
     6c6:	6820      	ldr	r0, [r4, #0]
     6c8:	6803      	ldr	r3, [r0, #0]
     6ca:	681b      	ldr	r3, [r3, #0]
     6cc:	4798      	blx	r3
      if (motorRSpeed >= 0) {
     6ce:	2d00      	cmp	r5, #0
     6d0:	f2c0 8147 	blt.w	962 <Cytron_SmartDriveDuo::control(int, int)+0x3a2>
	long num = (x - in_min) * out_range;
     6d4:	ebc5 1385 	rsb	r3, r5, r5, lsl #6
	long result = num / in_range + out_min;
     6d8:	4a7d      	ldr	r2, [pc, #500]	; (8d0 <Cytron_SmartDriveDuo::control(int, int)+0x310>)
     6da:	21c0      	movs	r1, #192	; 0xc0
		num += in_range / 2;
     6dc:	3332      	adds	r3, #50	; 0x32
	long result = num / in_range + out_min;
     6de:	fba2 2303 	umull	r2, r3, r2, r3
     6e2:	095b      	lsrs	r3, r3, #5
      commandByte = commandByte | _motorRSpeed;
     6e4:	4319      	orrs	r1, r3
      if (hardwareSerial == true) {
     6e6:	7832      	ldrb	r2, [r6, #0]
        _motorRSpeed = map(motorRSpeed, 0, 100, 0, 63);
     6e8:	61a3      	str	r3, [r4, #24]
      commandByte = commandByte | _motorRSpeed;
     6ea:	b2c9      	uxtb	r1, r1
     6ec:	7421      	strb	r1, [r4, #16]
      if (hardwareSerial == true) {
     6ee:	2a00      	cmp	r2, #0
     6f0:	f040 8155 	bne.w	99e <Cytron_SmartDriveDuo::control(int, int)+0x3de>
        MDDSSerial->write(commandByte);
     6f4:	6820      	ldr	r0, [r4, #0]
     6f6:	6803      	ldr	r3, [r0, #0]
}
     6f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MDDSSerial->write(commandByte);
     6fc:	681b      	ldr	r3, [r3, #0]
     6fe:	4718      	bx	r3
      if (motorLSpeed >= 0) {
     700:	2900      	cmp	r1, #0
     702:	f2c0 8085 	blt.w	810 <Cytron_SmartDriveDuo::control(int, int)+0x250>
        motorLSpeed = motorLSpeed * 2.55;
     706:	2964      	cmp	r1, #100	; 0x64
        analogWrite(_an1Pin, motorLSpeed);
     708:	79c0      	ldrb	r0, [r0, #7]
        motorLSpeed = motorLSpeed * 2.55;
     70a:	bfa8      	it	ge
     70c:	2164      	movge	r1, #100	; 0x64
     70e:	ee07 1a90 	vmov	s15, r1
     712:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8c0 <Cytron_SmartDriveDuo::control(int, int)+0x300>
     716:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     71a:	ee27 7b06 	vmul.f64	d7, d7, d6
        analogWrite(_an1Pin, motorLSpeed);
     71e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     722:	ee17 1a90 	vmov	r1, s15
     726:	f001 fd07 	bl	2138 <analogWrite>
        digitalWrite(_in1Pin, LOW);
     72a:	2100      	movs	r1, #0
     72c:	7a60      	ldrb	r0, [r4, #9]
     72e:	f001 fb61 	bl	1df4 <digitalWrite>
      if (motorRSpeed >= 0) {
     732:	2d00      	cmp	r5, #0
     734:	f2c0 80fb 	blt.w	92e <Cytron_SmartDriveDuo::control(int, int)+0x36e>
        motorRSpeed = motorRSpeed * 2.55;
     738:	2d64      	cmp	r5, #100	; 0x64
        analogWrite(_an2Pin, motorRSpeed);
     73a:	7a20      	ldrb	r0, [r4, #8]
        motorRSpeed = motorRSpeed * 2.55;
     73c:	bfa8      	it	ge
     73e:	2564      	movge	r5, #100	; 0x64
     740:	ee07 5a90 	vmov	s15, r5
     744:	ed9f 6b5e 	vldr	d6, [pc, #376]	; 8c0 <Cytron_SmartDriveDuo::control(int, int)+0x300>
     748:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     74c:	ee27 7b06 	vmul.f64	d7, d7, d6
        analogWrite(_an2Pin, motorRSpeed);
     750:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     754:	ee17 1a90 	vmov	r1, s15
     758:	f001 fcee 	bl	2138 <analogWrite>
        digitalWrite(_in2Pin, HIGH);
     75c:	7aa0      	ldrb	r0, [r4, #10]
     75e:	2101      	movs	r1, #1
}
     760:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        digitalWrite(_in2Pin, HIGH);
     764:	f001 bb46 	b.w	1df4 <digitalWrite>
      if (motorLSpeed >= 0) {
     768:	2900      	cmp	r1, #0
     76a:	db73      	blt.n	854 <Cytron_SmartDriveDuo::control(int, int)+0x294>
	long num = (x - in_min) * out_range;
     76c:	2964      	cmp	r1, #100	; 0x64
     76e:	f44f 7375 	mov.w	r3, #980	; 0x3d4
	long result = num / in_range + out_min;
     772:	4a57      	ldr	r2, [pc, #348]	; (8d0 <Cytron_SmartDriveDuo::control(int, int)+0x310>)
	long num = (x - in_min) * out_range;
     774:	bfa8      	it	ge
     776:	2164      	movge	r1, #100	; 0x64
        digitalWrite(_rc1Pin, HIGH);
     778:	7940      	ldrb	r0, [r0, #5]
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     77a:	4e57      	ldr	r6, [pc, #348]	; (8d8 <Cytron_SmartDriveDuo::control(int, int)+0x318>)
     77c:	fb01 f303 	mul.w	r3, r1, r3
     780:	2101      	movs	r1, #1
		num += in_range / 2;
     782:	3332      	adds	r3, #50	; 0x32
	long result = num / in_range + out_min;
     784:	fba2 2303 	umull	r2, r3, r2, r3
     788:	095b      	lsrs	r3, r3, #5
     78a:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
        rc1Delay = map(motorLSpeed, 0, 100, 1500, 2480);
     78e:	61e3      	str	r3, [r4, #28]
        digitalWrite(_rc1Pin, HIGH);
     790:	f001 fb30 	bl	1df4 <digitalWrite>
	uint32_t begin = ARM_DWT_CYCCNT;
     794:	4951      	ldr	r1, [pc, #324]	; (8dc <Cytron_SmartDriveDuo::control(int, int)+0x31c>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     796:	4b52      	ldr	r3, [pc, #328]	; (8e0 <Cytron_SmartDriveDuo::control(int, int)+0x320>)
	uint32_t begin = ARM_DWT_CYCCNT;
     798:	6848      	ldr	r0, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     79a:	6832      	ldr	r2, [r6, #0]
     79c:	fba3 3202 	umull	r3, r2, r3, r2
     7a0:	69e3      	ldr	r3, [r4, #28]
     7a2:	0c92      	lsrs	r2, r2, #18
     7a4:	fb03 f202 	mul.w	r2, r3, r2
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     7a8:	684b      	ldr	r3, [r1, #4]
     7aa:	1a1b      	subs	r3, r3, r0
     7ac:	4293      	cmp	r3, r2
     7ae:	d3fb      	bcc.n	7a8 <Cytron_SmartDriveDuo::control(int, int)+0x1e8>
        digitalWrite(_rc1Pin, LOW);
     7b0:	2100      	movs	r1, #0
     7b2:	7960      	ldrb	r0, [r4, #5]
     7b4:	f001 fb1e 	bl	1df4 <digitalWrite>
      if (motorRSpeed >= 0) {
     7b8:	2d00      	cmp	r5, #0
     7ba:	f2c0 8093 	blt.w	8e4 <Cytron_SmartDriveDuo::control(int, int)+0x324>
	long num = (x - in_min) * out_range;
     7be:	2d64      	cmp	r5, #100	; 0x64
     7c0:	f44f 7375 	mov.w	r3, #980	; 0x3d4
	long result = num / in_range + out_min;
     7c4:	4a42      	ldr	r2, [pc, #264]	; (8d0 <Cytron_SmartDriveDuo::control(int, int)+0x310>)
        digitalWrite(_rc2Pin, HIGH);
     7c6:	f04f 0101 	mov.w	r1, #1
	long num = (x - in_min) * out_range;
     7ca:	bfa8      	it	ge
     7cc:	2564      	movge	r5, #100	; 0x64
     7ce:	79a0      	ldrb	r0, [r4, #6]
     7d0:	fb05 f303 	mul.w	r3, r5, r3
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     7d4:	4d42      	ldr	r5, [pc, #264]	; (8e0 <Cytron_SmartDriveDuo::control(int, int)+0x320>)
		num += in_range / 2;
     7d6:	3332      	adds	r3, #50	; 0x32
	long result = num / in_range + out_min;
     7d8:	fba2 2303 	umull	r2, r3, r2, r3
     7dc:	095b      	lsrs	r3, r3, #5
     7de:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
        rc2Delay = map(motorRSpeed, 0, 100, 1500, 2480);
     7e2:	6223      	str	r3, [r4, #32]
        digitalWrite(_rc2Pin, HIGH);
     7e4:	f001 fb06 	bl	1df4 <digitalWrite>
	uint32_t begin = ARM_DWT_CYCCNT;
     7e8:	493c      	ldr	r1, [pc, #240]	; (8dc <Cytron_SmartDriveDuo::control(int, int)+0x31c>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     7ea:	6a23      	ldr	r3, [r4, #32]
	uint32_t begin = ARM_DWT_CYCCNT;
     7ec:	6848      	ldr	r0, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     7ee:	6832      	ldr	r2, [r6, #0]
     7f0:	fba5 5202 	umull	r5, r2, r5, r2
     7f4:	0c92      	lsrs	r2, r2, #18
     7f6:	fb03 f202 	mul.w	r2, r3, r2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     7fa:	684b      	ldr	r3, [r1, #4]
     7fc:	1a1b      	subs	r3, r3, r0
     7fe:	429a      	cmp	r2, r3
     800:	d8fb      	bhi.n	7fa <Cytron_SmartDriveDuo::control(int, int)+0x23a>
        digitalWrite(_rc2Pin, LOW);
     802:	79a0      	ldrb	r0, [r4, #6]
     804:	2100      	movs	r1, #0
}
     806:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        digitalWrite(_rc2Pin, LOW);
     80a:	f001 baf3 	b.w	1df4 <digitalWrite>
}
     80e:	bd70      	pop	{r4, r5, r6, pc}
        motorLSpeed = motorLSpeed * -2.55;
     810:	f06f 0363 	mvn.w	r3, #99	; 0x63
        analogWrite(_an1Pin, motorLSpeed);
     814:	79c0      	ldrb	r0, [r0, #7]
        motorLSpeed = motorLSpeed * -2.55;
     816:	4299      	cmp	r1, r3
     818:	bfb8      	it	lt
     81a:	4619      	movlt	r1, r3
     81c:	ee07 1a90 	vmov	s15, r1
     820:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8c8 <Cytron_SmartDriveDuo::control(int, int)+0x308>
     824:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     828:	ee27 7b06 	vmul.f64	d7, d7, d6
        analogWrite(_an1Pin, motorLSpeed);
     82c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     830:	ee17 1a90 	vmov	r1, s15
     834:	f001 fc80 	bl	2138 <analogWrite>
        digitalWrite(_in1Pin, HIGH);
     838:	2101      	movs	r1, #1
     83a:	7a60      	ldrb	r0, [r4, #9]
     83c:	f001 fada 	bl	1df4 <digitalWrite>
     840:	e777      	b.n	732 <Cytron_SmartDriveDuo::control(int, int)+0x172>
		num += in_range / 2;
     842:	3932      	subs	r1, #50	; 0x32
	long result = num / in_range + out_min;
     844:	4b22      	ldr	r3, [pc, #136]	; (8d0 <Cytron_SmartDriveDuo::control(int, int)+0x310>)
     846:	2040      	movs	r0, #64	; 0x40
     848:	fb83 2301 	smull	r2, r3, r3, r1
     84c:	17c9      	asrs	r1, r1, #31
     84e:	eba1 1363 	sub.w	r3, r1, r3, asr #5
     852:	e72e      	b.n	6b2 <Cytron_SmartDriveDuo::control(int, int)+0xf2>
	long num = (x - in_min) * out_range;
     854:	f06f 0363 	mvn.w	r3, #99	; 0x63
     858:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     85c:	4e1e      	ldr	r6, [pc, #120]	; (8d8 <Cytron_SmartDriveDuo::control(int, int)+0x318>)
     85e:	4299      	cmp	r1, r3
     860:	bfb8      	it	lt
     862:	4619      	movlt	r1, r3
     864:	f101 0364 	add.w	r3, r1, #100	; 0x64
        digitalWrite(_rc1Pin, HIGH);
     868:	2101      	movs	r1, #1
     86a:	fb02 f303 	mul.w	r3, r2, r3
	long result = num / in_range + out_min;
     86e:	4a18      	ldr	r2, [pc, #96]	; (8d0 <Cytron_SmartDriveDuo::control(int, int)+0x310>)
		num += in_range / 2;
     870:	3332      	adds	r3, #50	; 0x32
	long result = num / in_range + out_min;
     872:	fba2 2303 	umull	r2, r3, r2, r3
     876:	095b      	lsrs	r3, r3, #5
     878:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
        rc1Delay = map(motorLSpeed, -100, 0, 500, 1500);
     87c:	61c3      	str	r3, [r0, #28]
        digitalWrite(_rc1Pin, HIGH);
     87e:	7940      	ldrb	r0, [r0, #5]
     880:	f001 fab8 	bl	1df4 <digitalWrite>
	uint32_t begin = ARM_DWT_CYCCNT;
     884:	4915      	ldr	r1, [pc, #84]	; (8dc <Cytron_SmartDriveDuo::control(int, int)+0x31c>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     886:	4b16      	ldr	r3, [pc, #88]	; (8e0 <Cytron_SmartDriveDuo::control(int, int)+0x320>)
	uint32_t begin = ARM_DWT_CYCCNT;
     888:	6848      	ldr	r0, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     88a:	6832      	ldr	r2, [r6, #0]
     88c:	fba3 3202 	umull	r3, r2, r3, r2
     890:	69e3      	ldr	r3, [r4, #28]
     892:	0c92      	lsrs	r2, r2, #18
     894:	fb03 f202 	mul.w	r2, r3, r2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     898:	684b      	ldr	r3, [r1, #4]
     89a:	1a1b      	subs	r3, r3, r0
     89c:	429a      	cmp	r2, r3
     89e:	d8fb      	bhi.n	898 <Cytron_SmartDriveDuo::control(int, int)+0x2d8>
     8a0:	e786      	b.n	7b0 <Cytron_SmartDriveDuo::control(int, int)+0x1f0>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     8a2:	4608      	mov	r0, r1
     8a4:	f002 fe56 	bl	3554 <usb_serial_putchar>
     8a8:	7be0      	ldrb	r0, [r4, #15]
     8aa:	f002 fe53 	bl	3554 <usb_serial_putchar>
     8ae:	7c20      	ldrb	r0, [r4, #16]
     8b0:	f002 fe50 	bl	3554 <usb_serial_putchar>
     8b4:	7c60      	ldrb	r0, [r4, #17]
     8b6:	f002 fe4d 	bl	3554 <usb_serial_putchar>
     8ba:	e6bd      	b.n	638 <Cytron_SmartDriveDuo::control(int, int)+0x78>
     8bc:	f3af 8000 	nop.w
     8c0:	66666666 	.word	0x66666666
     8c4:	40046666 	.word	0x40046666
     8c8:	66666666 	.word	0x66666666
     8cc:	c0046666 	.word	0xc0046666
     8d0:	51eb851f 	.word	0x51eb851f
     8d4:	200026ae 	.word	0x200026ae
     8d8:	20000ecc 	.word	0x20000ecc
     8dc:	e0001000 	.word	0xe0001000
     8e0:	431bde83 	.word	0x431bde83
	long num = (x - in_min) * out_range;
     8e4:	f06f 0363 	mvn.w	r3, #99	; 0x63
     8e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
        digitalWrite(_rc2Pin, HIGH);
     8ec:	2101      	movs	r1, #1
     8ee:	79a0      	ldrb	r0, [r4, #6]
     8f0:	42ab      	cmp	r3, r5
     8f2:	bfb8      	it	lt
     8f4:	462b      	movlt	r3, r5
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     8f6:	4d2e      	ldr	r5, [pc, #184]	; (9b0 <Cytron_SmartDriveDuo::control(int, int)+0x3f0>)
     8f8:	3364      	adds	r3, #100	; 0x64
     8fa:	fb02 f303 	mul.w	r3, r2, r3
	long result = num / in_range + out_min;
     8fe:	4a2d      	ldr	r2, [pc, #180]	; (9b4 <Cytron_SmartDriveDuo::control(int, int)+0x3f4>)
		num += in_range / 2;
     900:	3332      	adds	r3, #50	; 0x32
	long result = num / in_range + out_min;
     902:	fba2 2303 	umull	r2, r3, r2, r3
     906:	095b      	lsrs	r3, r3, #5
     908:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
        rc2Delay = map(motorRSpeed, -100, 0, 500, 1500);
     90c:	6223      	str	r3, [r4, #32]
        digitalWrite(_rc2Pin, HIGH);
     90e:	f001 fa71 	bl	1df4 <digitalWrite>
	uint32_t begin = ARM_DWT_CYCCNT;
     912:	4929      	ldr	r1, [pc, #164]	; (9b8 <Cytron_SmartDriveDuo::control(int, int)+0x3f8>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     914:	6a23      	ldr	r3, [r4, #32]
	uint32_t begin = ARM_DWT_CYCCNT;
     916:	6848      	ldr	r0, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     918:	6832      	ldr	r2, [r6, #0]
     91a:	fba5 5202 	umull	r5, r2, r5, r2
     91e:	0c92      	lsrs	r2, r2, #18
     920:	fb03 f202 	mul.w	r2, r3, r2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     924:	684b      	ldr	r3, [r1, #4]
     926:	1a1b      	subs	r3, r3, r0
     928:	429a      	cmp	r2, r3
     92a:	d8fb      	bhi.n	924 <Cytron_SmartDriveDuo::control(int, int)+0x364>
     92c:	e769      	b.n	802 <Cytron_SmartDriveDuo::control(int, int)+0x242>
        motorRSpeed = motorRSpeed * -2.55;
     92e:	f06f 0363 	mvn.w	r3, #99	; 0x63
        analogWrite(_an2Pin, motorRSpeed);
     932:	7a20      	ldrb	r0, [r4, #8]
        motorRSpeed = motorRSpeed * -2.55;
     934:	42ab      	cmp	r3, r5
     936:	bfb8      	it	lt
     938:	462b      	movlt	r3, r5
     93a:	ee07 3a90 	vmov	s15, r3
     93e:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 9a8 <Cytron_SmartDriveDuo::control(int, int)+0x3e8>
     942:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     946:	ee27 7b06 	vmul.f64	d7, d7, d6
        analogWrite(_an2Pin, motorRSpeed);
     94a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     94e:	ee17 1a90 	vmov	r1, s15
     952:	f001 fbf1 	bl	2138 <analogWrite>
        digitalWrite(_in2Pin, LOW);
     956:	7aa0      	ldrb	r0, [r4, #10]
     958:	2100      	movs	r1, #0
}
     95a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        digitalWrite(_in2Pin, LOW);
     95e:	f001 ba49 	b.w	1df4 <digitalWrite>
	long num = (x - in_min) * out_range;
     962:	ebc5 1585 	rsb	r5, r5, r5, lsl #6
	long result = num / in_range + out_min;
     966:	4a13      	ldr	r2, [pc, #76]	; (9b4 <Cytron_SmartDriveDuo::control(int, int)+0x3f4>)
		num += in_range / 2;
     968:	f1a5 0332 	sub.w	r3, r5, #50	; 0x32
	long result = num / in_range + out_min;
     96c:	fb82 1203 	smull	r1, r2, r2, r3
     970:	17db      	asrs	r3, r3, #31
     972:	2180      	movs	r1, #128	; 0x80
     974:	eba3 1362 	sub.w	r3, r3, r2, asr #5
     978:	e6b4      	b.n	6e4 <Cytron_SmartDriveDuo::control(int, int)+0x124>
     97a:	4608      	mov	r0, r1
     97c:	f002 fdea 	bl	3554 <usb_serial_putchar>
     980:	e6a5      	b.n	6ce <Cytron_SmartDriveDuo::control(int, int)+0x10e>
     982:	4608      	mov	r0, r1
     984:	f002 fde6 	bl	3554 <usb_serial_putchar>
     988:	7be0      	ldrb	r0, [r4, #15]
     98a:	f002 fde3 	bl	3554 <usb_serial_putchar>
     98e:	7c20      	ldrb	r0, [r4, #16]
     990:	f002 fde0 	bl	3554 <usb_serial_putchar>
     994:	7c60      	ldrb	r0, [r4, #17]
}
     996:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     99a:	f002 bddb 	b.w	3554 <usb_serial_putchar>
     99e:	4608      	mov	r0, r1
     9a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     9a4:	f002 bdd6 	b.w	3554 <usb_serial_putchar>
     9a8:	66666666 	.word	0x66666666
     9ac:	c0046666 	.word	0xc0046666
     9b0:	431bde83 	.word	0x431bde83
     9b4:	51eb851f 	.word	0x51eb851f
     9b8:	e0001000 	.word	0xe0001000

000009bc <QuadEncoder::setInitConfig()>:
void QuadEncoder::setInitConfig() {
     9bc:	b510      	push	{r4, lr}
    memset(config, 0, sizeof(*config));
     9be:	2220      	movs	r2, #32
     9c0:	2100      	movs	r1, #0
void QuadEncoder::setInitConfig() {
     9c2:	4604      	mov	r4, r0
    memset(config, 0, sizeof(*config));
     9c4:	f003 fdf6 	bl	45b4 <memset>
    config->positionCompareValue = 0xffffffff;
     9c8:	f04f 33ff 	mov.w	r3, #4294967295
     9cc:	60e3      	str	r3, [r4, #12]
}
     9ce:	bd10      	pop	{r4, pc}

000009d0 <QuadEncoder::Init(QuadEncoder::enc_config_t const*)>:
void QuadEncoder::Init(const enc_config_t *config)
{
    uint32_t tmp16;

	// make sure the appropriate clock gate is enabled.
	*channel[_encoder_ch].clock_gate_register |= channel[_encoder_ch].clock_gate_mask;
     9d0:	8c02      	ldrh	r2, [r0, #32]
     9d2:	f8b0 c020 	ldrh.w	ip, [r0, #32]
     9d6:	4b5f      	ldr	r3, [pc, #380]	; (b54 <QuadEncoder::Init(QuadEncoder::enc_config_t const*)+0x184>)
     9d8:	b292      	uxth	r2, r2
     9da:	fa1f fc8c 	uxth.w	ip, ip
     9de:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
     9e2:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
     9e6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     9ea:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
{
     9ee:	b470      	push	{r4, r5, r6}
	*channel[_encoder_ch].clock_gate_register |= channel[_encoder_ch].clock_gate_mask;
     9f0:	f8dc 501c 	ldr.w	r5, [ip, #28]
     9f4:	6a16      	ldr	r6, [r2, #32]
     9f6:	f644 0289 	movw	r2, #18569	; 0x4889
     9fa:	682c      	ldr	r4, [r5, #0]
     9fc:	4334      	orrs	r4, r6
     9fe:	602c      	str	r4, [r5, #0]

    /* ENC_CTRL. */
    tmp16 = channel[_encoder_ch].ENC->CTRL & (uint16_t)(~(ENC_CTRL_W1C_FLAGS | ENC_CTRL_HIP_MASK | ENC_CTRL_HNE_MASK | ENC_CTRL_REV_MASK | ENC_CTRL_PH1_MASK | ENC_CTRL_XIP_MASK | ENC_CTRL_XNE_MASK | ENC_CTRL_WDE_MASK));
     a00:	f8b0 c020 	ldrh.w	ip, [r0, #32]
     a04:	fa1f fc8c 	uxth.w	ip, ip
     a08:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
     a0c:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
     a10:	f8dc 4004 	ldr.w	r4, [ip, #4]
     a14:	8824      	ldrh	r4, [r4, #0]
     a16:	4022      	ands	r2, r4
	
    /* For HOME trigger. */
    if (config->HOMETriggerMode != 0)
     a18:	788c      	ldrb	r4, [r1, #2]
     a1a:	b12c      	cbz	r4, a28 <QuadEncoder::Init(QuadEncoder::enc_config_t const*)+0x58>
    {
        tmp16 |= ENC_CTRL_HIP_MASK;
        if (FALLING_EDGE == config->HOMETriggerMode)
     a1c:	2c02      	cmp	r4, #2
        tmp16 |= ENC_CTRL_HIP_MASK;
     a1e:	bf14      	ite	ne
     a20:	f442 5200 	orrne.w	r2, r2, #8192	; 0x2000
        {
            tmp16 |= ENC_CTRL_HNE_MASK;
     a24:	f442 5240 	orreq.w	r2, r2, #12288	; 0x3000
        }
    }
	
    /* For encoder work mode. */
    if (config->enableReverseDirection)
     a28:	780c      	ldrb	r4, [r1, #0]
     a2a:	b10c      	cbz	r4, a30 <QuadEncoder::Init(QuadEncoder::enc_config_t const*)+0x60>
    {
        tmp16 |= ENC_CTRL_REV_MASK;
     a2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    }
    if (true == config->decoderWorkMode)
     a30:	784c      	ldrb	r4, [r1, #1]
     a32:	b10c      	cbz	r4, a38 <QuadEncoder::Init(QuadEncoder::enc_config_t const*)+0x68>
    {
        tmp16 |= ENC_CTRL_PH1_MASK;
     a34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    }
    /* For INDEX trigger. */
    if (config->INDEXTriggerMode !=  0 )
     a38:	78cc      	ldrb	r4, [r1, #3]
     a3a:	b12c      	cbz	r4, a48 <QuadEncoder::Init(QuadEncoder::enc_config_t const*)+0x78>
    {
        tmp16 |= ENC_CTRL_XIP_MASK;
        if (FALLING_EDGE == config->INDEXTriggerMode)
     a3c:	2c02      	cmp	r4, #2
        tmp16 |= ENC_CTRL_XIP_MASK;
     a3e:	bf14      	ite	ne
     a40:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
        {
            tmp16 |= ENC_CTRL_XNE_MASK;
     a44:	f042 0260 	orreq.w	r2, r2, #96	; 0x60
        }
    }

    channel[_encoder_ch].ENC->CTRL = tmp16;
     a48:	f8b0 c020 	ldrh.w	ip, [r0, #32]
     a4c:	b292      	uxth	r2, r2
     a4e:	fa1f fc8c 	uxth.w	ip, ip
     a52:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
     a56:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
     a5a:	f8dc 4004 	ldr.w	r4, [ip, #4]
	
    /* ENC_FILT. */
    channel[_encoder_ch].ENC->FILT = ENC_FILT_FILT_CNT(config->filterCount) | ENC_FILT_FILT_PER(config->filterSamplePeriod);
     a5e:	f8b1 c006 	ldrh.w	ip, [r1, #6]
    channel[_encoder_ch].ENC->CTRL = tmp16;
     a62:	8022      	strh	r2, [r4, #0]
    channel[_encoder_ch].ENC->FILT = ENC_FILT_FILT_CNT(config->filterCount) | ENC_FILT_FILT_PER(config->filterSamplePeriod);
     a64:	8c02      	ldrh	r2, [r0, #32]
     a66:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
     a6a:	b292      	uxth	r2, r2
     a6c:	f40c 6ce0 	and.w	ip, ip, #1792	; 0x700
     a70:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
     a74:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     a78:	6854      	ldr	r4, [r2, #4]
     a7a:	7a0a      	ldrb	r2, [r1, #8]
     a7c:	ea4c 0202 	orr.w	r2, ip, r2
     a80:	8062      	strh	r2, [r4, #2]

    /* ENC_CTRL2. */
    tmp16 = channel[_encoder_ch].ENC->CTRL2 & (uint16_t)(~(ENC_CTRL2_W1C_FLAGS | ENC_CTRL2_OUTCTL_MASK | ENC_CTRL2_REVMOD_MASK | ENC_CTRL2_MOD_MASK | ENC_CTRL2_UPDPOS_MASK | ENC_CTRL2_UPDHLD_MASK | ENC_CTRL2_ROIRQ_MASK | ENC_CTRL2_RUIRQ_MASK));
     a82:	8c02      	ldrh	r2, [r0, #32]
	
    if (1 == config->positionMatchMode)
     a84:	7a8c      	ldrb	r4, [r1, #10]
    tmp16 = channel[_encoder_ch].ENC->CTRL2 & (uint16_t)(~(ENC_CTRL2_W1C_FLAGS | ENC_CTRL2_OUTCTL_MASK | ENC_CTRL2_REVMOD_MASK | ENC_CTRL2_MOD_MASK | ENC_CTRL2_UPDPOS_MASK | ENC_CTRL2_UPDHLD_MASK | ENC_CTRL2_ROIRQ_MASK | ENC_CTRL2_RUIRQ_MASK));
     a86:	b292      	uxth	r2, r2
     a88:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
     a8c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     a90:	6852      	ldr	r2, [r2, #4]
     a92:	8bd2      	ldrh	r2, [r2, #30]
     a94:	f422 623a 	bic.w	r2, r2, #2976	; 0xba0
     a98:	f022 0207 	bic.w	r2, r2, #7
     a9c:	0412      	lsls	r2, r2, #16
     a9e:	0c12      	lsrs	r2, r2, #16
    if (1 == config->positionMatchMode)
     aa0:	b10c      	cbz	r4, aa6 <QuadEncoder::Init(QuadEncoder::enc_config_t const*)+0xd6>
    {
        tmp16 |= ENC_CTRL2_OUTCTL_MASK;
     aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    }
    if (1 == config->revolutionCountCondition)
     aa6:	7c0c      	ldrb	r4, [r1, #16]
     aa8:	b10c      	cbz	r4, aae <QuadEncoder::Init(QuadEncoder::enc_config_t const*)+0xde>
    {
        tmp16 |= ENC_CTRL2_REVMOD_MASK;
     aaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    }
    if (config->enableModuloCountMode)
     aae:	7c4c      	ldrb	r4, [r1, #17]
     ab0:	b1a4      	cbz	r4, adc <QuadEncoder::Init(QuadEncoder::enc_config_t const*)+0x10c>
    {
        tmp16 |= ENC_CTRL2_MOD_MASK;
        /* Set modulus value. */
        channel[_encoder_ch].ENC->UMOD = (uint16_t)(config->positionModulusValue >> 16U); /* Upper 16 bits. */
     ab2:	8c04      	ldrh	r4, [r0, #32]
        tmp16 |= ENC_CTRL2_MOD_MASK;
     ab4:	f042 0204 	orr.w	r2, r2, #4
        channel[_encoder_ch].ENC->UMOD = (uint16_t)(config->positionModulusValue >> 16U); /* Upper 16 bits. */
     ab8:	694d      	ldr	r5, [r1, #20]
     aba:	b2a4      	uxth	r4, r4
     abc:	0c2e      	lsrs	r6, r5, #16
     abe:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
        channel[_encoder_ch].ENC->LMOD = (uint16_t)(config->positionModulusValue);        /* Lower 16 bits. */
     ac2:	b2ad      	uxth	r5, r5
        channel[_encoder_ch].ENC->UMOD = (uint16_t)(config->positionModulusValue >> 16U); /* Upper 16 bits. */
     ac4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
     ac8:	6864      	ldr	r4, [r4, #4]
     aca:	8426      	strh	r6, [r4, #32]
        channel[_encoder_ch].ENC->LMOD = (uint16_t)(config->positionModulusValue);        /* Lower 16 bits. */
     acc:	8c04      	ldrh	r4, [r0, #32]
     ace:	b2a4      	uxth	r4, r4
     ad0:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
     ad4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
     ad8:	6864      	ldr	r4, [r4, #4]
     ada:	8465      	strh	r5, [r4, #34]	; 0x22
    }
    if (config->clearCounter)
     adc:	790c      	ldrb	r4, [r1, #4]
     ade:	b10c      	cbz	r4, ae4 <QuadEncoder::Init(QuadEncoder::enc_config_t const*)+0x114>
    {
        tmp16 |= ENC_CTRL2_UPDPOS_MASK;
     ae0:	f042 0202 	orr.w	r2, r2, #2
    }
    if (config->clearHoldCounter)
     ae4:	794c      	ldrb	r4, [r1, #5]
     ae6:	b10c      	cbz	r4, aec <QuadEncoder::Init(QuadEncoder::enc_config_t const*)+0x11c>
    {
        tmp16 |= ENC_CTRL2_UPDHLD_MASK;
     ae8:	f042 0201 	orr.w	r2, r2, #1
    }
    channel[_encoder_ch].ENC->CTRL2 = tmp16;
     aec:	f8b0 c020 	ldrh.w	ip, [r0, #32]
     af0:	b292      	uxth	r2, r2
     af2:	fa1f fc8c 	uxth.w	ip, ip
     af6:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
     afa:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
     afe:	f8dc 4004 	ldr.w	r4, [ip, #4]
     b02:	83e2      	strh	r2, [r4, #30]

    /* ENC_UCOMP & ENC_LCOMP. */
    channel[_encoder_ch].ENC->UCOMP = (uint16_t)(config->positionCompareValue >> 16U); /* Upper 16 bits. */
     b04:	8c02      	ldrh	r2, [r0, #32]
     b06:	68cc      	ldr	r4, [r1, #12]
     b08:	b292      	uxth	r2, r2
    channel[_encoder_ch].ENC->LCOMP = (uint16_t)(config->positionCompareValue);        /* Lower 16 bits. */

    /* ENC_UINIT & ENC_LINIT. */
    channel[_encoder_ch].ENC->UINIT = (uint16_t)(config->positionInitialValue >> 16U); /* Upper 16 bits. */
     b0a:	6989      	ldr	r1, [r1, #24]
    channel[_encoder_ch].ENC->UCOMP = (uint16_t)(config->positionCompareValue >> 16U); /* Upper 16 bits. */
     b0c:	0c25      	lsrs	r5, r4, #16
     b0e:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
    channel[_encoder_ch].ENC->LCOMP = (uint16_t)(config->positionCompareValue);        /* Lower 16 bits. */
     b12:	b2a4      	uxth	r4, r4
    channel[_encoder_ch].ENC->UCOMP = (uint16_t)(config->positionCompareValue >> 16U); /* Upper 16 bits. */
     b14:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     b18:	6852      	ldr	r2, [r2, #4]
     b1a:	8495      	strh	r5, [r2, #36]	; 0x24
    channel[_encoder_ch].ENC->LCOMP = (uint16_t)(config->positionCompareValue);        /* Lower 16 bits. */
     b1c:	8c02      	ldrh	r2, [r0, #32]
     b1e:	b292      	uxth	r2, r2
     b20:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
     b24:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     b28:	6852      	ldr	r2, [r2, #4]
     b2a:	84d4      	strh	r4, [r2, #38]	; 0x26
    channel[_encoder_ch].ENC->UINIT = (uint16_t)(config->positionInitialValue >> 16U); /* Upper 16 bits. */
     b2c:	0c0c      	lsrs	r4, r1, #16
     b2e:	8c02      	ldrh	r2, [r0, #32]
    channel[_encoder_ch].ENC->LINIT = (uint16_t)(config->positionInitialValue);        /* Lower 16 bits. */
     b30:	b289      	uxth	r1, r1
    channel[_encoder_ch].ENC->UINIT = (uint16_t)(config->positionInitialValue >> 16U); /* Upper 16 bits. */
     b32:	b292      	uxth	r2, r2
     b34:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
     b38:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     b3c:	6852      	ldr	r2, [r2, #4]
     b3e:	82d4      	strh	r4, [r2, #22]
    channel[_encoder_ch].ENC->LINIT = (uint16_t)(config->positionInitialValue);        /* Lower 16 bits. */
     b40:	8c02      	ldrh	r2, [r0, #32]
     b42:	b292      	uxth	r2, r2
     b44:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
     b48:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     b4c:	685b      	ldr	r3, [r3, #4]
	
}
     b4e:	bc70      	pop	{r4, r5, r6}
    channel[_encoder_ch].ENC->LINIT = (uint16_t)(config->positionInitialValue);        /* Lower 16 bits. */
     b50:	8319      	strh	r1, [r3, #24]
}
     b52:	4770      	bx	lr
     b54:	200003dc 	.word	0x200003dc

00000b58 <QuadEncoder::read()>:

int32_t QuadEncoder::read()
{
    uint32_t ret32;

    ret32 = channel[_encoder_ch].ENC->UPOS; /* Get upper 16 bits and make a snapshot. */
     b58:	8c03      	ldrh	r3, [r0, #32]
     b5a:	4a0a      	ldr	r2, [pc, #40]	; (b84 <QuadEncoder::read()+0x2c>)
     b5c:	b29b      	uxth	r3, r3
     b5e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
     b62:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     b66:	685b      	ldr	r3, [r3, #4]
     b68:	89d9      	ldrh	r1, [r3, #14]
    ret32 <<= 16U;
    ret32 |= channel[_encoder_ch].ENC->LPOSH; /* Get lower 16 bits from hold register. */
     b6a:	8c03      	ldrh	r3, [r0, #32]
     b6c:	b29b      	uxth	r3, r3
     b6e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
     b72:	eb02 0283 	add.w	r2, r2, r3, lsl #2
     b76:	6853      	ldr	r3, [r2, #4]
     b78:	8a9b      	ldrh	r3, [r3, #20]
     b7a:	b29b      	uxth	r3, r3

    return (int32_t) ret32;
}
     b7c:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
     b80:	4770      	bx	lr
     b82:	bf00      	nop
     b84:	200003dc 	.word	0x200003dc

00000b88 <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)>:
uint16_t QuadEncoder::getHoldRevolution()
{
    return channel[_encoder_ch].ENC->REVH;
}

void QuadEncoder::enc_xbara_mapping(uint8_t pin, uint8_t PHASE, uint8_t PUS){ 
     b88:	b570      	push	{r4, r5, r6, lr}
     b8a:	4d5d      	ldr	r5, [pc, #372]	; (d00 <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)+0x178>)
     b8c:	2400      	movs	r4, #0
     b8e:	46ae      	mov	lr, r5

  const struct digital_pin_bitband_and_config_table_struct *p;

  for (int idx_channel = 0; idx_channel < _hardware_count; idx_channel++) {
     b90:	46a4      	mov	ip, r4
     b92:	e001      	b.n	b98 <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)+0x10>
	if (hardware[idx_channel].pin == pin) {
     b94:	f89e 4001 	ldrb.w	r4, [lr, #1]
     b98:	42a1      	cmp	r1, r4
  for (int idx_channel = 0; idx_channel < _hardware_count; idx_channel++) {
     b9a:	f10e 0e10 	add.w	lr, lr, #16
	if (hardware[idx_channel].pin == pin) {
     b9e:	d050      	beq.n	c42 <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)+0xba>
  for (int idx_channel = 0; idx_channel < _hardware_count; idx_channel++) {
     ba0:	f10c 0c01 	add.w	ip, ip, #1
     ba4:	f1bc 0f0b 	cmp.w	ip, #11
     ba8:	d1f4      	bne.n	b94 <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)+0xc>
  Serial.printf("xbara_mapping: hw_count-> %d\n",_hardware_count); 
  Serial.printf("xbara_mapping: hardware[_pin_idx].pin-> %d, .select_val-> %d\n", hardware[_pin_idx].pin, hardware[_pin_idx].select_val);
  Serial.printf("xbara_mapping: Encoder-> %d\n", _encoder_ch);
#endif

  if (_pin_idx == _hardware_count) return;
     baa:	8c41      	ldrh	r1, [r0, #34]	; 0x22
     bac:	b289      	uxth	r1, r1
     bae:	290b      	cmp	r1, #11
     bb0:	d041      	beq.n	c36 <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)+0xae>
    
  p = digital_pin_to_info_PGM + hardware[_pin_idx].pin;
     bb2:	8c41      	ldrh	r1, [r0, #34]	; 0x22
     bb4:	b289      	uxth	r1, r1
     bb6:	eb05 1101 	add.w	r1, r5, r1, lsl #4
     bba:	784c      	ldrb	r4, [r1, #1]
  //mux is ctrl config for pin
  //pad is pad config
  //pinmode = *(p->reg + 1);
  
  //Pin ctrl configuration for encoder/xbara1
    *(p->mux) = hardware[_pin_idx].select_val;
     bbc:	8c41      	ldrh	r1, [r0, #34]	; 0x22
     bbe:	b289      	uxth	r1, r1
     bc0:	eb05 1101 	add.w	r1, r5, r1, lsl #4
     bc4:	688e      	ldr	r6, [r1, #8]
  p = digital_pin_to_info_PGM + hardware[_pin_idx].pin;
     bc6:	494f      	ldr	r1, [pc, #316]	; (d04 <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)+0x17c>)
     bc8:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    *(p->mux) = hardware[_pin_idx].select_val;
     bcc:	684c      	ldr	r4, [r1, #4]
     bce:	6026      	str	r6, [r4, #0]
  
  //Pad configuration for encoder/xbara1
  if(PUS == 0){
     bd0:	2b00      	cmp	r3, #0
     bd2:	d031      	beq.n	c38 <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)+0xb0>
    *(p->pad) = 0x10B0;
  } else {
    *(p->pad) = 0x1f038;
     bd4:	688b      	ldr	r3, [r1, #8]
     bd6:	494c      	ldr	r1, [pc, #304]	; (d08 <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)+0x180>)
     bd8:	6019      	str	r1, [r3, #0]
  }
  
  //x = xio_pin_to_info_PGM + pin;
  //*(x->reg) = xbara1_mux[pin];
  *hardware[_pin_idx].reg = hardware[_pin_idx].xbarMUX;
     bda:	8c41      	ldrh	r1, [r0, #34]	; 0x22
  if(PHASE == 3)Serial.printf("xbarIO-> %d, INDEX-> %d\n",hardware[_pin_idx].xbarIO, channel[_encoder_ch].index);
  if(PHASE == 4)Serial.printf("xbarIO-> %d, HOME-> %d\n",hardware[_pin_idx].xbarIO, channel[_encoder_ch].home);
#endif

  //XBARA1 Connection to encoder
  if(PHASE == 1) xbar_connect(hardware[_pin_idx].xbarIO, channel[_encoder_ch].phaseA);
     bdc:	2a01      	cmp	r2, #1
  *hardware[_pin_idx].reg = hardware[_pin_idx].xbarMUX;
     bde:	8c43      	ldrh	r3, [r0, #34]	; 0x22
     be0:	b289      	uxth	r1, r1
     be2:	b29b      	uxth	r3, r3
     be4:	eb05 1101 	add.w	r1, r5, r1, lsl #4
     be8:	eb05 1303 	add.w	r3, r5, r3, lsl #4
     bec:	7b89      	ldrb	r1, [r1, #14]
     bee:	685b      	ldr	r3, [r3, #4]
     bf0:	6019      	str	r1, [r3, #0]
  if(PHASE == 1) xbar_connect(hardware[_pin_idx].xbarIO, channel[_encoder_ch].phaseA);
     bf2:	d06d      	beq.n	cd0 <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)+0x148>
  if(PHASE == 2) xbar_connect(hardware[_pin_idx].xbarIO, channel[_encoder_ch].phaseB);
     bf4:	2a02      	cmp	r2, #2
     bf6:	d05b      	beq.n	cb0 <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)+0x128>
  if(PHASE == 3) xbar_connect(hardware[_pin_idx].xbarIO, channel[_encoder_ch].index);
     bf8:	2a03      	cmp	r2, #3
     bfa:	d127      	bne.n	c4c <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)+0xc4>
     bfc:	8c42      	ldrh	r2, [r0, #34]	; 0x22
     bfe:	8c03      	ldrh	r3, [r0, #32]
     c00:	4942      	ldr	r1, [pc, #264]	; (d0c <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)+0x184>)
     c02:	b292      	uxth	r2, r2
     c04:	b29b      	uxth	r3, r3
     c06:	eb05 1202 	add.w	r2, r5, r2, lsl #4
     c0a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
     c0e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
     c12:	8991      	ldrh	r1, [r2, #12]
     c14:	8a9a      	ldrh	r2, [r3, #20]
}

void QuadEncoder::xbar_connect(unsigned int input, unsigned int output)
{
  if (input >= 88) return;
  if (output >= 132) return;
     c16:	2a83      	cmp	r2, #131	; 0x83
     c18:	d80d      	bhi.n	c36 <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)+0xae>
     c1a:	2957      	cmp	r1, #87	; 0x57
     c1c:	d80b      	bhi.n	c36 <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)+0xae>
#if 1
  volatile uint16_t *xbar = &XBARA1_SEL0 + (output / 2);
     c1e:	f022 0401 	bic.w	r4, r2, #1
     c22:	483b      	ldr	r0, [pc, #236]	; (d10 <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)+0x188>)
  uint16_t val = *xbar;
  if (!(output & 1)) {
     c24:	07d5      	lsls	r5, r2, #31
  uint16_t val = *xbar;
     c26:	5a23      	ldrh	r3, [r4, r0]
     c28:	b29b      	uxth	r3, r3
  if (!(output & 1)) {
     c2a:	d565      	bpl.n	cf8 <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)+0x170>
    val = (val & 0xFF00) | input;
  } else {
    val = (val & 0x00FF) | (input << 8);
     c2c:	b2db      	uxtb	r3, r3
     c2e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
     c32:	b29b      	uxth	r3, r3
  }
  *xbar = val;
     c34:	5223      	strh	r3, [r4, r0]
}
     c36:	bd70      	pop	{r4, r5, r6, pc}
    *(p->pad) = 0x10B0;
     c38:	688b      	ldr	r3, [r1, #8]
     c3a:	f241 01b0 	movw	r1, #4272	; 0x10b0
     c3e:	6019      	str	r1, [r3, #0]
     c40:	e7cb      	b.n	bda <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)+0x52>
		_pin_idx = idx_channel;
     c42:	fa1f fc8c 	uxth.w	ip, ip
     c46:	f8a0 c022 	strh.w	ip, [r0, #34]	; 0x22
		break;	
     c4a:	e7ae      	b.n	baa <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)+0x22>
  if(PHASE == 4) xbar_connect(hardware[_pin_idx].xbarIO, channel[_encoder_ch].home);
     c4c:	2a04      	cmp	r2, #4
     c4e:	d11d      	bne.n	c8c <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)+0x104>
     c50:	8c42      	ldrh	r2, [r0, #34]	; 0x22
     c52:	8c03      	ldrh	r3, [r0, #32]
     c54:	b292      	uxth	r2, r2
     c56:	492d      	ldr	r1, [pc, #180]	; (d0c <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)+0x184>)
     c58:	b29b      	uxth	r3, r3
     c5a:	eb05 1202 	add.w	r2, r5, r2, lsl #4
     c5e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
     c62:	8990      	ldrh	r0, [r2, #12]
     c64:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  if (output >= 132) return;
     c68:	2857      	cmp	r0, #87	; 0x57
  if(PHASE == 4) xbar_connect(hardware[_pin_idx].xbarIO, channel[_encoder_ch].home);
     c6a:	8ada      	ldrh	r2, [r3, #22]
  if (output >= 132) return;
     c6c:	d8e3      	bhi.n	c36 <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)+0xae>
     c6e:	2a83      	cmp	r2, #131	; 0x83
     c70:	d8e1      	bhi.n	c36 <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)+0xae>
  volatile uint16_t *xbar = &XBARA1_SEL0 + (output / 2);
     c72:	f022 0401 	bic.w	r4, r2, #1
     c76:	4926      	ldr	r1, [pc, #152]	; (d10 <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)+0x188>)
  if (!(output & 1)) {
     c78:	07d2      	lsls	r2, r2, #31
  uint16_t val = *xbar;
     c7a:	5a63      	ldrh	r3, [r4, r1]
     c7c:	b29b      	uxth	r3, r3
  if (!(output & 1)) {
     c7e:	d537      	bpl.n	cf0 <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)+0x168>
    val = (val & 0x00FF) | (input << 8);
     c80:	b2db      	uxtb	r3, r3
     c82:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
     c86:	b29b      	uxth	r3, r3
  *xbar = val;
     c88:	5263      	strh	r3, [r4, r1]
}
     c8a:	bd70      	pop	{r4, r5, r6, pc}
  if(PHASE == 5) xbar_connect(hardware[_pin_idx].xbarIO, channel[_encoder_ch].trigger);
     c8c:	2a05      	cmp	r2, #5
     c8e:	d1d2      	bne.n	c36 <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)+0xae>
     c90:	8c42      	ldrh	r2, [r0, #34]	; 0x22
     c92:	8c03      	ldrh	r3, [r0, #32]
     c94:	b292      	uxth	r2, r2
     c96:	491d      	ldr	r1, [pc, #116]	; (d0c <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)+0x184>)
     c98:	b29b      	uxth	r3, r3
     c9a:	eb05 1202 	add.w	r2, r5, r2, lsl #4
     c9e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
     ca2:	8990      	ldrh	r0, [r2, #12]
     ca4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  if (output >= 132) return;
     ca8:	2857      	cmp	r0, #87	; 0x57
  if(PHASE == 5) xbar_connect(hardware[_pin_idx].xbarIO, channel[_encoder_ch].trigger);
     caa:	8b1a      	ldrh	r2, [r3, #24]
  if (output >= 132) return;
     cac:	d9df      	bls.n	c6e <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)+0xe6>
}
     cae:	bd70      	pop	{r4, r5, r6, pc}
  if(PHASE == 2) xbar_connect(hardware[_pin_idx].xbarIO, channel[_encoder_ch].phaseB);
     cb0:	8c42      	ldrh	r2, [r0, #34]	; 0x22
     cb2:	8c03      	ldrh	r3, [r0, #32]
     cb4:	4915      	ldr	r1, [pc, #84]	; (d0c <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)+0x184>)
     cb6:	b292      	uxth	r2, r2
     cb8:	b29b      	uxth	r3, r3
     cba:	eb05 1202 	add.w	r2, r5, r2, lsl #4
     cbe:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
     cc2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
     cc6:	8991      	ldrh	r1, [r2, #12]
     cc8:	8a5a      	ldrh	r2, [r3, #18]
  if (output >= 132) return;
     cca:	2a83      	cmp	r2, #131	; 0x83
     ccc:	d9a5      	bls.n	c1a <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)+0x92>
}
     cce:	bd70      	pop	{r4, r5, r6, pc}
  if(PHASE == 1) xbar_connect(hardware[_pin_idx].xbarIO, channel[_encoder_ch].phaseA);
     cd0:	8c42      	ldrh	r2, [r0, #34]	; 0x22
     cd2:	8c03      	ldrh	r3, [r0, #32]
     cd4:	b292      	uxth	r2, r2
     cd6:	490d      	ldr	r1, [pc, #52]	; (d0c <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)+0x184>)
     cd8:	b29b      	uxth	r3, r3
     cda:	eb05 1202 	add.w	r2, r5, r2, lsl #4
     cde:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
     ce2:	8990      	ldrh	r0, [r2, #12]
     ce4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  if (output >= 132) return;
     ce8:	2857      	cmp	r0, #87	; 0x57
  if(PHASE == 1) xbar_connect(hardware[_pin_idx].xbarIO, channel[_encoder_ch].phaseA);
     cea:	8a1a      	ldrh	r2, [r3, #16]
  if (output >= 132) return;
     cec:	d9bf      	bls.n	c6e <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)+0xe6>
}
     cee:	bd70      	pop	{r4, r5, r6, pc}
    val = (val & 0xFF00) | input;
     cf0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
     cf4:	4303      	orrs	r3, r0
     cf6:	e7c7      	b.n	c88 <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)+0x100>
     cf8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
     cfc:	430b      	orrs	r3, r1
     cfe:	e799      	b.n	c34 <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)+0xac>
     d00:	20000490 	.word	0x20000490
     d04:	20000810 	.word	0x20000810
     d08:	0001f038 	.word	0x0001f038
     d0c:	200003dc 	.word	0x200003dc
     d10:	403bc000 	.word	0x403bc000

00000d14 <QuadEncoder::QuadEncoder(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
QuadEncoder::QuadEncoder(uint8_t encoder_ch, uint8_t PhaseA_pin, uint8_t PhaseB_pin, uint8_t pin_pus, uint8_t index_pin, uint8_t home_pin, uint8_t trigger_pin){
     d14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	  _encoder_ch = encoder_ch;
     d18:	8401      	strh	r1, [r0, #32]
QuadEncoder::QuadEncoder(uint8_t encoder_ch, uint8_t PhaseA_pin, uint8_t PhaseB_pin, uint8_t pin_pus, uint8_t index_pin, uint8_t home_pin, uint8_t trigger_pin){
     d1a:	b083      	sub	sp, #12
	CCM_CCGR2 |= CCM_CCGR2_XBAR1(CCM_CCGR_ON);   //turn clock on for xbara1
     d1c:	4932      	ldr	r1, [pc, #200]	; (de8 <QuadEncoder::QuadEncoder(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xd4>)
	  if(PhaseA_pin != 255 )
     d1e:	2aff      	cmp	r2, #255	; 0xff
QuadEncoder::QuadEncoder(uint8_t encoder_ch, uint8_t PhaseA_pin, uint8_t PhaseB_pin, uint8_t pin_pus, uint8_t index_pin, uint8_t home_pin, uint8_t trigger_pin){
     d20:	461e      	mov	r6, r3
     d22:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
	CCM_CCGR2 |= CCM_CCGR2_XBAR1(CCM_CCGR_ON);   //turn clock on for xbara1
     d26:	6f0d      	ldr	r5, [r1, #112]	; 0x70
QuadEncoder::QuadEncoder(uint8_t encoder_ch, uint8_t PhaseA_pin, uint8_t PhaseB_pin, uint8_t pin_pus, uint8_t index_pin, uint8_t home_pin, uint8_t trigger_pin){
     d28:	4604      	mov	r4, r0
     d2a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
	CCM_CCGR2 |= CCM_CCGR2_XBAR1(CCM_CCGR_ON);   //turn clock on for xbara1
     d2e:	f445 0540 	orr.w	r5, r5, #12582912	; 0xc00000
QuadEncoder::QuadEncoder(uint8_t encoder_ch, uint8_t PhaseA_pin, uint8_t PhaseB_pin, uint8_t pin_pus, uint8_t index_pin, uint8_t home_pin, uint8_t trigger_pin){
     d32:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
     d36:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
	CCM_CCGR2 |= CCM_CCGR2_XBAR1(CCM_CCGR_ON);   //turn clock on for xbara1
     d3a:	670d      	str	r5, [r1, #112]	; 0x70
	  if(PhaseA_pin != 255 )
     d3c:	d00b      	beq.n	d56 <QuadEncoder::QuadEncoder(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
		enc_xbara_mapping(PhaseA_pin, PHASEA, pin_pus);
     d3e:	4611      	mov	r1, r2
     d40:	2201      	movs	r2, #1
     d42:	9301      	str	r3, [sp, #4]
     d44:	f7ff ff20 	bl	b88 <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)>
		enc_xbara_mapping(PhaseB_pin, PHASEB, pin_pus);
     d48:	9b01      	ldr	r3, [sp, #4]
     d4a:	4631      	mov	r1, r6
     d4c:	2202      	movs	r2, #2
     d4e:	4620      	mov	r0, r4
     d50:	f7ff ff1a 	bl	b88 <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)>
     d54:	9b01      	ldr	r3, [sp, #4]
	  if(home_pin != 255 )
     d56:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
     d5a:	d006      	beq.n	d6a <QuadEncoder::QuadEncoder(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x56>
		 enc_xbara_mapping(home_pin, HOME, pin_pus);
     d5c:	4649      	mov	r1, r9
     d5e:	2204      	movs	r2, #4
     d60:	4620      	mov	r0, r4
     d62:	9301      	str	r3, [sp, #4]
     d64:	f7ff ff10 	bl	b88 <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)>
     d68:	9b01      	ldr	r3, [sp, #4]
	  if(index_pin != 255 )
     d6a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
     d6e:	d006      	beq.n	d7e <QuadEncoder::QuadEncoder(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x6a>
		 enc_xbara_mapping(index_pin, INDEX, pin_pus);
     d70:	4641      	mov	r1, r8
     d72:	2203      	movs	r2, #3
     d74:	4620      	mov	r0, r4
     d76:	9301      	str	r3, [sp, #4]
     d78:	f7ff ff06 	bl	b88 <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)>
     d7c:	9b01      	ldr	r3, [sp, #4]
	  if(trigger_pin != 255 )
     d7e:	2fff      	cmp	r7, #255	; 0xff
     d80:	d004      	beq.n	d8c <QuadEncoder::QuadEncoder(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x78>
		 enc_xbara_mapping(trigger_pin, TRIGGER, pin_pus);
     d82:	2205      	movs	r2, #5
     d84:	4639      	mov	r1, r7
     d86:	4620      	mov	r0, r4
     d88:	f7ff fefe 	bl	b88 <QuadEncoder::enc_xbara_mapping(unsigned char, unsigned char, unsigned char)>
    {
        tmp16 |= ENC_CTRL2_RUIRQ_MASK;
    }
    if (tmp16 != 0U)
    {
        channel[_encoder_ch].ENC->CTRL2 = (uint16_t)(channel[_encoder_ch].ENC->CTRL2 & (uint16_t)(~ENC_CTRL2_W1C_FLAGS)) & (uint16_t)(~tmp16);
     d8c:	8c23      	ldrh	r3, [r4, #32]
}
     d8e:	4620      	mov	r0, r4
        channel[_encoder_ch].ENC->CTRL2 = (uint16_t)(channel[_encoder_ch].ENC->CTRL2 & (uint16_t)(~ENC_CTRL2_W1C_FLAGS)) & (uint16_t)(~tmp16);
     d90:	4a16      	ldr	r2, [pc, #88]	; (dec <QuadEncoder::QuadEncoder(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xd8>)
     d92:	b29b      	uxth	r3, r3
     d94:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
     d98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     d9c:	685b      	ldr	r3, [r3, #4]
     d9e:	8bd9      	ldrh	r1, [r3, #30]
     da0:	8c23      	ldrh	r3, [r4, #32]
     da2:	f421 610a 	bic.w	r1, r1, #2208	; 0x8a0
     da6:	b29b      	uxth	r3, r3
     da8:	0409      	lsls	r1, r1, #16
     daa:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
     dae:	0c09      	lsrs	r1, r1, #16
     db0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     db4:	685b      	ldr	r3, [r3, #4]
     db6:	83d9      	strh	r1, [r3, #30]
     db8:	8c23      	ldrh	r3, [r4, #32]
     dba:	b29b      	uxth	r3, r3
     dbc:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
     dc0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     dc4:	685b      	ldr	r3, [r3, #4]
     dc6:	8bdb      	ldrh	r3, [r3, #30]
     dc8:	8c21      	ldrh	r1, [r4, #32]
     dca:	f423 630a 	bic.w	r3, r3, #2208	; 0x8a0
     dce:	b289      	uxth	r1, r1
     dd0:	041b      	lsls	r3, r3, #16
     dd2:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
     dd6:	0c1b      	lsrs	r3, r3, #16
     dd8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
     ddc:	6852      	ldr	r2, [r2, #4]
     dde:	83d3      	strh	r3, [r2, #30]
}
     de0:	b003      	add	sp, #12
     de2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     de6:	bf00      	nop
     de8:	400fc000 	.word	0x400fc000
     dec:	200003dc 	.word	0x200003dc

00000df0 <QuadEncoder::enableInterrupts(QuadEncoder::enc_config_t const*)>:
	NVIC_SET_PRIORITY(channel[_encoder_ch].interrupt, 32);
     df0:	8c03      	ldrh	r3, [r0, #32]
     df2:	4a4d      	ldr	r2, [pc, #308]	; (f28 <QuadEncoder::enableInterrupts(QuadEncoder::enc_config_t const*)+0x138>)
     df4:	b29b      	uxth	r3, r3
     df6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
     dfa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
{
     dfe:	b430      	push	{r4, r5}
	NVIC_SET_PRIORITY(channel[_encoder_ch].interrupt, 32);
     e00:	7a1b      	ldrb	r3, [r3, #8]
     e02:	2520      	movs	r5, #32
     e04:	4c49      	ldr	r4, [pc, #292]	; (f2c <QuadEncoder::enableInterrupts(QuadEncoder::enc_config_t const*)+0x13c>)
     e06:	551d      	strb	r5, [r3, r4]
	NVIC_ENABLE_IRQ(channel[_encoder_ch].interrupt);
     e08:	f8b0 c020 	ldrh.w	ip, [r0, #32]
     e0c:	8c03      	ldrh	r3, [r0, #32]
     e0e:	fa1f fc8c 	uxth.w	ip, ip
     e12:	b29b      	uxth	r3, r3
     e14:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
     e18:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
     e1c:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
     e20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     e24:	f89c 4008 	ldrb.w	r4, [ip, #8]
     e28:	f04f 0c01 	mov.w	ip, #1
     e2c:	7a1d      	ldrb	r5, [r3, #8]
     e2e:	4b40      	ldr	r3, [pc, #256]	; (f30 <QuadEncoder::enableInterrupts(QuadEncoder::enc_config_t const*)+0x140>)
     e30:	f004 041f 	and.w	r4, r4, #31
     e34:	eb03 1355 	add.w	r3, r3, r5, lsr #5
     e38:	fa0c f404 	lsl.w	r4, ip, r4
     e3c:	009b      	lsls	r3, r3, #2
     e3e:	601c      	str	r4, [r3, #0]
	attachInterruptVector(channel[_encoder_ch].interrupt, channel[_encoder_ch].isr);
     e40:	8c03      	ldrh	r3, [r0, #32]
     e42:	b29b      	uxth	r3, r3
     e44:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
     e48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
     e4c:	7a1c      	ldrb	r4, [r3, #8]
     e4e:	8c03      	ldrh	r3, [r0, #32]
     e50:	3410      	adds	r4, #16
     e52:	b29b      	uxth	r3, r3
     e54:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
     e58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     e5c:	68dd      	ldr	r5, [r3, #12]
     e5e:	4b35      	ldr	r3, [pc, #212]	; (f34 <QuadEncoder::enableInterrupts(QuadEncoder::enc_config_t const*)+0x144>)
     e60:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
    if (config->HomeTrigger != DISABLE)
     e64:	7fcb      	ldrb	r3, [r1, #31]
     e66:	b953      	cbnz	r3, e7e <QuadEncoder::enableInterrupts(QuadEncoder::enc_config_t const*)+0x8e>
    if (config->IndexTrigger != DISABLE)
     e68:	7f8b      	ldrb	r3, [r1, #30]
     e6a:	2b00      	cmp	r3, #0
     e6c:	d050      	beq.n	f10 <QuadEncoder::enableInterrupts(QuadEncoder::enc_config_t const*)+0x120>
    if (config->positionCompareMode == ENABLE)
     e6e:	7acb      	ldrb	r3, [r1, #11]
    if (config->IndexTrigger != DISABLE)
     e70:	f04f 0c80 	mov.w	ip, #128	; 0x80
    if (config->positionCompareMode == ENABLE)
     e74:	2b00      	cmp	r3, #0
     e76:	d048      	beq.n	f0a <QuadEncoder::enableInterrupts(QuadEncoder::enc_config_t const*)+0x11a>
        channel[_encoder_ch].ENC->CTRL = (channel[_encoder_ch].ENC->CTRL & (uint16_t)(~ENC_CTRL_W1C_FLAGS)) | tmp16;
     e78:	f04c 0c01 	orr.w	ip, ip, #1
     e7c:	e009      	b.n	e92 <QuadEncoder::enableInterrupts(QuadEncoder::enc_config_t const*)+0xa2>
    if (config->IndexTrigger != DISABLE)
     e7e:	7f8b      	ldrb	r3, [r1, #30]
     e80:	2b00      	cmp	r3, #0
     e82:	d13d      	bne.n	f00 <QuadEncoder::enableInterrupts(QuadEncoder::enc_config_t const*)+0x110>
    if (config->positionCompareMode == ENABLE)
     e84:	7acb      	ldrb	r3, [r1, #11]
     e86:	f244 0c01 	movw	ip, #16385	; 0x4001
     e8a:	2b00      	cmp	r3, #0
     e8c:	bf08      	it	eq
     e8e:	f44f 4c80 	moveq.w	ip, #16384	; 0x4000
        channel[_encoder_ch].ENC->CTRL = (channel[_encoder_ch].ENC->CTRL & (uint16_t)(~ENC_CTRL_W1C_FLAGS)) | tmp16;
     e92:	8c03      	ldrh	r3, [r0, #32]
     e94:	b29b      	uxth	r3, r3
     e96:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
     e9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     e9e:	685b      	ldr	r3, [r3, #4]
     ea0:	881d      	ldrh	r5, [r3, #0]
     ea2:	8c03      	ldrh	r3, [r0, #32]
     ea4:	b29b      	uxth	r3, r3
     ea6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
     eaa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     eae:	685c      	ldr	r4, [r3, #4]
     eb0:	f647 63ed 	movw	r3, #32493	; 0x7eed
     eb4:	402b      	ands	r3, r5
     eb6:	ea4c 0c03 	orr.w	ip, ip, r3
     eba:	f8a4 c000 	strh.w	ip, [r4]
    if (config->positionROIE != DISABLE)
     ebe:	7f0b      	ldrb	r3, [r1, #28]
     ec0:	2b00      	cmp	r3, #0
     ec2:	d02b      	beq.n	f1c <QuadEncoder::enableInterrupts(QuadEncoder::enc_config_t const*)+0x12c>
    if (config->positionRUIE != DISABLE)
     ec4:	7f4c      	ldrb	r4, [r1, #29]
     ec6:	f64f 735f 	movw	r3, #65375	; 0xff5f
     eca:	f64f 717f 	movw	r1, #65407	; 0xff7f
     ece:	2c00      	cmp	r4, #0
     ed0:	bf08      	it	eq
     ed2:	460b      	moveq	r3, r1
        channel[_encoder_ch].ENC->CTRL2 = (uint16_t)(channel[_encoder_ch].ENC->CTRL2 & (uint16_t)(~ENC_CTRL2_W1C_FLAGS)) & (uint16_t)(~tmp16);
     ed4:	8c01      	ldrh	r1, [r0, #32]
     ed6:	b289      	uxth	r1, r1
     ed8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
     edc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
     ee0:	6849      	ldr	r1, [r1, #4]
     ee2:	8bcc      	ldrh	r4, [r1, #30]
     ee4:	8c01      	ldrh	r1, [r0, #32]
     ee6:	4023      	ands	r3, r4
     ee8:	b289      	uxth	r1, r1
     eea:	f423 630a 	bic.w	r3, r3, #2208	; 0x8a0
     eee:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
     ef2:	b29b      	uxth	r3, r3
     ef4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
     ef8:	684a      	ldr	r2, [r1, #4]
     efa:	83d3      	strh	r3, [r2, #30]
}
     efc:	bc30      	pop	{r4, r5}
     efe:	4770      	bx	lr
    if (config->positionCompareMode == ENABLE)
     f00:	7acb      	ldrb	r3, [r1, #11]
    if (config->IndexTrigger != DISABLE)
     f02:	f44f 4c81 	mov.w	ip, #16512	; 0x4080
    if (config->positionCompareMode == ENABLE)
     f06:	2b00      	cmp	r3, #0
     f08:	d1b6      	bne.n	e78 <QuadEncoder::enableInterrupts(QuadEncoder::enc_config_t const*)+0x88>
        channel[_encoder_ch].ENC->CTRL = (channel[_encoder_ch].ENC->CTRL & (uint16_t)(~ENC_CTRL_W1C_FLAGS)) | tmp16;
     f0a:	fa1f fc8c 	uxth.w	ip, ip
     f0e:	e7c0      	b.n	e92 <QuadEncoder::enableInterrupts(QuadEncoder::enc_config_t const*)+0xa2>
    if (config->positionCompareMode == ENABLE)
     f10:	7acb      	ldrb	r3, [r1, #11]
     f12:	2b00      	cmp	r3, #0
     f14:	d1bd      	bne.n	e92 <QuadEncoder::enableInterrupts(QuadEncoder::enc_config_t const*)+0xa2>
    if (config->positionROIE != DISABLE)
     f16:	7f0b      	ldrb	r3, [r1, #28]
     f18:	2b00      	cmp	r3, #0
     f1a:	d1d3      	bne.n	ec4 <QuadEncoder::enableInterrupts(QuadEncoder::enc_config_t const*)+0xd4>
    if (config->positionRUIE != DISABLE)
     f1c:	7f4b      	ldrb	r3, [r1, #29]
     f1e:	2b00      	cmp	r3, #0
     f20:	d0ec      	beq.n	efc <QuadEncoder::enableInterrupts(QuadEncoder::enc_config_t const*)+0x10c>
     f22:	f64f 73df 	movw	r3, #65503	; 0xffdf
    if (tmp16 != 0U)
     f26:	e7d5      	b.n	ed4 <QuadEncoder::enableInterrupts(QuadEncoder::enc_config_t const*)+0xe4>
     f28:	200003dc 	.word	0x200003dc
     f2c:	e000e400 	.word	0xe000e400
     f30:	38003840 	.word	0x38003840
     f34:	20001800 	.word	0x20001800

00000f38 <QuadEncoder::init()>:
{
     f38:	b538      	push	{r3, r4, r5, lr}
  Init(&EncConfig);
     f3a:	4601      	mov	r1, r0
    uint16_t tmp16 = channel[_encoder_ch].ENC->CTRL & (uint16_t)(~ENC_CTRL_W1C_FLAGS);
     f3c:	4d0e      	ldr	r5, [pc, #56]	; (f78 <QuadEncoder::init()+0x40>)
  Init(&EncConfig);
     f3e:	f7ff fd47 	bl	9d0 <QuadEncoder::Init(QuadEncoder::enc_config_t const*)>
    uint16_t tmp16 = channel[_encoder_ch].ENC->CTRL & (uint16_t)(~ENC_CTRL_W1C_FLAGS);
     f42:	8c03      	ldrh	r3, [r0, #32]
     f44:	f647 62ed 	movw	r2, #32493	; 0x7eed
  enableInterrupts(&EncConfig);
     f48:	4601      	mov	r1, r0
    uint16_t tmp16 = channel[_encoder_ch].ENC->CTRL & (uint16_t)(~ENC_CTRL_W1C_FLAGS);
     f4a:	b29b      	uxth	r3, r3
     f4c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
     f50:	eb05 0383 	add.w	r3, r5, r3, lsl #2
     f54:	685b      	ldr	r3, [r3, #4]
     f56:	881b      	ldrh	r3, [r3, #0]
     f58:	401a      	ands	r2, r3
    channel[_encoder_ch].ENC->CTRL = tmp16;
     f5a:	8c03      	ldrh	r3, [r0, #32]
     f5c:	b29b      	uxth	r3, r3
    tmp16 |= ENC_CTRL_SWIP_MASK; /* Write 1 to trigger the command for loading initial position value. */
     f5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    channel[_encoder_ch].ENC->CTRL = tmp16;
     f62:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
     f66:	eb05 0583 	add.w	r5, r5, r3, lsl #2
     f6a:	686b      	ldr	r3, [r5, #4]
     f6c:	801a      	strh	r2, [r3, #0]
}
     f6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  enableInterrupts(&EncConfig);
     f72:	f7ff bf3d 	b.w	df0 <QuadEncoder::enableInterrupts(QuadEncoder::enc_config_t const*)>
     f76:	bf00      	nop
     f78:	200003dc 	.word	0x200003dc

00000f7c <QuadEncoder::isr(unsigned char)>:
	asm volatile ("dsb");  // wait for clear  memory barrier
}

void QuadEncoder::isr(uint8_t index) 
{	
    if (ENC_CTRL_XIRQ_MASK == (ENC_CTRL_XIRQ_MASK & channel[index].ENC->CTRL) && (ENC_CTRL_XIE_MASK & channel[index].ENC->CTRL))
     f7c:	4b2c      	ldr	r3, [pc, #176]	; (1030 <QuadEncoder::isr(unsigned char)+0xb4>)
     f7e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
     f82:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     f86:	685b      	ldr	r3, [r3, #4]
     f88:	881a      	ldrh	r2, [r3, #0]
     f8a:	05d2      	lsls	r2, r2, #23
     f8c:	d502      	bpl.n	f94 <QuadEncoder::isr(unsigned char)+0x18>
     f8e:	881a      	ldrh	r2, [r3, #0]
     f90:	0610      	lsls	r0, r2, #24
     f92:	d42a      	bmi.n	fea <QuadEncoder::isr(unsigned char)+0x6e>
			clearStatusFlags(_positionRollUnderFlag, index);
		}

	}
	
    if (ENC_CTRL_HIRQ_MASK == (ENC_CTRL_HIRQ_MASK & channel[index].ENC->CTRL) && (ENC_CTRL_HIE_MASK & channel[index].ENC->CTRL))
     f94:	881a      	ldrh	r2, [r3, #0]
     f96:	0410      	lsls	r0, r2, #16
     f98:	d403      	bmi.n	fa2 <QuadEncoder::isr(unsigned char)+0x26>

		homeCounter++;
		clearStatusFlags(_HOMETransitionFlag, index);
    }
	
	if (ENC_CTRL_CMPIRQ_MASK == (ENC_CTRL_CMPIRQ_MASK & channel[index].ENC->CTRL))
     f9a:	881a      	ldrh	r2, [r3, #0]
     f9c:	0792      	lsls	r2, r2, #30
     f9e:	d413      	bmi.n	fc8 <QuadEncoder::isr(unsigned char)+0x4c>
		compareValueFlag = 1;
		// 12/03/21 JWP add line below to disable compare interrupt
		channel[index].ENC->CTRL &= ~ENC_CTRL_CMPIE_MASK;
		clearStatusFlags(_positionCompareFlag, index);
	}
}
     fa0:	4770      	bx	lr
    if (ENC_CTRL_HIRQ_MASK == (ENC_CTRL_HIRQ_MASK & channel[index].ENC->CTRL) && (ENC_CTRL_HIE_MASK & channel[index].ENC->CTRL))
     fa2:	881a      	ldrh	r2, [r3, #0]
     fa4:	0451      	lsls	r1, r2, #17
     fa6:	d5f8      	bpl.n	f9a <QuadEncoder::isr(unsigned char)+0x1e>
        channel[index].ENC->CTRL = (channel[index].ENC->CTRL & (uint16_t)(~ENC_CTRL_W1C_FLAGS)) | tmp16;
     fa8:	f8b3 c000 	ldrh.w	ip, [r3]
     fac:	f647 62ed 	movw	r2, #32493	; 0x7eed
		homeCounter++;
     fb0:	4820      	ldr	r0, [pc, #128]	; (1034 <QuadEncoder::isr(unsigned char)+0xb8>)
        channel[index].ENC->CTRL = (channel[index].ENC->CTRL & (uint16_t)(~ENC_CTRL_W1C_FLAGS)) | tmp16;
     fb2:	ea02 020c 	and.w	r2, r2, ip
		homeCounter++;
     fb6:	6801      	ldr	r1, [r0, #0]
        channel[index].ENC->CTRL = (channel[index].ENC->CTRL & (uint16_t)(~ENC_CTRL_W1C_FLAGS)) | tmp16;
     fb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
		homeCounter++;
     fbc:	3101      	adds	r1, #1
     fbe:	6001      	str	r1, [r0, #0]
        channel[index].ENC->CTRL = (channel[index].ENC->CTRL & (uint16_t)(~ENC_CTRL_W1C_FLAGS)) | tmp16;
     fc0:	801a      	strh	r2, [r3, #0]
	if (ENC_CTRL_CMPIRQ_MASK == (ENC_CTRL_CMPIRQ_MASK & channel[index].ENC->CTRL))
     fc2:	881a      	ldrh	r2, [r3, #0]
     fc4:	0792      	lsls	r2, r2, #30
     fc6:	d5eb      	bpl.n	fa0 <QuadEncoder::isr(unsigned char)+0x24>
		compareValueFlag = 1;
     fc8:	4a1b      	ldr	r2, [pc, #108]	; (1038 <QuadEncoder::isr(unsigned char)+0xbc>)
     fca:	2001      	movs	r0, #1
        channel[index].ENC->CTRL = (channel[index].ENC->CTRL & (uint16_t)(~ENC_CTRL_W1C_FLAGS)) | tmp16;
     fcc:	f647 61ed 	movw	r1, #32493	; 0x7eed
		compareValueFlag = 1;
     fd0:	7010      	strb	r0, [r2, #0]
		channel[index].ENC->CTRL &= ~ENC_CTRL_CMPIE_MASK;
     fd2:	881a      	ldrh	r2, [r3, #0]
     fd4:	f022 0201 	bic.w	r2, r2, #1
     fd8:	0412      	lsls	r2, r2, #16
     fda:	0c12      	lsrs	r2, r2, #16
     fdc:	801a      	strh	r2, [r3, #0]
        channel[index].ENC->CTRL = (channel[index].ENC->CTRL & (uint16_t)(~ENC_CTRL_W1C_FLAGS)) | tmp16;
     fde:	881a      	ldrh	r2, [r3, #0]
     fe0:	400a      	ands	r2, r1
     fe2:	f042 0202 	orr.w	r2, r2, #2
     fe6:	801a      	strh	r2, [r3, #0]
}
     fe8:	4770      	bx	lr
        channel[index].ENC->CTRL = (channel[index].ENC->CTRL & (uint16_t)(~ENC_CTRL_W1C_FLAGS)) | tmp16;
     fea:	f8b3 c000 	ldrh.w	ip, [r3]
     fee:	f647 62ed 	movw	r2, #32493	; 0x7eed
		indexCounter = indexCounter + 1;
     ff2:	4812      	ldr	r0, [pc, #72]	; (103c <QuadEncoder::isr(unsigned char)+0xc0>)
        channel[index].ENC->CTRL = (channel[index].ENC->CTRL & (uint16_t)(~ENC_CTRL_W1C_FLAGS)) | tmp16;
     ff4:	ea02 020c 	and.w	r2, r2, ip
		indexCounter = indexCounter + 1;
     ff8:	6801      	ldr	r1, [r0, #0]
        channel[index].ENC->CTRL = (channel[index].ENC->CTRL & (uint16_t)(~ENC_CTRL_W1C_FLAGS)) | tmp16;
     ffa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
		indexCounter = indexCounter + 1;
     ffe:	3101      	adds	r1, #1
    1000:	6001      	str	r1, [r0, #0]
        channel[index].ENC->CTRL = (channel[index].ENC->CTRL & (uint16_t)(~ENC_CTRL_W1C_FLAGS)) | tmp16;
    1002:	801a      	strh	r2, [r3, #0]
		if(ENC_CTRL2_ROIRQ_MASK == (ENC_CTRL2_ROIRQ_MASK & channel[index].ENC->CTRL2))
    1004:	8bda      	ldrh	r2, [r3, #30]
    1006:	0611      	lsls	r1, r2, #24
    1008:	d40a      	bmi.n	1020 <QuadEncoder::isr(unsigned char)+0xa4>
		if(ENC_CTRL2_RUIRQ_MASK == (ENC_CTRL2_RUIRQ_MASK & channel[index].ENC->CTRL2))
    100a:	8bda      	ldrh	r2, [r3, #30]
    100c:	0692      	lsls	r2, r2, #26
    100e:	d5c1      	bpl.n	f94 <QuadEncoder::isr(unsigned char)+0x18>
        channel[index].ENC->CTRL2 = (channel[index].ENC->CTRL2 & (uint16_t)(~ENC_CTRL2_W1C_FLAGS)) | tmp16;
    1010:	8bda      	ldrh	r2, [r3, #30]
    1012:	b292      	uxth	r2, r2
    1014:	f422 620a 	bic.w	r2, r2, #2208	; 0x8a0
    1018:	f042 0220 	orr.w	r2, r2, #32
    101c:	83da      	strh	r2, [r3, #30]
}
    101e:	e7b9      	b.n	f94 <QuadEncoder::isr(unsigned char)+0x18>
        channel[index].ENC->CTRL2 = (channel[index].ENC->CTRL2 & (uint16_t)(~ENC_CTRL2_W1C_FLAGS)) | tmp16;
    1020:	8bda      	ldrh	r2, [r3, #30]
    1022:	b292      	uxth	r2, r2
    1024:	f422 620a 	bic.w	r2, r2, #2208	; 0x8a0
    1028:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    102c:	83da      	strh	r2, [r3, #30]
}
    102e:	e7ec      	b.n	100a <QuadEncoder::isr(unsigned char)+0x8e>
    1030:	200003dc 	.word	0x200003dc
    1034:	20002244 	.word	0x20002244
    1038:	200026a9 	.word	0x200026a9
    103c:	20002248 	.word	0x20002248

00001040 <QuadEncoder::isrEnc1()>:
{
    1040:	b508      	push	{r3, lr}
 	list[index]->isr(index);
    1042:	4b04      	ldr	r3, [pc, #16]	; (1054 <QuadEncoder::isrEnc1()+0x14>)
    1044:	2101      	movs	r1, #1
    1046:	6858      	ldr	r0, [r3, #4]
    1048:	f7ff ff98 	bl	f7c <QuadEncoder::isr(unsigned char)>
	asm volatile ("dsb");  // wait for clear  memory barrier
    104c:	f3bf 8f4f 	dsb	sy
}
    1050:	bd08      	pop	{r3, pc}
    1052:	bf00      	nop
    1054:	2000224c 	.word	0x2000224c

00001058 <QuadEncoder::isrEnc2()>:
{
    1058:	b508      	push	{r3, lr}
 	list[index]->isr(index);
    105a:	4b04      	ldr	r3, [pc, #16]	; (106c <QuadEncoder::isrEnc2()+0x14>)
    105c:	2102      	movs	r1, #2
    105e:	6898      	ldr	r0, [r3, #8]
    1060:	f7ff ff8c 	bl	f7c <QuadEncoder::isr(unsigned char)>
	asm volatile ("dsb");  // wait for clear  memory barrier
    1064:	f3bf 8f4f 	dsb	sy
}
    1068:	bd08      	pop	{r3, pc}
    106a:	bf00      	nop
    106c:	2000224c 	.word	0x2000224c

00001070 <QuadEncoder::isrEnc3()>:
{
    1070:	b508      	push	{r3, lr}
 	list[index]->isr(index);
    1072:	4b04      	ldr	r3, [pc, #16]	; (1084 <QuadEncoder::isrEnc3()+0x14>)
    1074:	2103      	movs	r1, #3
    1076:	68d8      	ldr	r0, [r3, #12]
    1078:	f7ff ff80 	bl	f7c <QuadEncoder::isr(unsigned char)>
	asm volatile ("dsb");  // wait for clear  memory barrier
    107c:	f3bf 8f4f 	dsb	sy
}
    1080:	bd08      	pop	{r3, pc}
    1082:	bf00      	nop
    1084:	2000224c 	.word	0x2000224c

00001088 <QuadEncoder::isrEnc4()>:
{
    1088:	b508      	push	{r3, lr}
 	list[index]->isr(index);
    108a:	4b04      	ldr	r3, [pc, #16]	; (109c <QuadEncoder::isrEnc4()+0x14>)
    108c:	2104      	movs	r1, #4
    108e:	6918      	ldr	r0, [r3, #16]
    1090:	f7ff ff74 	bl	f7c <QuadEncoder::isr(unsigned char)>
	asm volatile ("dsb");  // wait for clear  memory barrier
    1094:	f3bf 8f4f 	dsb	sy
}
    1098:	bd08      	pop	{r3, pc}
    109a:	bf00      	nop
    109c:	2000224c 	.word	0x2000224c

000010a0 <HardwareSerial::availableForWrite()>:
	head = tx_buffer_head_;
    10a0:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	tail = tx_buffer_tail_;
    10a4:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
	head = tx_buffer_head_;
    10a8:	b29b      	uxth	r3, r3
	tail = tx_buffer_tail_;
    10aa:	b292      	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    10ac:	4293      	cmp	r3, r2
    10ae:	d202      	bcs.n	10b6 <HardwareSerial::availableForWrite()+0x16>
	return tail - head - 1;
    10b0:	3a01      	subs	r2, #1
    10b2:	1ad0      	subs	r0, r2, r3
}
    10b4:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    10b6:	6b41      	ldr	r1, [r0, #52]	; 0x34
    10b8:	3901      	subs	r1, #1
    10ba:	440a      	add	r2, r1
    10bc:	1ad0      	subs	r0, r2, r3
    10be:	4770      	bx	lr

000010c0 <HardwareSerial::available()>:
	__disable_irq();
    10c0:	b672      	cpsid	i
	head = rx_buffer_head_;
    10c2:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    10c6:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    10ca:	b292      	uxth	r2, r2
	tail = rx_buffer_tail_;
    10cc:	b29b      	uxth	r3, r3
	if (head >= tail) avail = head - tail;
    10ce:	429a      	cmp	r2, r3
	else avail = rx_buffer_total_size_ + head - tail;	
    10d0:	bf3c      	itt	cc
    10d2:	6b81      	ldrcc	r1, [r0, #56]	; 0x38
    10d4:	1852      	addcc	r2, r2, r1
    10d6:	1ad3      	subs	r3, r2, r3
	avail += (port->WATER >> 24) & 0x7;
    10d8:	6902      	ldr	r2, [r0, #16]
    10da:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	__enable_irq();
    10dc:	b662      	cpsie	i
	avail += (port->WATER >> 24) & 0x7;
    10de:	f3c0 6002 	ubfx	r0, r0, #24, #3
}
    10e2:	4418      	add	r0, r3
    10e4:	4770      	bx	lr
    10e6:	bf00      	nop

000010e8 <HardwareSerial::peek()>:
	head = rx_buffer_head_;
    10e8:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    10ec:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    10ee:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    10f2:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    10f4:	b29b      	uxth	r3, r3
	if (head == tail) {
    10f6:	4299      	cmp	r1, r3
    10f8:	d010      	beq.n	111c <HardwareSerial::peek()+0x34>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    10fa:	3301      	adds	r3, #1
    10fc:	6b90      	ldr	r0, [r2, #56]	; 0x38
	if (tail < rx_buffer_size_) {
    10fe:	6b11      	ldr	r1, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    1100:	4298      	cmp	r0, r3
    1102:	bf98      	it	ls
    1104:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
    1106:	4299      	cmp	r1, r3
    1108:	d903      	bls.n	1112 <HardwareSerial::peek()+0x2a>
		return rx_buffer_[tail];
    110a:	6a12      	ldr	r2, [r2, #32]
    110c:	5cd0      	ldrb	r0, [r2, r3]
    110e:	b2c0      	uxtb	r0, r0
    1110:	4770      	bx	lr
		return rx_buffer_storage_[tail-rx_buffer_size_];
    1112:	1a5b      	subs	r3, r3, r1
    1114:	6a52      	ldr	r2, [r2, #36]	; 0x24
    1116:	5cd0      	ldrb	r0, [r2, r3]
    1118:	b2c0      	uxtb	r0, r0
}
    111a:	4770      	bx	lr
		__disable_irq();
    111c:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    111e:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
    1122:	b280      	uxth	r0, r0
		if (head == tail) {
    1124:	4281      	cmp	r1, r0
    1126:	d001      	beq.n	112c <HardwareSerial::peek()+0x44>
		__enable_irq();
    1128:	b662      	cpsie	i
    112a:	e7e6      	b.n	10fa <HardwareSerial::peek()+0x12>
			if (port->WATER & 0x7000000) {
    112c:	6913      	ldr	r3, [r2, #16]
    112e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    1130:	f011 6fe0 	tst.w	r1, #117440512	; 0x7000000
    1134:	d103      	bne.n	113e <HardwareSerial::peek()+0x56>
			int c = -1;	// assume nothing to return
    1136:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
    113a:	b662      	cpsie	i
			return c;
    113c:	4770      	bx	lr
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    113e:	69db      	ldr	r3, [r3, #28]
				rx_buffer_head_ = 1;
    1140:	2001      	movs	r0, #1
				rx_buffer_tail_ = 0; 
    1142:	f04f 0c00 	mov.w	ip, #0
				rx_buffer_[1] = c;
    1146:	6a11      	ldr	r1, [r2, #32]
				rx_buffer_head_ = 1;
    1148:	f8a2 004a 	strh.w	r0, [r2, #74]	; 0x4a
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    114c:	f3c3 0009 	ubfx	r0, r3, #0, #10
				rx_buffer_[1] = c;
    1150:	b2db      	uxtb	r3, r3
				rx_buffer_tail_ = 0; 
    1152:	f8a2 c04c 	strh.w	ip, [r2, #76]	; 0x4c
				rx_buffer_[1] = c;
    1156:	704b      	strb	r3, [r1, #1]
    1158:	e7ef      	b.n	113a <HardwareSerial::peek()+0x52>
    115a:	bf00      	nop

0000115c <HardwareSerial::read()>:
	head = rx_buffer_head_;
    115c:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    1160:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    1162:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    1166:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    1168:	b29b      	uxth	r3, r3
	if (head == tail) {
    116a:	4299      	cmp	r1, r3
    116c:	d026      	beq.n	11bc <HardwareSerial::read()+0x60>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    116e:	3301      	adds	r3, #1
{
    1170:	b430      	push	{r4, r5}
	if (++tail >= rx_buffer_total_size_) tail = 0;
    1172:	6b94      	ldr	r4, [r2, #56]	; 0x38
    1174:	429c      	cmp	r4, r3
    1176:	d916      	bls.n	11a6 <HardwareSerial::read()+0x4a>
	if (tail < rx_buffer_size_) {
    1178:	6b10      	ldr	r0, [r2, #48]	; 0x30
	rx_buffer_tail_ = tail;
    117a:	fa1f fc83 	uxth.w	ip, r3
	if (tail < rx_buffer_size_) {
    117e:	4298      	cmp	r0, r3
    1180:	d917      	bls.n	11b2 <HardwareSerial::read()+0x56>
		c = rx_buffer_[tail];
    1182:	6a10      	ldr	r0, [r2, #32]
    1184:	5cc0      	ldrb	r0, [r0, r3]
    1186:	b2c0      	uxtb	r0, r0
	if (rts_pin_baseReg_) {
    1188:	6d95      	ldr	r5, [r2, #88]	; 0x58
	rx_buffer_tail_ = tail;
    118a:	f8a2 c04c 	strh.w	ip, [r2, #76]	; 0x4c
	if (rts_pin_baseReg_) {
    118e:	b145      	cbz	r5, 11a2 <HardwareSerial::read()+0x46>
		if (head >= tail) avail = head - tail;
    1190:	4299      	cmp	r1, r3
    1192:	d31c      	bcc.n	11ce <HardwareSerial::read()+0x72>
    1194:	1acb      	subs	r3, r1, r3
		if (avail <= rts_low_watermark_) rts_assert();
    1196:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    1198:	4299      	cmp	r1, r3
    119a:	d302      	bcc.n	11a2 <HardwareSerial::read()+0x46>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    119c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    119e:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}	
    11a2:	bc30      	pop	{r4, r5}
    11a4:	4770      	bx	lr
    11a6:	f04f 0c00 	mov.w	ip, #0
	if (tail < rx_buffer_size_) {
    11aa:	6b10      	ldr	r0, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    11ac:	4663      	mov	r3, ip
	if (tail < rx_buffer_size_) {
    11ae:	4298      	cmp	r0, r3
    11b0:	d8e7      	bhi.n	1182 <HardwareSerial::read()+0x26>
		c = rx_buffer_storage_[tail-rx_buffer_size_];
    11b2:	1a18      	subs	r0, r3, r0
    11b4:	6a55      	ldr	r5, [r2, #36]	; 0x24
    11b6:	5c28      	ldrb	r0, [r5, r0]
    11b8:	b2c0      	uxtb	r0, r0
    11ba:	e7e5      	b.n	1188 <HardwareSerial::read()+0x2c>
    11bc:	4608      	mov	r0, r1
		__disable_irq();
    11be:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    11c0:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
    11c4:	b289      	uxth	r1, r1
		if (head == tail) {
    11c6:	4288      	cmp	r0, r1
    11c8:	d004      	beq.n	11d4 <HardwareSerial::read()+0x78>
		__enable_irq();
    11ca:	b662      	cpsie	i
    11cc:	e7cf      	b.n	116e <HardwareSerial::read()+0x12>
		else avail = rx_buffer_total_size_ + head - tail;
    11ce:	440c      	add	r4, r1
    11d0:	1ae3      	subs	r3, r4, r3
    11d2:	e7e0      	b.n	1196 <HardwareSerial::read()+0x3a>
			if (port->WATER & 0x7000000) {
    11d4:	6913      	ldr	r3, [r2, #16]
    11d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    11d8:	f012 6fe0 	tst.w	r2, #117440512	; 0x7000000
    11dc:	d103      	bne.n	11e6 <HardwareSerial::read()+0x8a>
			c = -1;	// assume nothing to return
    11de:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
    11e2:	b662      	cpsie	i
}	
    11e4:	4770      	bx	lr
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    11e6:	69d8      	ldr	r0, [r3, #28]
    11e8:	f3c0 0009 	ubfx	r0, r0, #0, #10
    11ec:	e7f9      	b.n	11e2 <HardwareSerial::read()+0x86>
    11ee:	bf00      	nop

000011f0 <HardwareSerial::flush()>:
	while (transmitting_) yield(); // wait
    11f0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    11f4:	b143      	cbz	r3, 1208 <HardwareSerial::flush()+0x18>
{
    11f6:	b510      	push	{r4, lr}
    11f8:	4604      	mov	r4, r0
	while (transmitting_) yield(); // wait
    11fa:	f002 fa3f 	bl	367c <yield>
    11fe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    1202:	2b00      	cmp	r3, #0
    1204:	d1f9      	bne.n	11fa <HardwareSerial::flush()+0xa>
}
    1206:	bd10      	pop	{r4, pc}
    1208:	4770      	bx	lr
    120a:	bf00      	nop

0000120c <nvic_execution_priority()>:
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    120c:	f3ef 8013 	mrs	r0, FAULTMASK
	if (faultmask) return -1;
    1210:	b9b8      	cbnz	r0, 1242 <nvic_execution_priority()+0x36>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1212:	f3ef 8310 	mrs	r3, PRIMASK
	if (primask) return 0;
    1216:	b94b      	cbnz	r3, 122c <nvic_execution_priority()+0x20>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    1218:	f3ef 8205 	mrs	r2, IPSR
	if (ipsr) {
    121c:	b93a      	cbnz	r2, 122e <nvic_execution_priority()+0x22>
	uint32_t priority=256;
    121e:	f44f 7380 	mov.w	r3, #256	; 0x100
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    1222:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    1226:	b150      	cbz	r0, 123e <nvic_execution_priority()+0x32>
    1228:	4298      	cmp	r0, r3
    122a:	d208      	bcs.n	123e <nvic_execution_priority()+0x32>
}
    122c:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
    122e:	2a0f      	cmp	r2, #15
    1230:	d9f7      	bls.n	1222 <nvic_execution_priority()+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    1232:	4b05      	ldr	r3, [pc, #20]	; (1248 <nvic_execution_priority()+0x3c>)
    1234:	5c9b      	ldrb	r3, [r3, r2]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    1236:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    123a:	2800      	cmp	r0, #0
    123c:	d1f4      	bne.n	1228 <nvic_execution_priority()+0x1c>
    123e:	4618      	mov	r0, r3
	return priority;
    1240:	4770      	bx	lr
	if (faultmask) return -1;
    1242:	f04f 30ff 	mov.w	r0, #4294967295
    1246:	e7f1      	b.n	122c <nvic_execution_priority()+0x20>
    1248:	e000e3f0 	.word	0xe000e3f0

0000124c <HardwareSerial::write9bit(unsigned long)>:
{
    124c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    124e:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    1250:	4604      	mov	r4, r0
    1252:	460e      	mov	r6, r1
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    1254:	b113      	cbz	r3, 125c <HardwareSerial::write9bit(unsigned long)+0x10>
    1256:	6d42      	ldr	r2, [r0, #84]	; 0x54
    1258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if(half_duplex_mode_) {		
    125c:	7ea3      	ldrb	r3, [r4, #26]
    125e:	b133      	cbz	r3, 126e <HardwareSerial::write9bit(unsigned long)+0x22>
		__disable_irq();
    1260:	b672      	cpsid	i
	    port->CTRL |= LPUART_CTRL_TXDIR;
    1262:	6922      	ldr	r2, [r4, #16]
    1264:	6993      	ldr	r3, [r2, #24]
    1266:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    126a:	6193      	str	r3, [r2, #24]
		__enable_irq();
    126c:	b662      	cpsie	i
	head = tx_buffer_head_;
    126e:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
	if (++head >= tx_buffer_total_size_) head = 0;
    1272:	6b63      	ldr	r3, [r4, #52]	; 0x34
	head = tx_buffer_head_;
    1274:	b2ad      	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    1276:	3501      	adds	r5, #1
    1278:	42ab      	cmp	r3, r5
    127a:	d84c      	bhi.n	1316 <HardwareSerial::write9bit(unsigned long)+0xca>
    127c:	2700      	movs	r7, #0
    127e:	463d      	mov	r5, r7
	while (tx_buffer_tail_ == head) {
    1280:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    1284:	b29b      	uxth	r3, r3
    1286:	429d      	cmp	r5, r3
    1288:	d01a      	beq.n	12c0 <HardwareSerial::write9bit(unsigned long)+0x74>
    128a:	e029      	b.n	12e0 <HardwareSerial::write9bit(unsigned long)+0x94>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    128c:	6921      	ldr	r1, [r4, #16]
    128e:	694b      	ldr	r3, [r1, #20]
    1290:	021b      	lsls	r3, r3, #8
    1292:	d510      	bpl.n	12b6 <HardwareSerial::write9bit(unsigned long)+0x6a>
				uint32_t tail = tx_buffer_tail_;
    1294:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
				if (++tail >= tx_buffer_total_size_) tail = 0;
    1298:	6b62      	ldr	r2, [r4, #52]	; 0x34
				uint32_t tail = tx_buffer_tail_;
    129a:	b29b      	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    129c:	3301      	adds	r3, #1
    129e:	429a      	cmp	r2, r3
    12a0:	d936      	bls.n	1310 <HardwareSerial::write9bit(unsigned long)+0xc4>
				tx_buffer_tail_ = tail;
    12a2:	b29a      	uxth	r2, r3
				if (tail < tx_buffer_size_) {
    12a4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    12a6:	4298      	cmp	r0, r3
    12a8:	d92d      	bls.n	1306 <HardwareSerial::write9bit(unsigned long)+0xba>
					n = tx_buffer_[tail];
    12aa:	69e0      	ldr	r0, [r4, #28]
    12ac:	5cc3      	ldrb	r3, [r0, r3]
    12ae:	b2db      	uxtb	r3, r3
				port->DATA  = n;
    12b0:	61cb      	str	r3, [r1, #28]
				tx_buffer_tail_ = tail;
    12b2:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
	while (tx_buffer_tail_ == head) {
    12b6:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    12ba:	b29b      	uxth	r3, r3
    12bc:	42ab      	cmp	r3, r5
    12be:	d10f      	bne.n	12e0 <HardwareSerial::write9bit(unsigned long)+0x94>
		int priority = nvic_execution_priority();
    12c0:	f7ff ffa4 	bl	120c <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    12c4:	6963      	ldr	r3, [r4, #20]
    12c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
    12ca:	4283      	cmp	r3, r0
    12cc:	dade      	bge.n	128c <HardwareSerial::write9bit(unsigned long)+0x40>
		} else if (priority >= 256) 
    12ce:	28ff      	cmp	r0, #255	; 0xff
    12d0:	ddf1      	ble.n	12b6 <HardwareSerial::write9bit(unsigned long)+0x6a>
			yield(); // wait
    12d2:	f002 f9d3 	bl	367c <yield>
	while (tx_buffer_tail_ == head) {
    12d6:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    12da:	b29b      	uxth	r3, r3
    12dc:	42ab      	cmp	r3, r5
    12de:	d0ef      	beq.n	12c0 <HardwareSerial::write9bit(unsigned long)+0x74>
	if (head < tx_buffer_size_) {
    12e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    12e2:	42ab      	cmp	r3, r5
    12e4:	d919      	bls.n	131a <HardwareSerial::write9bit(unsigned long)+0xce>
		tx_buffer_[head] = c;
    12e6:	69e3      	ldr	r3, [r4, #28]
    12e8:	b2f6      	uxtb	r6, r6
    12ea:	555e      	strb	r6, [r3, r5]
	__disable_irq();
    12ec:	b672      	cpsid	i
	transmitting_ = 1;
    12ee:	2001      	movs	r0, #1
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    12f0:	6922      	ldr	r2, [r4, #16]
	transmitting_ = 1;
    12f2:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    12f6:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    12fa:	6993      	ldr	r3, [r2, #24]
    12fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    1300:	6193      	str	r3, [r2, #24]
	__enable_irq();
    1302:	b662      	cpsie	i
}
    1304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    1306:	1a1b      	subs	r3, r3, r0
    1308:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    130a:	5cc3      	ldrb	r3, [r0, r3]
    130c:	b2db      	uxtb	r3, r3
    130e:	e7cf      	b.n	12b0 <HardwareSerial::write9bit(unsigned long)+0x64>
    1310:	2200      	movs	r2, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    1312:	4613      	mov	r3, r2
    1314:	e7c6      	b.n	12a4 <HardwareSerial::write9bit(unsigned long)+0x58>
	tx_buffer_head_ = head;
    1316:	b2af      	uxth	r7, r5
    1318:	e7b2      	b.n	1280 <HardwareSerial::write9bit(unsigned long)+0x34>
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    131a:	1aed      	subs	r5, r5, r3
    131c:	b2f6      	uxtb	r6, r6
    131e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1320:	555e      	strb	r6, [r3, r5]
    1322:	e7e3      	b.n	12ec <HardwareSerial::write9bit(unsigned long)+0xa0>

00001324 <HardwareSerial::write(unsigned char)>:
	return write9bit(c);
    1324:	f7ff bf92 	b.w	124c <HardwareSerial::write9bit(unsigned long)>

00001328 <HardwareSerial::IRQHandler()>:
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    1328:	6902      	ldr	r2, [r0, #16]
    132a:	6953      	ldr	r3, [r2, #20]
    132c:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
{
    1330:	b570      	push	{r4, r5, r6, lr}
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    1332:	4615      	mov	r5, r2
    1334:	d047      	beq.n	13c6 <HardwareSerial::IRQHandler()+0x9e>
		uint8_t avail = (port->WATER >> 24) & 0x7;
    1336:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		if (avail) {
    1338:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
		uint8_t avail = (port->WATER >> 24) & 0x7;
    133c:	f3c3 6e02 	ubfx	lr, r3, #24, #3
		if (avail) {
    1340:	d03e      	beq.n	13c0 <HardwareSerial::IRQHandler()+0x98>
			head = rx_buffer_head_;
    1342:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
			tail = rx_buffer_tail_;
    1346:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
			head = rx_buffer_head_;
    134a:	b2a4      	uxth	r4, r4
			tail = rx_buffer_tail_;
    134c:	b2ad      	uxth	r5, r5
    134e:	e008      	b.n	1362 <HardwareSerial::IRQHandler()+0x3a>
						rx_buffer_[head] = n;
    1350:	6a02      	ldr	r2, [r0, #32]
    1352:	f802 c003 	strb.w	ip, [r2, r3]
    1356:	6902      	ldr	r2, [r0, #16]
			} while (--avail > 0) ;
    1358:	f10e 33ff 	add.w	r3, lr, #4294967295
    135c:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    1360:	d01e      	beq.n	13a0 <HardwareSerial::IRQHandler()+0x78>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    1362:	69d1      	ldr	r1, [r2, #28]
				newhead = head + 1;
    1364:	1c63      	adds	r3, r4, #1
				if (newhead != rx_buffer_tail_) {
    1366:	f8b0 c04c 	ldrh.w	ip, [r0, #76]	; 0x4c
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    136a:	6b86      	ldr	r6, [r0, #56]	; 0x38
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    136c:	f3c1 0109 	ubfx	r1, r1, #0, #10
				if (newhead != rx_buffer_tail_) {
    1370:	fa1f fc8c 	uxth.w	ip, ip
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    1374:	429e      	cmp	r6, r3
    1376:	bf98      	it	ls
    1378:	2300      	movls	r3, #0
				if (newhead != rx_buffer_tail_) {
    137a:	459c      	cmp	ip, r3
    137c:	d0ec      	beq.n	1358 <HardwareSerial::IRQHandler()+0x30>
					if (newhead < rx_buffer_size_) {
    137e:	6b02      	ldr	r2, [r0, #48]	; 0x30
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    1380:	fa5f fc81 	uxtb.w	ip, r1
    1384:	461c      	mov	r4, r3
					if (newhead < rx_buffer_size_) {
    1386:	429a      	cmp	r2, r3
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    1388:	eba3 0602 	sub.w	r6, r3, r2
					if (newhead < rx_buffer_size_) {
    138c:	d8e0      	bhi.n	1350 <HardwareSerial::IRQHandler()+0x28>
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    138e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1390:	f803 c006 	strb.w	ip, [r3, r6]
			} while (--avail > 0) ;
    1394:	f10e 33ff 	add.w	r3, lr, #4294967295
    1398:	6902      	ldr	r2, [r0, #16]
    139a:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    139e:	d1e0      	bne.n	1362 <HardwareSerial::IRQHandler()+0x3a>
			rx_buffer_head_ = head;
    13a0:	b2a3      	uxth	r3, r4
    13a2:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    13a6:	6d83      	ldr	r3, [r0, #88]	; 0x58
    13a8:	2b00      	cmp	r3, #0
    13aa:	d05a      	beq.n	1462 <HardwareSerial::IRQHandler()+0x13a>
				if (head >= tail) avail = head - tail;
    13ac:	42ac      	cmp	r4, r5
    13ae:	d35d      	bcc.n	146c <HardwareSerial::IRQHandler()+0x144>
    13b0:	1b64      	subs	r4, r4, r5
				if (avail >= rts_high_watermark_) rts_deassert();
    13b2:	6c01      	ldr	r1, [r0, #64]	; 0x40
    13b4:	42a1      	cmp	r1, r4
    13b6:	d854      	bhi.n	1462 <HardwareSerial::IRQHandler()+0x13a>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    13b8:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
		if (port->STAT & LPUART_STAT_IDLE) {
    13ba:	4615      	mov	r5, r2
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    13bc:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		if (port->STAT & LPUART_STAT_IDLE) {
    13c0:	6953      	ldr	r3, [r2, #20]
    13c2:	02dc      	lsls	r4, r3, #11
    13c4:	d448      	bmi.n	1458 <HardwareSerial::IRQHandler()+0x130>
	ctrl = port->CTRL;
    13c6:	6996      	ldr	r6, [r2, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    13c8:	0231      	lsls	r1, r6, #8
    13ca:	d529      	bpl.n	1420 <HardwareSerial::IRQHandler()+0xf8>
    13cc:	6953      	ldr	r3, [r2, #20]
    13ce:	021b      	lsls	r3, r3, #8
    13d0:	d526      	bpl.n	1420 <HardwareSerial::IRQHandler()+0xf8>
		head = tx_buffer_head_;
    13d2:	f8b0 c046 	ldrh.w	ip, [r0, #70]	; 0x46
		tail = tx_buffer_tail_;
    13d6:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
		head = tx_buffer_head_;
    13da:	fa1f fc8c 	uxth.w	ip, ip
		tail = tx_buffer_tail_;
    13de:	b29b      	uxth	r3, r3
    13e0:	e006      	b.n	13f0 <HardwareSerial::IRQHandler()+0xc8>
				n = tx_buffer_[tail];
    13e2:	69c1      	ldr	r1, [r0, #28]
    13e4:	5cc9      	ldrb	r1, [r1, r3]
    13e6:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    13e8:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    13ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    13ec:	054c      	lsls	r4, r1, #21
    13ee:	d412      	bmi.n	1416 <HardwareSerial::IRQHandler()+0xee>
			if (head == tail) break;
    13f0:	4563      	cmp	r3, ip
    13f2:	d03f      	beq.n	1474 <HardwareSerial::IRQHandler()+0x14c>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    13f4:	6b44      	ldr	r4, [r0, #52]	; 0x34
    13f6:	3301      	adds	r3, #1
			if (tail < tx_buffer_size_) {
    13f8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			if (++tail >= tx_buffer_total_size_) tail = 0;
    13fa:	429c      	cmp	r4, r3
    13fc:	bf98      	it	ls
    13fe:	2300      	movls	r3, #0
			if (tail < tx_buffer_size_) {
    1400:	4299      	cmp	r1, r3
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    1402:	eba3 0401 	sub.w	r4, r3, r1
			if (tail < tx_buffer_size_) {
    1406:	d8ec      	bhi.n	13e2 <HardwareSerial::IRQHandler()+0xba>
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    1408:	6a81      	ldr	r1, [r0, #40]	; 0x28
    140a:	5d09      	ldrb	r1, [r1, r4]
    140c:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    140e:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    1410:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    1412:	054c      	lsls	r4, r1, #21
    1414:	d5ec      	bpl.n	13f0 <HardwareSerial::IRQHandler()+0xc8>
		tx_buffer_tail_ = tail;
    1416:	b299      	uxth	r1, r3
		if (head == tail) {
    1418:	4563      	cmp	r3, ip
		tx_buffer_tail_ = tail;
    141a:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
		if (head == tail) {
    141e:	d02c      	beq.n	147a <HardwareSerial::IRQHandler()+0x152>
	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    1420:	0271      	lsls	r1, r6, #9
    1422:	d518      	bpl.n	1456 <HardwareSerial::IRQHandler()+0x12e>
    1424:	6953      	ldr	r3, [r2, #20]
    1426:	025b      	lsls	r3, r3, #9
    1428:	d515      	bpl.n	1456 <HardwareSerial::IRQHandler()+0x12e>
		transmitting_ = 0;
    142a:	2200      	movs	r2, #0
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    142c:	6d03      	ldr	r3, [r0, #80]	; 0x50
		transmitting_ = 0;
    142e:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    1432:	b113      	cbz	r3, 143a <HardwareSerial::IRQHandler()+0x112>
    1434:	6d42      	ldr	r2, [r0, #84]	; 0x54
    1436:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		if(half_duplex_mode_) {		
    143a:	7e83      	ldrb	r3, [r0, #26]
    143c:	b13b      	cbz	r3, 144e <HardwareSerial::IRQHandler()+0x126>
			__disable_irq();
    143e:	b672      	cpsid	i
		    port->CTRL &= ~LPUART_CTRL_TXDIR;
    1440:	6902      	ldr	r2, [r0, #16]
    1442:	6993      	ldr	r3, [r2, #24]
    1444:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    1448:	6193      	str	r3, [r2, #24]
			__enable_irq();
    144a:	b662      	cpsie	i
		port->CTRL &= ~LPUART_CTRL_TCIE;
    144c:	6905      	ldr	r5, [r0, #16]
    144e:	69ab      	ldr	r3, [r5, #24]
    1450:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    1454:	61ab      	str	r3, [r5, #24]
}
    1456:	bd70      	pop	{r4, r5, r6, pc}
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    1458:	6953      	ldr	r3, [r2, #20]
    145a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    145e:	6153      	str	r3, [r2, #20]
    1460:	e7b1      	b.n	13c6 <HardwareSerial::IRQHandler()+0x9e>
		if (port->STAT & LPUART_STAT_IDLE) {
    1462:	6953      	ldr	r3, [r2, #20]
    1464:	4615      	mov	r5, r2
    1466:	02dc      	lsls	r4, r3, #11
    1468:	d5ad      	bpl.n	13c6 <HardwareSerial::IRQHandler()+0x9e>
    146a:	e7f5      	b.n	1458 <HardwareSerial::IRQHandler()+0x130>
				else avail = rx_buffer_total_size_ + head - tail;
    146c:	6b81      	ldr	r1, [r0, #56]	; 0x38
    146e:	1b49      	subs	r1, r1, r5
    1470:	440c      	add	r4, r1
    1472:	e79e      	b.n	13b2 <HardwareSerial::IRQHandler()+0x8a>
		tx_buffer_tail_ = tail;
    1474:	b29b      	uxth	r3, r3
    1476:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
			port->CTRL &= ~LPUART_CTRL_TIE; 
    147a:	6993      	ldr	r3, [r2, #24]
    147c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    1480:	6193      	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    1482:	6993      	ldr	r3, [r2, #24]
    1484:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    1488:	6193      	str	r3, [r2, #24]
    148a:	e7c9      	b.n	1420 <HardwareSerial::IRQHandler()+0xf8>

0000148c <IRQHandler_Serial1>:
	Serial1.IRQHandler();
    148c:	4801      	ldr	r0, [pc, #4]	; (1494 <IRQHandler_Serial1+0x8>)
    148e:	f7ff bf4b 	b.w	1328 <HardwareSerial::IRQHandler()>
    1492:	bf00      	nop
    1494:	20001cb4 	.word	0x20001cb4

00001498 <_GLOBAL__sub_I_IRQHandler_Serial1>:
{
	serial_phex(n >> 24);
	serial_phex(n >> 16);
	serial_phex(n >> 8);
	serial_phex(n);
}
    1498:	b410      	push	{r4}
	constexpr Print() : write_error(0) {}
    149a:	4b16      	ldr	r3, [pc, #88]	; (14f4 <_GLOBAL__sub_I_IRQHandler_Serial1+0x5c>)
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    149c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    14a0:	4815      	ldr	r0, [pc, #84]	; (14f8 <_GLOBAL__sub_I_IRQHandler_Serial1+0x60>)
    14a2:	2200      	movs	r2, #0
    14a4:	609c      	str	r4, [r3, #8]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    14a6:	2140      	movs	r1, #64	; 0x40
		port(myport), hardware(myhardware),
    14a8:	4c14      	ldr	r4, [pc, #80]	; (14fc <_GLOBAL__sub_I_IRQHandler_Serial1+0x64>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    14aa:	6018      	str	r0, [r3, #0]
		port(myport), hardware(myhardware),
    14ac:	4814      	ldr	r0, [pc, #80]	; (1500 <_GLOBAL__sub_I_IRQHandler_Serial1+0x68>)
    14ae:	611c      	str	r4, [r3, #16]
    14b0:	6158      	str	r0, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    14b2:	4c14      	ldr	r4, [pc, #80]	; (1504 <_GLOBAL__sub_I_IRQHandler_Serial1+0x6c>)
    14b4:	4814      	ldr	r0, [pc, #80]	; (1508 <_GLOBAL__sub_I_IRQHandler_Serial1+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    14b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    14ba:	731a      	strb	r2, [r3, #12]
    14bc:	831a      	strh	r2, [r3, #24]
    14be:	769a      	strb	r2, [r3, #26]
    14c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    14c4:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    14c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    14ca:	f85d 4b04 	ldr.w	r4, [sp], #4
    14ce:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    14d2:	605a      	str	r2, [r3, #4]
    14d4:	625a      	str	r2, [r3, #36]	; 0x24
    14d6:	629a      	str	r2, [r3, #40]	; 0x28
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    14d8:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    14da:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    14de:	e9c3 110b 	strd	r1, r1, [r3, #44]	; 0x2c
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    14e2:	e9c3 110d 	strd	r1, r1, [r3, #52]	; 0x34
    14e6:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
    14ea:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    14ee:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    14f2:	4770      	bx	lr
    14f4:	20001cb4 	.word	0x20001cb4
    14f8:	20000548 	.word	0x20000548
    14fc:	40198000 	.word	0x40198000
    1500:	20000378 	.word	0x20000378
    1504:	20002114 	.word	0x20002114
    1508:	20001f54 	.word	0x20001f54

0000150c <IRQHandler_Serial2>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial2()
{
	Serial2.IRQHandler();
    150c:	4801      	ldr	r0, [pc, #4]	; (1514 <IRQHandler_Serial2+0x8>)
    150e:	f7ff bf0b 	b.w	1328 <HardwareSerial::IRQHandler()>
    1512:	bf00      	nop
    1514:	20001d14 	.word	0x20001d14

00001518 <_GLOBAL__sub_I_IRQHandler_Serial2>:
	0, // No CTS
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART4_TRG_INPUT
};
HardwareSerial Serial2(&IMXRT_LPUART4, &UART4_Hardware, tx_buffer2, SERIAL2_TX_BUFFER_SIZE, 
	rx_buffer2,  SERIAL2_RX_BUFFER_SIZE);
    1518:	b410      	push	{r4}
    151a:	4b17      	ldr	r3, [pc, #92]	; (1578 <_GLOBAL__sub_I_IRQHandler_Serial2+0x60>)
    151c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    1520:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    1522:	2028      	movs	r0, #40	; 0x28
    1524:	609c      	str	r4, [r3, #8]
    1526:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    1528:	4c14      	ldr	r4, [pc, #80]	; (157c <_GLOBAL__sub_I_IRQHandler_Serial2+0x64>)
    152a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    152e:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    1530:	4c13      	ldr	r4, [pc, #76]	; (1580 <_GLOBAL__sub_I_IRQHandler_Serial2+0x68>)
    1532:	731a      	strb	r2, [r3, #12]
    1534:	611c      	str	r4, [r3, #16]
    1536:	4c13      	ldr	r4, [pc, #76]	; (1584 <_GLOBAL__sub_I_IRQHandler_Serial2+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    1538:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    153a:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    153c:	4c12      	ldr	r4, [pc, #72]	; (1588 <_GLOBAL__sub_I_IRQHandler_Serial2+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    153e:	769a      	strb	r2, [r3, #26]
    1540:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    1544:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    1546:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    154a:	f85d 4b04 	ldr.w	r4, [sp], #4
    154e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    1552:	605a      	str	r2, [r3, #4]
    1554:	625a      	str	r2, [r3, #36]	; 0x24
    1556:	641a      	str	r2, [r3, #64]	; 0x40
    1558:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    155c:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    1560:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    1564:	4809      	ldr	r0, [pc, #36]	; (158c <_GLOBAL__sub_I_IRQHandler_Serial2+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    1566:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    156a:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    156c:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    1570:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    1574:	4770      	bx	lr
    1576:	bf00      	nop
    1578:	20001d14 	.word	0x20001d14
    157c:	20000548 	.word	0x20000548
    1580:	40190000 	.word	0x40190000
    1584:	2000100c 	.word	0x2000100c
    1588:	20002154 	.word	0x20002154
    158c:	20001f94 	.word	0x20001f94

00001590 <IRQHandler_Serial3>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial3()
{
	Serial3.IRQHandler();
    1590:	4801      	ldr	r0, [pc, #4]	; (1598 <IRQHandler_Serial3+0x8>)
    1592:	f7ff bec9 	b.w	1328 <HardwareSerial::IRQHandler()>
    1596:	bf00      	nop
    1598:	20001d74 	.word	0x20001d74

0000159c <_GLOBAL__sub_I_IRQHandler_Serial3>:
	2, // page 473 
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART2_TRG_INPUT
};
HardwareSerial Serial3(&IMXRT_LPUART2, &UART2_Hardware,tx_buffer3, SERIAL3_TX_BUFFER_SIZE,
	rx_buffer3,  SERIAL3_RX_BUFFER_SIZE);
    159c:	b410      	push	{r4}
    159e:	4b17      	ldr	r3, [pc, #92]	; (15fc <_GLOBAL__sub_I_IRQHandler_Serial3+0x60>)
    15a0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    15a4:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    15a6:	2028      	movs	r0, #40	; 0x28
    15a8:	609c      	str	r4, [r3, #8]
    15aa:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    15ac:	4c14      	ldr	r4, [pc, #80]	; (1600 <_GLOBAL__sub_I_IRQHandler_Serial3+0x64>)
    15ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    15b2:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    15b4:	4c13      	ldr	r4, [pc, #76]	; (1604 <_GLOBAL__sub_I_IRQHandler_Serial3+0x68>)
    15b6:	731a      	strb	r2, [r3, #12]
    15b8:	611c      	str	r4, [r3, #16]
    15ba:	4c13      	ldr	r4, [pc, #76]	; (1608 <_GLOBAL__sub_I_IRQHandler_Serial3+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    15bc:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    15be:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    15c0:	4c12      	ldr	r4, [pc, #72]	; (160c <_GLOBAL__sub_I_IRQHandler_Serial3+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    15c2:	769a      	strb	r2, [r3, #26]
    15c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    15c8:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    15ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    15ce:	f85d 4b04 	ldr.w	r4, [sp], #4
    15d2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    15d6:	605a      	str	r2, [r3, #4]
    15d8:	625a      	str	r2, [r3, #36]	; 0x24
    15da:	641a      	str	r2, [r3, #64]	; 0x40
    15dc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    15e0:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    15e4:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    15e8:	4809      	ldr	r0, [pc, #36]	; (1610 <_GLOBAL__sub_I_IRQHandler_Serial3+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    15ea:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    15ee:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    15f0:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    15f4:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    15f8:	4770      	bx	lr
    15fa:	bf00      	nop
    15fc:	20001d74 	.word	0x20001d74
    1600:	20000548 	.word	0x20000548
    1604:	40188000 	.word	0x40188000
    1608:	20000f44 	.word	0x20000f44
    160c:	2000217c 	.word	0x2000217c
    1610:	20001fd4 	.word	0x20001fd4

00001614 <IRQHandler_Serial4>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial4()
{
	Serial4.IRQHandler();
    1614:	4801      	ldr	r0, [pc, #4]	; (161c <IRQHandler_Serial4+0x8>)
    1616:	f7ff be87 	b.w	1328 <HardwareSerial::IRQHandler()>
    161a:	bf00      	nop
    161c:	20001dd4 	.word	0x20001dd4

00001620 <_GLOBAL__sub_I_IRQHandler_Serial4>:
	0, // No CTS
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART3_TRG_INPUT
};
HardwareSerial Serial4(&IMXRT_LPUART3, &UART3_Hardware, tx_buffer4, SERIAL4_TX_BUFFER_SIZE,
	rx_buffer4,  SERIAL4_RX_BUFFER_SIZE);
    1620:	b410      	push	{r4}
    1622:	4b17      	ldr	r3, [pc, #92]	; (1680 <_GLOBAL__sub_I_IRQHandler_Serial4+0x60>)
    1624:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    1628:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    162a:	2028      	movs	r0, #40	; 0x28
    162c:	609c      	str	r4, [r3, #8]
    162e:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    1630:	4c14      	ldr	r4, [pc, #80]	; (1684 <_GLOBAL__sub_I_IRQHandler_Serial4+0x64>)
    1632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    1636:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    1638:	4c13      	ldr	r4, [pc, #76]	; (1688 <_GLOBAL__sub_I_IRQHandler_Serial4+0x68>)
    163a:	731a      	strb	r2, [r3, #12]
    163c:	611c      	str	r4, [r3, #16]
    163e:	4c13      	ldr	r4, [pc, #76]	; (168c <_GLOBAL__sub_I_IRQHandler_Serial4+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    1640:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    1642:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    1644:	4c12      	ldr	r4, [pc, #72]	; (1690 <_GLOBAL__sub_I_IRQHandler_Serial4+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    1646:	769a      	strb	r2, [r3, #26]
    1648:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    164c:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    164e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    1652:	f85d 4b04 	ldr.w	r4, [sp], #4
    1656:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    165a:	605a      	str	r2, [r3, #4]
    165c:	625a      	str	r2, [r3, #36]	; 0x24
    165e:	641a      	str	r2, [r3, #64]	; 0x40
    1660:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    1664:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    1668:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    166c:	4809      	ldr	r0, [pc, #36]	; (1694 <_GLOBAL__sub_I_IRQHandler_Serial4+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    166e:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    1672:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    1674:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    1678:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    167c:	4770      	bx	lr
    167e:	bf00      	nop
    1680:	20001dd4 	.word	0x20001dd4
    1684:	20000548 	.word	0x20000548
    1688:	4018c000 	.word	0x4018c000
    168c:	20000fa8 	.word	0x20000fa8
    1690:	200021a4 	.word	0x200021a4
    1694:	20002014 	.word	0x20002014

00001698 <IRQHandler_Serial5>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial5()
{
	Serial5.IRQHandler();
    1698:	4801      	ldr	r0, [pc, #4]	; (16a0 <IRQHandler_Serial5+0x8>)
    169a:	f7ff be45 	b.w	1328 <HardwareSerial::IRQHandler()>
    169e:	bf00      	nop
    16a0:	20001e34 	.word	0x20001e34

000016a4 <_GLOBAL__sub_I_IRQHandler_Serial5>:
	#endif
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART8_TRG_INPUT
};
HardwareSerial Serial5(&IMXRT_LPUART8, &UART8_Hardware, tx_buffer5, SERIAL5_TX_BUFFER_SIZE,
	rx_buffer5,  SERIAL5_RX_BUFFER_SIZE);
    16a4:	b410      	push	{r4}
    16a6:	4b17      	ldr	r3, [pc, #92]	; (1704 <_GLOBAL__sub_I_IRQHandler_Serial5+0x60>)
    16a8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    16ac:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    16ae:	2028      	movs	r0, #40	; 0x28
    16b0:	609c      	str	r4, [r3, #8]
    16b2:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    16b4:	4c14      	ldr	r4, [pc, #80]	; (1708 <_GLOBAL__sub_I_IRQHandler_Serial5+0x64>)
    16b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    16ba:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    16bc:	4c13      	ldr	r4, [pc, #76]	; (170c <_GLOBAL__sub_I_IRQHandler_Serial5+0x68>)
    16be:	731a      	strb	r2, [r3, #12]
    16c0:	611c      	str	r4, [r3, #16]
    16c2:	4c13      	ldr	r4, [pc, #76]	; (1710 <_GLOBAL__sub_I_IRQHandler_Serial5+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    16c4:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    16c6:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    16c8:	4c12      	ldr	r4, [pc, #72]	; (1714 <_GLOBAL__sub_I_IRQHandler_Serial5+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    16ca:	769a      	strb	r2, [r3, #26]
    16cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    16d0:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    16d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    16d6:	f85d 4b04 	ldr.w	r4, [sp], #4
    16da:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    16de:	605a      	str	r2, [r3, #4]
    16e0:	625a      	str	r2, [r3, #36]	; 0x24
    16e2:	641a      	str	r2, [r3, #64]	; 0x40
    16e4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    16e8:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    16ec:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    16f0:	4809      	ldr	r0, [pc, #36]	; (1718 <_GLOBAL__sub_I_IRQHandler_Serial5+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    16f2:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    16f6:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    16f8:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    16fc:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    1700:	4770      	bx	lr
    1702:	bf00      	nop
    1704:	20001e34 	.word	0x20001e34
    1708:	20000548 	.word	0x20000548
    170c:	401a0000 	.word	0x401a0000
    1710:	200010d4 	.word	0x200010d4
    1714:	200021cc 	.word	0x200021cc
    1718:	20002054 	.word	0x20002054

0000171c <IRQHandler_Serial6>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial6()
{
	Serial6.IRQHandler();
    171c:	4801      	ldr	r0, [pc, #4]	; (1724 <IRQHandler_Serial6+0x8>)
    171e:	f7ff be03 	b.w	1328 <HardwareSerial::IRQHandler()>
    1722:	bf00      	nop
    1724:	20001e94 	.word	0x20001e94

00001728 <_GLOBAL__sub_I_IRQHandler_Serial6>:
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART1_TRG_INPUT
};

HardwareSerial Serial6(&IMXRT_LPUART1, &UART1_Hardware, tx_buffer6, SERIAL6_TX_BUFFER_SIZE,
	rx_buffer6,  SERIAL6_RX_BUFFER_SIZE);
    1728:	b410      	push	{r4}
    172a:	4b17      	ldr	r3, [pc, #92]	; (1788 <_GLOBAL__sub_I_IRQHandler_Serial6+0x60>)
    172c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    1730:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    1732:	2028      	movs	r0, #40	; 0x28
    1734:	609c      	str	r4, [r3, #8]
    1736:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    1738:	4c14      	ldr	r4, [pc, #80]	; (178c <_GLOBAL__sub_I_IRQHandler_Serial6+0x64>)
    173a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    173e:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    1740:	4c13      	ldr	r4, [pc, #76]	; (1790 <_GLOBAL__sub_I_IRQHandler_Serial6+0x68>)
    1742:	731a      	strb	r2, [r3, #12]
    1744:	611c      	str	r4, [r3, #16]
    1746:	4c13      	ldr	r4, [pc, #76]	; (1794 <_GLOBAL__sub_I_IRQHandler_Serial6+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    1748:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    174a:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    174c:	4c12      	ldr	r4, [pc, #72]	; (1798 <_GLOBAL__sub_I_IRQHandler_Serial6+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    174e:	769a      	strb	r2, [r3, #26]
    1750:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    1754:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    1756:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    175a:	f85d 4b04 	ldr.w	r4, [sp], #4
    175e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    1762:	605a      	str	r2, [r3, #4]
    1764:	625a      	str	r2, [r3, #36]	; 0x24
    1766:	641a      	str	r2, [r3, #64]	; 0x40
    1768:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    176c:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    1770:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    1774:	4809      	ldr	r0, [pc, #36]	; (179c <_GLOBAL__sub_I_IRQHandler_Serial6+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    1776:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    177a:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    177c:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    1780:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    1784:	4770      	bx	lr
    1786:	bf00      	nop
    1788:	20001e94 	.word	0x20001e94
    178c:	20000548 	.word	0x20000548
    1790:	40184000 	.word	0x40184000
    1794:	20000ee0 	.word	0x20000ee0
    1798:	200021f4 	.word	0x200021f4
    179c:	20002094 	.word	0x20002094

000017a0 <IRQHandler_Serial7>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial7()
{
	Serial7.IRQHandler();
    17a0:	4801      	ldr	r0, [pc, #4]	; (17a8 <IRQHandler_Serial7+0x8>)
    17a2:	f7ff bdc1 	b.w	1328 <HardwareSerial::IRQHandler()>
    17a6:	bf00      	nop
    17a8:	20001ef4 	.word	0x20001ef4

000017ac <_GLOBAL__sub_I_IRQHandler_Serial7>:
	0, // No CTS
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART7_TRG_INPUT
};
HardwareSerial Serial7(&IMXRT_LPUART7, &UART7_Hardware, tx_buffer7, SERIAL7_TX_BUFFER_SIZE,
	rx_buffer7,  SERIAL7_RX_BUFFER_SIZE);
    17ac:	b410      	push	{r4}
    17ae:	4b17      	ldr	r3, [pc, #92]	; (180c <_GLOBAL__sub_I_IRQHandler_Serial7+0x60>)
    17b0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    17b4:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    17b6:	2028      	movs	r0, #40	; 0x28
    17b8:	609c      	str	r4, [r3, #8]
    17ba:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    17bc:	4c14      	ldr	r4, [pc, #80]	; (1810 <_GLOBAL__sub_I_IRQHandler_Serial7+0x64>)
    17be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    17c2:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    17c4:	4c13      	ldr	r4, [pc, #76]	; (1814 <_GLOBAL__sub_I_IRQHandler_Serial7+0x68>)
    17c6:	731a      	strb	r2, [r3, #12]
    17c8:	611c      	str	r4, [r3, #16]
    17ca:	4c13      	ldr	r4, [pc, #76]	; (1818 <_GLOBAL__sub_I_IRQHandler_Serial7+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    17cc:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    17ce:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    17d0:	4c12      	ldr	r4, [pc, #72]	; (181c <_GLOBAL__sub_I_IRQHandler_Serial7+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    17d2:	769a      	strb	r2, [r3, #26]
    17d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    17d8:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    17da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    17de:	f85d 4b04 	ldr.w	r4, [sp], #4
    17e2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    17e6:	605a      	str	r2, [r3, #4]
    17e8:	625a      	str	r2, [r3, #36]	; 0x24
    17ea:	641a      	str	r2, [r3, #64]	; 0x40
    17ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    17f0:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    17f4:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    17f8:	4809      	ldr	r0, [pc, #36]	; (1820 <_GLOBAL__sub_I_IRQHandler_Serial7+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    17fa:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    17fe:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    1800:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    1804:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    1808:	4770      	bx	lr
    180a:	bf00      	nop
    180c:	20001ef4 	.word	0x20001ef4
    1810:	20000548 	.word	0x20000548
    1814:	4019c000 	.word	0x4019c000
    1818:	20001070 	.word	0x20001070
    181c:	2000221c 	.word	0x2000221c
    1820:	200020d4 	.word	0x200020d4

00001824 <usb_serial_class::write(unsigned char)>:
    1824:	4608      	mov	r0, r1
    1826:	f001 be95 	b.w	3554 <usb_serial_putchar>
    182a:	bf00      	nop

0000182c <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    182c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
    1830:	460c      	mov	r4, r1
    1832:	b1d1      	cbz	r1, 186a <Print::write(unsigned char const*, unsigned int)+0x3e>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    1834:	b1ea      	cbz	r2, 1872 <Print::write(unsigned char const*, unsigned int)+0x46>
    1836:	4680      	mov	r8, r0
    1838:	188e      	adds	r6, r1, r2
	size_t count = 0;
    183a:	2500      	movs	r5, #0
    183c:	4f0e      	ldr	r7, [pc, #56]	; (1878 <Print::write(unsigned char const*, unsigned int)+0x4c>)
    183e:	e004      	b.n	184a <Print::write(unsigned char const*, unsigned int)+0x1e>
    1840:	f001 fe88 	bl	3554 <usb_serial_putchar>
	while (size--) count += write(*buffer++);
    1844:	42b4      	cmp	r4, r6
    1846:	4405      	add	r5, r0
    1848:	d00c      	beq.n	1864 <Print::write(unsigned char const*, unsigned int)+0x38>
    184a:	f8d8 3000 	ldr.w	r3, [r8]
    184e:	f814 0b01 	ldrb.w	r0, [r4], #1
    1852:	681b      	ldr	r3, [r3, #0]
    1854:	42bb      	cmp	r3, r7
    1856:	d0f3      	beq.n	1840 <Print::write(unsigned char const*, unsigned int)+0x14>
    1858:	4601      	mov	r1, r0
    185a:	4640      	mov	r0, r8
    185c:	4798      	blx	r3
    185e:	42b4      	cmp	r4, r6
    1860:	4405      	add	r5, r0
    1862:	d1f2      	bne.n	184a <Print::write(unsigned char const*, unsigned int)+0x1e>
	return count;
}
    1864:	4628      	mov	r0, r5
    1866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    186a:	460d      	mov	r5, r1
}
    186c:	4628      	mov	r0, r5
    186e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    1872:	4615      	mov	r5, r2
    1874:	e7f6      	b.n	1864 <Print::write(unsigned char const*, unsigned int)+0x38>
    1876:	bf00      	nop
    1878:	00001825 	.word	0x00001825

0000187c <Print::println()>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    187c:	b500      	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    187e:	6803      	ldr	r3, [r0, #0]
{
    1880:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    1882:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    1886:	2202      	movs	r2, #2
    1888:	a901      	add	r1, sp, #4
    188a:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    188c:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    1890:	4798      	blx	r3
}
    1892:	b003      	add	sp, #12
    1894:	f85d fb04 	ldr.w	pc, [sp], #4

00001898 <_write>:
extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	if (file >= 0 && file <= 2) file = (int)&Serial;
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    1898:	4b05      	ldr	r3, [pc, #20]	; (18b0 <_write+0x18>)
    189a:	2802      	cmp	r0, #2
    189c:	bf88      	it	hi
    189e:	4603      	movhi	r3, r0
{
    18a0:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    18a2:	681c      	ldr	r4, [r3, #0]
    18a4:	4618      	mov	r0, r3
    18a6:	6863      	ldr	r3, [r4, #4]
}
    18a8:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    18ac:	4718      	bx	r3
    18ae:	bf00      	nop
    18b0:	20000ed0 	.word	0x20000ed0

000018b4 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    18b4:	b40e      	push	{r1, r2, r3}
    18b6:	b500      	push	{lr}
    18b8:	b082      	sub	sp, #8
    18ba:	aa03      	add	r2, sp, #12
    18bc:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    18c0:	9201      	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	va_end(ap);
	return 0;  // TODO: make this work with -std=c++0x
#else
	int retval = vdprintf((int)this, format, ap);
    18c2:	f002 fdbb 	bl	443c <vdprintf>
	va_end(ap);
	return retval;
#endif
}
    18c6:	b002      	add	sp, #8
    18c8:	f85d eb04 	ldr.w	lr, [sp], #4
    18cc:	b003      	add	sp, #12
    18ce:	4770      	bx	lr

000018d0 <String::String(String const&)>:
String::String(const String &value)
    18d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (this == &rhs) return *this;
    18d2:	4288      	cmp	r0, r1
	buffer = NULL;
    18d4:	f04f 0500 	mov.w	r5, #0
String::String(const String &value)
    18d8:	4604      	mov	r4, r0
	len = 0;
    18da:	6085      	str	r5, [r0, #8]
	flags = 0;
    18dc:	7305      	strb	r5, [r0, #12]
	capacity = 0;
    18de:	e9c0 5500 	strd	r5, r5, [r0]
	if (this == &rhs) return *this;
    18e2:	d002      	beq.n	18ea <String::String(String const&)+0x1a>
    18e4:	688e      	ldr	r6, [r1, #8]
	return copy(rhs.buffer, rhs.len);
    18e6:	680f      	ldr	r7, [r1, #0]
	if (length == 0) {
    18e8:	b90e      	cbnz	r6, 18ee <String::String(String const&)+0x1e>
}
    18ea:	4620      	mov	r0, r4
    18ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    18ee:	1c70      	adds	r0, r6, #1
    18f0:	f001 ff8a 	bl	3808 <malloc>
	if (newbuffer) {
    18f4:	2800      	cmp	r0, #0
    18f6:	d0f8      	beq.n	18ea <String::String(String const&)+0x1a>
	strcpy(buffer, cstr);
    18f8:	4639      	mov	r1, r7
		if (len == 0) buffer[0] = 0;
    18fa:	7005      	strb	r5, [r0, #0]
		buffer = newbuffer;
    18fc:	6020      	str	r0, [r4, #0]
	len = length;
    18fe:	e9c4 6601 	strd	r6, r6, [r4, #4]
	strcpy(buffer, cstr);
    1902:	f002 ff79 	bl	47f8 <strcpy>
}
    1906:	4620      	mov	r0, r4
    1908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    190a:	bf00      	nop

0000190c <String::~String()>:
String::~String()
    190c:	b510      	push	{r4, lr}
    190e:	4604      	mov	r4, r0
	free(buffer);
    1910:	6800      	ldr	r0, [r0, #0]
    1912:	f001 ff81 	bl	3818 <free>
}
    1916:	4620      	mov	r0, r4
    1918:	bd10      	pop	{r4, pc}
    191a:	bf00      	nop

0000191c <String::copy(char const*, unsigned int)>:
{
    191c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    191e:	4604      	mov	r4, r0
	if (length == 0) {
    1920:	4615      	mov	r5, r2
    1922:	b932      	cbnz	r2, 1932 <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    1924:	6803      	ldr	r3, [r0, #0]
    1926:	b103      	cbz	r3, 192a <String::copy(char const*, unsigned int)+0xe>
    1928:	701a      	strb	r2, [r3, #0]
		len = 0;
    192a:	2300      	movs	r3, #0
}
    192c:	4620      	mov	r0, r4
		len = 0;
    192e:	60a3      	str	r3, [r4, #8]
}
    1930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (capacity >= size) return 1;
    1932:	6843      	ldr	r3, [r0, #4]
    1934:	460e      	mov	r6, r1
    1936:	429a      	cmp	r2, r3
    1938:	d91c      	bls.n	1974 <String::copy(char const*, unsigned int)+0x58>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    193a:	1c51      	adds	r1, r2, #1
    193c:	6800      	ldr	r0, [r0, #0]
    193e:	f002 fa2f 	bl	3da0 <realloc>
	if (newbuffer) {
    1942:	4607      	mov	r7, r0
    1944:	b160      	cbz	r0, 1960 <String::copy(char const*, unsigned int)+0x44>
		if (len == 0) buffer[0] = 0;
    1946:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    1948:	e9c4 0500 	strd	r0, r5, [r4]
		if (len == 0) buffer[0] = 0;
    194c:	b90b      	cbnz	r3, 1952 <String::copy(char const*, unsigned int)+0x36>
    194e:	7003      	strb	r3, [r0, #0]
	strcpy(buffer, cstr);
    1950:	6827      	ldr	r7, [r4, #0]
    1952:	4631      	mov	r1, r6
    1954:	4638      	mov	r0, r7
	len = length;
    1956:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    1958:	f002 ff4e 	bl	47f8 <strcpy>
}
    195c:	4620      	mov	r0, r4
    195e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) {
    1960:	6820      	ldr	r0, [r4, #0]
    1962:	b110      	cbz	r0, 196a <String::copy(char const*, unsigned int)+0x4e>
			free(buffer);
    1964:	f001 ff58 	bl	3818 <free>
			buffer = NULL;
    1968:	6027      	str	r7, [r4, #0]
		len = capacity = 0;
    196a:	2300      	movs	r3, #0
}
    196c:	4620      	mov	r0, r4
		len = capacity = 0;
    196e:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
    1972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) buffer[0] = 0;
    1974:	6807      	ldr	r7, [r0, #0]
	strcpy(buffer, cstr);
    1976:	4631      	mov	r1, r6
	len = length;
    1978:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    197a:	4638      	mov	r0, r7
    197c:	f002 ff3c 	bl	47f8 <strcpy>
	return *this;
    1980:	e7ec      	b.n	195c <String::copy(char const*, unsigned int)+0x40>
    1982:	bf00      	nop

00001984 <String::String(char const*)>:
String::String(const char *cstr)
    1984:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
    1986:	2300      	movs	r3, #0
String::String(const char *cstr)
    1988:	4604      	mov	r4, r0
	capacity = 0;
    198a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
    198e:	6083      	str	r3, [r0, #8]
	flags = 0;
    1990:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
    1992:	b141      	cbz	r1, 19a6 <String::String(char const*)+0x22>
    1994:	460d      	mov	r5, r1
    1996:	4608      	mov	r0, r1
    1998:	f002 ff92 	bl	48c0 <strlen>
    199c:	4602      	mov	r2, r0
    199e:	4629      	mov	r1, r5
    19a0:	4620      	mov	r0, r4
    19a2:	f7ff ffbb 	bl	191c <String::copy(char const*, unsigned int)>
}
    19a6:	4620      	mov	r0, r4
    19a8:	bd38      	pop	{r3, r4, r5, pc}
    19aa:	bf00      	nop

000019ac <String::operator=(char const*)>:
{
    19ac:	b538      	push	{r3, r4, r5, lr}
    19ae:	4605      	mov	r5, r0
	if (cstr) {
    19b0:	460c      	mov	r4, r1
    19b2:	b149      	cbz	r1, 19c8 <String::operator=(char const*)+0x1c>
		copy(cstr, strlen(cstr));
    19b4:	4608      	mov	r0, r1
    19b6:	f002 ff83 	bl	48c0 <strlen>
    19ba:	4621      	mov	r1, r4
    19bc:	4602      	mov	r2, r0
    19be:	4628      	mov	r0, r5
    19c0:	f7ff ffac 	bl	191c <String::copy(char const*, unsigned int)>
}
    19c4:	4628      	mov	r0, r5
    19c6:	bd38      	pop	{r3, r4, r5, pc}
    19c8:	4628      	mov	r0, r5
		len = 0;
    19ca:	60a9      	str	r1, [r5, #8]
}
    19cc:	bd38      	pop	{r3, r4, r5, pc}
    19ce:	bf00      	nop

000019d0 <analogRead>:
	if (pin > sizeof(pin_to_channel)) return 0;
    19d0:	281c      	cmp	r0, #28
    19d2:	d839      	bhi.n	1a48 <analogRead+0x78>
{
    19d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (calibrating) wait_for_cal();
    19d6:	4f1d      	ldr	r7, [pc, #116]	; (1a4c <analogRead+0x7c>)
    19d8:	4604      	mov	r4, r0
    19da:	783b      	ldrb	r3, [r7, #0]
    19dc:	b993      	cbnz	r3, 1a04 <analogRead+0x34>
	uint8_t ch = pin_to_channel[pin];
    19de:	4b1c      	ldr	r3, [pc, #112]	; (1a50 <analogRead+0x80>)
    19e0:	5d1b      	ldrb	r3, [r3, r4]
	if (ch == 255) return 0;
    19e2:	2bff      	cmp	r3, #255	; 0xff
    19e4:	d01f      	beq.n	1a26 <analogRead+0x56>
	if(!(ch & 0x80)) {
    19e6:	061c      	lsls	r4, r3, #24
    19e8:	d41f      	bmi.n	1a2a <analogRead+0x5a>
		ADC1_HC0 = ch;
    19ea:	4c1a      	ldr	r4, [pc, #104]	; (1a54 <analogRead+0x84>)
    19ec:	6023      	str	r3, [r4, #0]
		while (!(ADC1_HS & ADC_HS_COCO0)) {
    19ee:	6a23      	ldr	r3, [r4, #32]
    19f0:	07d8      	lsls	r0, r3, #31
    19f2:	d404      	bmi.n	19fe <analogRead+0x2e>
			yield(); // TODO: what happens if yield-called code uses analogRead()
    19f4:	f001 fe42 	bl	367c <yield>
		while (!(ADC1_HS & ADC_HS_COCO0)) {
    19f8:	6a23      	ldr	r3, [r4, #32]
    19fa:	07d9      	lsls	r1, r3, #31
    19fc:	d5fa      	bpl.n	19f4 <analogRead+0x24>
		return ADC1_R0;
    19fe:	4b15      	ldr	r3, [pc, #84]	; (1a54 <analogRead+0x84>)
    1a00:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    1a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	while ((ADC1_GC & ADC_GC_CAL) || (ADC2_GC & ADC_GC_CAL)) {
    1a04:	4d13      	ldr	r5, [pc, #76]	; (1a54 <analogRead+0x84>)
    1a06:	4e14      	ldr	r6, [pc, #80]	; (1a58 <analogRead+0x88>)
    1a08:	e001      	b.n	1a0e <analogRead+0x3e>
		yield();
    1a0a:	f001 fe37 	bl	367c <yield>
	while ((ADC1_GC & ADC_GC_CAL) || (ADC2_GC & ADC_GC_CAL)) {
    1a0e:	6cab      	ldr	r3, [r5, #72]	; 0x48
    1a10:	061b      	lsls	r3, r3, #24
    1a12:	d4fa      	bmi.n	1a0a <analogRead+0x3a>
    1a14:	6cb3      	ldr	r3, [r6, #72]	; 0x48
    1a16:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    1a1a:	d1f6      	bne.n	1a0a <analogRead+0x3a>
	calibrating = 0;
    1a1c:	703b      	strb	r3, [r7, #0]
	uint8_t ch = pin_to_channel[pin];
    1a1e:	4b0c      	ldr	r3, [pc, #48]	; (1a50 <analogRead+0x80>)
    1a20:	5d1b      	ldrb	r3, [r3, r4]
	if (ch == 255) return 0;
    1a22:	2bff      	cmp	r3, #255	; 0xff
    1a24:	d1df      	bne.n	19e6 <analogRead+0x16>
	if (pin > sizeof(pin_to_channel)) return 0;
    1a26:	2000      	movs	r0, #0
}
    1a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ADC2_HC0 = ch & 0x7f;
    1a2a:	4c0b      	ldr	r4, [pc, #44]	; (1a58 <analogRead+0x88>)
    1a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1a30:	6023      	str	r3, [r4, #0]
		while (!(ADC2_HS & ADC_HS_COCO0)) {
    1a32:	6a23      	ldr	r3, [r4, #32]
    1a34:	07da      	lsls	r2, r3, #31
    1a36:	d404      	bmi.n	1a42 <analogRead+0x72>
			yield(); // TODO: what happens if yield-called code uses analogRead()
    1a38:	f001 fe20 	bl	367c <yield>
		while (!(ADC2_HS & ADC_HS_COCO0)) {
    1a3c:	6a23      	ldr	r3, [r4, #32]
    1a3e:	07db      	lsls	r3, r3, #31
    1a40:	d5fa      	bpl.n	1a38 <analogRead+0x68>
		return ADC2_R0;
    1a42:	4b05      	ldr	r3, [pc, #20]	; (1a58 <analogRead+0x88>)
    1a44:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    1a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (pin > sizeof(pin_to_channel)) return 0;
    1a48:	2000      	movs	r0, #0
}
    1a4a:	4770      	bx	lr
    1a4c:	200026ad 	.word	0x200026ad
    1a50:	20000c00 	.word	0x20000c00
    1a54:	400c4000 	.word	0x400c4000
    1a58:	400c8000 	.word	0x400c8000

00001a5c <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    1a5c:	49a2      	ldr	r1, [pc, #648]	; (1ce8 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    1a5e:	4ba3      	ldr	r3, [pc, #652]	; (1cec <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    1a60:	4288      	cmp	r0, r1
{
    1a62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    1a66:	4ca2      	ldr	r4, [pc, #648]	; (1cf0 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    1a68:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    1a6a:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    1a6c:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    1a70:	d91b      	bls.n	1aaa <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    1a72:	4ba0      	ldr	r3, [pc, #640]	; (1cf4 <set_arm_clock+0x298>)
    1a74:	4298      	cmp	r0, r3
    1a76:	f240 8102 	bls.w	1c7e <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    1a7a:	1ac3      	subs	r3, r0, r3
    1a7c:	499e      	ldr	r1, [pc, #632]	; (1cf8 <set_arm_clock+0x29c>)
    1a7e:	0a1b      	lsrs	r3, r3, #8
    1a80:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1a84:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    1a88:	09db      	lsrs	r3, r3, #7
    1a8a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1a8e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1a92:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1a96:	428b      	cmp	r3, r1
    1a98:	bf28      	it	cs
    1a9a:	460b      	movcs	r3, r1
    1a9c:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    1aa0:	4b96      	ldr	r3, [pc, #600]	; (1cfc <set_arm_clock+0x2a0>)
    1aa2:	fba3 3707 	umull	r3, r7, r3, r7
    1aa6:	08ff      	lsrs	r7, r7, #3
    1aa8:	e004      	b.n	1ab4 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    1aaa:	4f95      	ldr	r7, [pc, #596]	; (1d00 <set_arm_clock+0x2a4>)
    1aac:	42b8      	cmp	r0, r7
    1aae:	bf8c      	ite	hi
    1ab0:	270e      	movhi	r7, #14
    1ab2:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1ab4:	498d      	ldr	r1, [pc, #564]	; (1cec <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1ab6:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1aba:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1abe:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1ac0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    1ac4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1ac8:	d20c      	bcs.n	1ae4 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    1aca:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    1ace:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    1ad2:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    1ad6:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1ada:	680b      	ldr	r3, [r1, #0]
    1adc:	2b00      	cmp	r3, #0
    1ade:	dafc      	bge.n	1ada <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    1ae0:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    1ae4:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    1ae8:	d124      	bne.n	1b34 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    1aea:	4986      	ldr	r1, [pc, #536]	; (1d04 <set_arm_clock+0x2a8>)
    1aec:	690c      	ldr	r4, [r1, #16]
    1aee:	4986      	ldr	r1, [pc, #536]	; (1d08 <set_arm_clock+0x2ac>)
    1af0:	43a1      	bics	r1, r4
    1af2:	f000 80ea 	beq.w	1cca <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    1af6:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    1afa:	4634      	mov	r4, r6
    1afc:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    1b00:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    1b04:	d004      	beq.n	1b10 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    1b06:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    1b0a:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    1b0c:	4b77      	ldr	r3, [pc, #476]	; (1cec <set_arm_clock+0x290>)
    1b0e:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    1b10:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    1b14:	d007      	beq.n	1b26 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    1b16:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    1b1a:	4974      	ldr	r1, [pc, #464]	; (1cec <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    1b1c:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    1b1e:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    1b20:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    1b22:	071a      	lsls	r2, r3, #28
    1b24:	d4fc      	bmi.n	1b20 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    1b26:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    1b2a:	4a70      	ldr	r2, [pc, #448]	; (1cec <set_arm_clock+0x290>)
    1b2c:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    1b2e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1b30:	069b      	lsls	r3, r3, #26
    1b32:	d4fc      	bmi.n	1b2e <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    1b34:	4c75      	ldr	r4, [pc, #468]	; (1d0c <set_arm_clock+0x2b0>)
    1b36:	42a0      	cmp	r0, r4
    1b38:	f200 80ce 	bhi.w	1cd8 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    1b3c:	f04f 0c01 	mov.w	ip, #1
    1b40:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    1b42:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    1b44:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    1b48:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    1b4c:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    1b50:	42a2      	cmp	r2, r4
    1b52:	d818      	bhi.n	1b86 <set_arm_clock+0x12a>
		if (div_arm < 8) {
    1b54:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    1b58:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    1b5c:	f040 808d 	bne.w	1c7a <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    1b60:	f1bc 0f04 	cmp.w	ip, #4
    1b64:	f200 8091 	bhi.w	1c8a <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    1b68:	180a      	adds	r2, r1, r0
    1b6a:	42a2      	cmp	r2, r4
    1b6c:	f200 80a4 	bhi.w	1cb8 <set_arm_clock+0x25c>
    1b70:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    1b74:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    1b76:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    1b7a:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    1b7e:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    1b82:	42a2      	cmp	r2, r4
    1b84:	d9e6      	bls.n	1b54 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    1b86:	f10c 31ff 	add.w	r1, ip, #4294967295
    1b8a:	028c      	lsls	r4, r1, #10
    1b8c:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    1b90:	485f      	ldr	r0, [pc, #380]	; (1d10 <set_arm_clock+0x2b4>)
    1b92:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    1b94:	4a5f      	ldr	r2, [pc, #380]	; (1d14 <set_arm_clock+0x2b8>)
    1b96:	4290      	cmp	r0, r2
    1b98:	d97f      	bls.n	1c9a <set_arm_clock+0x23e>
    1b9a:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 1d40 <set_arm_clock+0x2e4>
    1b9e:	226c      	movs	r2, #108	; 0x6c
    1ba0:	485d      	ldr	r0, [pc, #372]	; (1d18 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    1ba2:	4d58      	ldr	r5, [pc, #352]	; (1d04 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    1ba4:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    1ba8:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    1bac:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    1bb0:	f8df c190 	ldr.w	ip, [pc, #400]	; 1d44 <set_arm_clock+0x2e8>
    1bb4:	ea0e 0c0c 	and.w	ip, lr, ip
    1bb8:	45d4      	cmp	ip, sl
    1bba:	d009      	beq.n	1bd0 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    1bbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    1bc0:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    1bc4:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    1bc8:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    1bca:	682a      	ldr	r2, [r5, #0]
    1bcc:	2a00      	cmp	r2, #0
    1bce:	dafc      	bge.n	1bca <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    1bd0:	4a46      	ldr	r2, [pc, #280]	; (1cec <set_arm_clock+0x290>)
    1bd2:	6915      	ldr	r5, [r2, #16]
    1bd4:	f005 0507 	and.w	r5, r5, #7
    1bd8:	429d      	cmp	r5, r3
    1bda:	d003      	beq.n	1be4 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    1bdc:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    1bde:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1be0:	03dd      	lsls	r5, r3, #15
    1be2:	d4fc      	bmi.n	1bde <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    1be4:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    1be8:	d009      	beq.n	1bfe <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    1bea:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    1bee:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    1bf2:	4a3e      	ldr	r2, [pc, #248]	; (1cec <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    1bf4:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    1bf6:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    1bf8:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1bfa:	0799      	lsls	r1, r3, #30
    1bfc:	d4fc      	bmi.n	1bf8 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    1bfe:	4947      	ldr	r1, [pc, #284]	; (1d1c <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    1c00:	4a47      	ldr	r2, [pc, #284]	; (1d20 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    1c02:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    1c04:	4291      	cmp	r1, r2
    1c06:	d83c      	bhi.n	1c82 <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    1c08:	4b46      	ldr	r3, [pc, #280]	; (1d24 <set_arm_clock+0x2c8>)
    1c0a:	09c9      	lsrs	r1, r1, #7
    1c0c:	fba3 3101 	umull	r3, r1, r3, r1
    1c10:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    1c12:	1e4b      	subs	r3, r1, #1
    1c14:	021b      	lsls	r3, r3, #8
    1c16:	ea86 0203 	eor.w	r2, r6, r3
    1c1a:	f412 7f40 	tst.w	r2, #768	; 0x300
    1c1e:	d006      	beq.n	1c2e <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    1c20:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    1c24:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    1c28:	4a30      	ldr	r2, [pc, #192]	; (1cec <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    1c2a:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    1c2c:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    1c2e:	4a2f      	ldr	r2, [pc, #188]	; (1cec <set_arm_clock+0x290>)
    1c30:	6953      	ldr	r3, [r2, #20]
    1c32:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    1c36:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    1c38:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1c3a:	069b      	lsls	r3, r3, #26
    1c3c:	d4fc      	bmi.n	1c38 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1c3e:	4b3a      	ldr	r3, [pc, #232]	; (1d28 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    1c40:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1c42:	fba3 2300 	umull	r2, r3, r3, r0
    1c46:	f04f 32ff 	mov.w	r2, #4294967295
    1c4a:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    1c4e:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1c52:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    1c56:	4a35      	ldr	r2, [pc, #212]	; (1d2c <set_arm_clock+0x2d0>)
    1c58:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    1c5a:	4a35      	ldr	r2, [pc, #212]	; (1d30 <set_arm_clock+0x2d4>)
    1c5c:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1c5e:	4a35      	ldr	r2, [pc, #212]	; (1d34 <set_arm_clock+0x2d8>)
    1c60:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    1c62:	d208      	bcs.n	1c76 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    1c64:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    1c68:	4a21      	ldr	r2, [pc, #132]	; (1cf0 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    1c6a:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    1c6e:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1c70:	6813      	ldr	r3, [r2, #0]
    1c72:	2b00      	cmp	r3, #0
    1c74:	dafc      	bge.n	1c70 <set_arm_clock+0x214>
	}

	return frequency;
}
    1c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1c7a:	4673      	mov	r3, lr
    1c7c:	e762      	b.n	1b44 <set_arm_clock+0xe8>
    1c7e:	2712      	movs	r7, #18
    1c80:	e718      	b.n	1ab4 <set_arm_clock+0x58>
    1c82:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    1c86:	2104      	movs	r1, #4
    1c88:	e7c5      	b.n	1c16 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    1c8a:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    1c8e:	4820      	ldr	r0, [pc, #128]	; (1d10 <set_arm_clock+0x2b4>)
    1c90:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    1c92:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    1c94:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    1c96:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    1c9a:	4a27      	ldr	r2, [pc, #156]	; (1d38 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    1c9c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 1d48 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    1ca0:	fba2 2000 	umull	r2, r0, r2, r0
    1ca4:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    1ca6:	4825      	ldr	r0, [pc, #148]	; (1d3c <set_arm_clock+0x2e0>)
    1ca8:	2a36      	cmp	r2, #54	; 0x36
    1caa:	bf38      	it	cc
    1cac:	2236      	movcc	r2, #54	; 0x36
    1cae:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    1cb2:	ea42 0a0a 	orr.w	sl, r2, sl
    1cb6:	e774      	b.n	1ba2 <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    1cb8:	ea4f 248c 	mov.w	r4, ip, lsl #10
    1cbc:	2300      	movs	r3, #0
    1cbe:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    1cc2:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    1cc6:	46ac      	mov	ip, r5
    1cc8:	e762      	b.n	1b90 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    1cca:	461d      	mov	r5, r3
    1ccc:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    1cd0:	4611      	mov	r1, r2
    1cd2:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    1cd6:	e713      	b.n	1b00 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    1cd8:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    1cda:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    1cde:	4602      	mov	r2, r0
    1ce0:	4631      	mov	r1, r6
    1ce2:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    1ce4:	46e6      	mov	lr, ip
    1ce6:	e753      	b.n	1b90 <set_arm_clock+0x134>
    1ce8:	1f78a400 	.word	0x1f78a400
    1cec:	400fc000 	.word	0x400fc000
    1cf0:	40080000 	.word	0x40080000
    1cf4:	23c34600 	.word	0x23c34600
    1cf8:	004cb223 	.word	0x004cb223
    1cfc:	51eb851f 	.word	0x51eb851f
    1d00:	016e3600 	.word	0x016e3600
    1d04:	400d8000 	.word	0x400d8000
    1d08:	80003040 	.word	0x80003040
    1d0c:	269fb1ff 	.word	0x269fb1ff
    1d10:	005b8d80 	.word	0x005b8d80
    1d14:	4df67eff 	.word	0x4df67eff
    1d18:	4d3f6400 	.word	0x4d3f6400
    1d1c:	08f0d17f 	.word	0x08f0d17f
    1d20:	2cb4177f 	.word	0x2cb4177f
    1d24:	00e5109f 	.word	0x00e5109f
    1d28:	431bde83 	.word	0x431bde83
    1d2c:	20000ecc 	.word	0x20000ecc
    1d30:	20000ec8 	.word	0x20000ec8
    1d34:	2000264c 	.word	0x2000264c
    1d38:	165e9f81 	.word	0x165e9f81
    1d3c:	00b71b00 	.word	0x00b71b00
    1d40:	8000206c 	.word	0x8000206c
    1d44:	8001307f 	.word	0x8001307f
    1d48:	80002000 	.word	0x80002000

00001d4c <delay>:
	if (msec == 0) return;
    1d4c:	b900      	cbnz	r0, 1d50 <delay+0x4>
    1d4e:	4770      	bx	lr
{
    1d50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1d54:	2101      	movs	r1, #1
    1d56:	4681      	mov	r9, r0
    1d58:	4c21      	ldr	r4, [pc, #132]	; (1de0 <delay+0x94>)
    1d5a:	4d22      	ldr	r5, [pc, #136]	; (1de4 <delay+0x98>)
    1d5c:	4e22      	ldr	r6, [pc, #136]	; (1de8 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    1d5e:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    1d62:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    1d64:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1d66:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    1d6a:	2b00      	cmp	r3, #0
    1d6c:	d1f7      	bne.n	1d5e <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1d6e:	491f      	ldr	r1, [pc, #124]	; (1dec <delay+0xa0>)
    1d70:	684b      	ldr	r3, [r1, #4]
	uint32_t usec = 1000*smc + frac;
    1d72:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1d76:	f8df a078 	ldr.w	sl, [pc, #120]	; 1df0 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    1d7a:	1a1b      	subs	r3, r3, r0
    1d7c:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    1d7e:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1d82:	f8da 2000 	ldr.w	r2, [sl]
    1d86:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    1d8a:	455a      	cmp	r2, fp
    1d8c:	bf94      	ite	ls
    1d8e:	4490      	addls	r8, r2
    1d90:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    1d92:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    1d96:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    1d98:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1d9a:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    1d9e:	2b00      	cmp	r3, #0
    1da0:	d1f7      	bne.n	1d92 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1da2:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1da4:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    1da8:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    1daa:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1dae:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    1db2:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    1db6:	bf94      	ite	ls
    1db8:	4462      	addls	r2, ip
    1dba:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    1dbe:	eba2 0208 	sub.w	r2, r2, r8
    1dc2:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    1dc6:	d306      	bcc.n	1dd6 <delay+0x8a>
			if (--msec == 0) return;
    1dc8:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    1dcc:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    1dd0:	d1df      	bne.n	1d92 <delay+0x46>
}
    1dd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    1dd6:	f001 fc51 	bl	367c <yield>
		while ((micros() - start) >= 1000) {
    1dda:	4904      	ldr	r1, [pc, #16]	; (1dec <delay+0xa0>)
    1ddc:	e7d9      	b.n	1d92 <delay+0x46>
    1dde:	bf00      	nop
    1de0:	20002680 	.word	0x20002680
    1de4:	2000267c 	.word	0x2000267c
    1de8:	20002678 	.word	0x20002678
    1dec:	e0001000 	.word	0xe0001000
    1df0:	2000264c 	.word	0x2000264c

00001df4 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    1df4:	2827      	cmp	r0, #39	; 0x27
    1df6:	d816      	bhi.n	1e26 <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    1df8:	0102      	lsls	r2, r0, #4
    1dfa:	4b10      	ldr	r3, [pc, #64]	; (1e3c <digitalWrite+0x48>)
    1dfc:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    1e00:	589b      	ldr	r3, [r3, r2]
{
    1e02:	b410      	push	{r4}
	mask = p->mask;
    1e04:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    1e06:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    1e08:	4214      	tst	r4, r2
    1e0a:	d005      	beq.n	1e18 <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
    1e0c:	b961      	cbnz	r1, 1e28 <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    1e0e:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    1e12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    1e16:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1e18:	6883      	ldr	r3, [r0, #8]
		if (val) {
    1e1a:	b151      	cbz	r1, 1e32 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1e1c:	4a08      	ldr	r2, [pc, #32]	; (1e40 <digitalWrite+0x4c>)
}
    1e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1e22:	601a      	str	r2, [r3, #0]
}
    1e24:	4770      	bx	lr
    1e26:	4770      	bx	lr
    1e28:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    1e2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    1e30:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    1e32:	4a04      	ldr	r2, [pc, #16]	; (1e44 <digitalWrite+0x50>)
}
    1e34:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    1e38:	601a      	str	r2, [r3, #0]
}
    1e3a:	4770      	bx	lr
    1e3c:	20000810 	.word	0x20000810
    1e40:	0001f038 	.word	0x0001f038
    1e44:	00013038 	.word	0x00013038

00001e48 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    1e48:	2827      	cmp	r0, #39	; 0x27
    1e4a:	d80b      	bhi.n	1e64 <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    1e4c:	4b06      	ldr	r3, [pc, #24]	; (1e68 <digitalRead+0x20>)
    1e4e:	0102      	lsls	r2, r0, #4
    1e50:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    1e54:	589a      	ldr	r2, [r3, r2]
    1e56:	68c3      	ldr	r3, [r0, #12]
    1e58:	6892      	ldr	r2, [r2, #8]
    1e5a:	421a      	tst	r2, r3
    1e5c:	bf14      	ite	ne
    1e5e:	2001      	movne	r0, #1
    1e60:	2000      	moveq	r0, #0
    1e62:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    1e64:	2000      	movs	r0, #0
}
    1e66:	4770      	bx	lr
    1e68:	20000810 	.word	0x20000810

00001e6c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    1e6c:	2827      	cmp	r0, #39	; 0x27
    1e6e:	d829      	bhi.n	1ec4 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    1e70:	4b16      	ldr	r3, [pc, #88]	; (1ecc <pinMode+0x60>)
    1e72:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1e74:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    1e76:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    1e7a:	589a      	ldr	r2, [r3, r2]
{
    1e7c:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    1e7e:	6853      	ldr	r3, [r2, #4]
    1e80:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1e82:	d00e      	beq.n	1ea2 <pinMode+0x36>
    1e84:	2904      	cmp	r1, #4
    1e86:	d00c      	beq.n	1ea2 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    1e88:	ea23 0304 	bic.w	r3, r3, r4
    1e8c:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1e8e:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    1e90:	b1a9      	cbz	r1, 1ebe <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    1e92:	2902      	cmp	r1, #2
    1e94:	d017      	beq.n	1ec6 <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    1e96:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    1e98:	bf0c      	ite	eq
    1e9a:	4a0d      	ldreq	r2, [pc, #52]	; (1ed0 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    1e9c:	4a0d      	ldrne	r2, [pc, #52]	; (1ed4 <pinMode+0x68>)
    1e9e:	601a      	str	r2, [r3, #0]
    1ea0:	e007      	b.n	1eb2 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    1ea2:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    1ea4:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    1ea6:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1ea8:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    1eaa:	d008      	beq.n	1ebe <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    1eac:	f640 0238 	movw	r2, #2104	; 0x838
    1eb0:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    1eb2:	6843      	ldr	r3, [r0, #4]
    1eb4:	2215      	movs	r2, #21
}
    1eb6:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    1eba:	601a      	str	r2, [r3, #0]
}
    1ebc:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1ebe:	2238      	movs	r2, #56	; 0x38
    1ec0:	601a      	str	r2, [r3, #0]
    1ec2:	e7f6      	b.n	1eb2 <pinMode+0x46>
    1ec4:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1ec6:	4a04      	ldr	r2, [pc, #16]	; (1ed8 <pinMode+0x6c>)
    1ec8:	601a      	str	r2, [r3, #0]
    1eca:	e7f2      	b.n	1eb2 <pinMode+0x46>
    1ecc:	20000810 	.word	0x20000810
    1ed0:	00013038 	.word	0x00013038
    1ed4:	00010038 	.word	0x00010038
    1ed8:	0001f038 	.word	0x0001f038

00001edc <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    1edc:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    1ede:	f7fe f8c3 	bl	68 <setup>
	while (1) {
		loop();
    1ee2:	f7fe f9a3 	bl	22c <loop>
		yield();
    1ee6:	f001 fbc9 	bl	367c <yield>
	while (1) {
    1eea:	e7fa      	b.n	1ee2 <main+0x6>

00001eec <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    1eec:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    1eee:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    1ef2:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    1ef6:	d16d      	bne.n	1fd4 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1ef8:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    1efa:	d341      	bcc.n	1f80 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1efc:	f851 3b04 	ldr.w	r3, [r1], #4
    1f00:	f840 3b04 	str.w	r3, [r0], #4
    1f04:	f851 3b04 	ldr.w	r3, [r1], #4
    1f08:	f840 3b04 	str.w	r3, [r0], #4
    1f0c:	f851 3b04 	ldr.w	r3, [r1], #4
    1f10:	f840 3b04 	str.w	r3, [r0], #4
    1f14:	f851 3b04 	ldr.w	r3, [r1], #4
    1f18:	f840 3b04 	str.w	r3, [r0], #4
    1f1c:	f851 3b04 	ldr.w	r3, [r1], #4
    1f20:	f840 3b04 	str.w	r3, [r0], #4
    1f24:	f851 3b04 	ldr.w	r3, [r1], #4
    1f28:	f840 3b04 	str.w	r3, [r0], #4
    1f2c:	f851 3b04 	ldr.w	r3, [r1], #4
    1f30:	f840 3b04 	str.w	r3, [r0], #4
    1f34:	f851 3b04 	ldr.w	r3, [r1], #4
    1f38:	f840 3b04 	str.w	r3, [r0], #4
    1f3c:	f851 3b04 	ldr.w	r3, [r1], #4
    1f40:	f840 3b04 	str.w	r3, [r0], #4
    1f44:	f851 3b04 	ldr.w	r3, [r1], #4
    1f48:	f840 3b04 	str.w	r3, [r0], #4
    1f4c:	f851 3b04 	ldr.w	r3, [r1], #4
    1f50:	f840 3b04 	str.w	r3, [r0], #4
    1f54:	f851 3b04 	ldr.w	r3, [r1], #4
    1f58:	f840 3b04 	str.w	r3, [r0], #4
    1f5c:	f851 3b04 	ldr.w	r3, [r1], #4
    1f60:	f840 3b04 	str.w	r3, [r0], #4
    1f64:	f851 3b04 	ldr.w	r3, [r1], #4
    1f68:	f840 3b04 	str.w	r3, [r0], #4
    1f6c:	f851 3b04 	ldr.w	r3, [r1], #4
    1f70:	f840 3b04 	str.w	r3, [r0], #4
    1f74:	f851 3b04 	ldr.w	r3, [r1], #4
    1f78:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1f7c:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    1f7e:	d2bd      	bcs.n	1efc <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    1f80:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    1f82:	d311      	bcc.n	1fa8 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1f84:	f851 3b04 	ldr.w	r3, [r1], #4
    1f88:	f840 3b04 	str.w	r3, [r0], #4
    1f8c:	f851 3b04 	ldr.w	r3, [r1], #4
    1f90:	f840 3b04 	str.w	r3, [r0], #4
    1f94:	f851 3b04 	ldr.w	r3, [r1], #4
    1f98:	f840 3b04 	str.w	r3, [r0], #4
    1f9c:	f851 3b04 	ldr.w	r3, [r1], #4
    1fa0:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    1fa4:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    1fa6:	d2ed      	bcs.n	1f84 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    1fa8:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    1faa:	d305      	bcc.n	1fb8 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    1fac:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    1fb0:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    1fb4:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    1fb6:	d2f9      	bcs.n	1fac <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    1fb8:	3204      	adds	r2, #4
	beq	.Ldone
    1fba:	d008      	beq.n	1fce <memcpy+0xe2>

	lsls	r2, r2, #31
    1fbc:	07d2      	lsls	r2, r2, #31
	itt ne
    1fbe:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    1fc0:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    1fc4:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    1fc8:	d301      	bcc.n	1fce <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    1fca:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    1fcc:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    1fce:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    1fd0:	4770      	bx	lr
    1fd2:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    1fd4:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    1fd6:	d313      	bcc.n	2000 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    1fd8:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    1fda:	d08d      	beq.n	1ef8 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    1fdc:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    1fe0:	d08a      	beq.n	1ef8 <memcpy+0xc>

	rsb	r3, #4
    1fe2:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    1fe6:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    1fe8:	07db      	lsls	r3, r3, #31
	itt ne
    1fea:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    1fec:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    1ff0:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    1ff4:	d380      	bcc.n	1ef8 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    1ff6:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    1ffa:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    1ffe:	e77b      	b.n	1ef8 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    2000:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    2002:	d3d9      	bcc.n	1fb8 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    2004:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    2006:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    200a:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    200e:	d2f9      	bcs.n	2004 <memcpy+0x118>

	ldrb	r3, [r1]
    2010:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    2012:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    2014:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    2016:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    2018:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    201a:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    201c:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    201e:	4770      	bx	lr

00002020 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    2020:	f101 3cff 	add.w	ip, r1, #4294967295
{
    2024:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    2026:	4666      	mov	r6, ip
	int i=0, j;
    2028:	2400      	movs	r4, #0
    202a:	e000      	b.n	202e <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    202c:	3401      	adds	r4, #1
		digit = val % radix;
    202e:	fbb0 f5f2 	udiv	r5, r0, r2
    2032:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2036:	2b09      	cmp	r3, #9
    2038:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    203c:	f103 0330 	add.w	r3, r3, #48	; 0x30
    2040:	fa5f fe8e 	uxtb.w	lr, lr
    2044:	bf98      	it	ls
    2046:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    204a:	4290      	cmp	r0, r2
		val /= radix;
    204c:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    204e:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    2052:	d2eb      	bcs.n	202c <ultoa+0xc>
	}
	buf[i + 1] = 0;
    2054:	1c63      	adds	r3, r4, #1
    2056:	2200      	movs	r2, #0
    2058:	18c8      	adds	r0, r1, r3
    205a:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    205c:	b17c      	cbz	r4, 207e <ultoa+0x5e>
		t = buf[j];
    205e:	4662      	mov	r2, ip
    2060:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    2064:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    2068:	eba1 030c 	sub.w	r3, r1, ip
    206c:	3202      	adds	r2, #2
		buf[j] = buf[i];
    206e:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    2072:	3b01      	subs	r3, #1
    2074:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    2076:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    2078:	4423      	add	r3, r4
    207a:	429a      	cmp	r2, r3
    207c:	dbef      	blt.n	205e <ultoa+0x3e>
	}
	return buf;
}
    207e:	4608      	mov	r0, r1
    2080:	bd70      	pop	{r4, r5, r6, pc}
    2082:	bf00      	nop

00002084 <flexpwmWrite>:

#endif // __IMXRT1062__

void flexpwmWrite(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, uint16_t val)
{
	uint16_t mask = 1 << submodule;
    2084:	f04f 0c01 	mov.w	ip, #1
    2088:	fa0c fc01 	lsl.w	ip, ip, r1
	uint32_t modulo = p->SM[submodule].VAL1;
    208c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2090:	eb00 1141 	add.w	r1, r0, r1, lsl #5
{
    2094:	b570      	push	{r4, r5, r6, lr}
	uint32_t modulo = p->SM[submodule].VAL1;
    2096:	f8b1 e00e 	ldrh.w	lr, [r1, #14]
	uint16_t mask = 1 << submodule;
    209a:	fa1f f58c 	uxth.w	r5, ip
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
    209e:	4c25      	ldr	r4, [pc, #148]	; (2134 <flexpwmWrite+0xb0>)
	uint32_t modulo = p->SM[submodule].VAL1;
    20a0:	fa1f fe8e 	uxth.w	lr, lr
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
    20a4:	7824      	ldrb	r4, [r4, #0]
	if (cval > modulo) cval = modulo; // TODO: is this check correct?

	//printf("flexpwmWrite, p=%08lX, sm=%d, ch=%c, cval=%ld\n",
		//(uint32_t)p, submodule, channel == 0 ? 'X' : (channel == 1 ? 'A' : 'B'), cval);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    20a6:	012e      	lsls	r6, r5, #4
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
    20a8:	fb0e 3303 	mla	r3, lr, r3, r3
    20ac:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
    20b0:	40e3      	lsrs	r3, r4
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    20b2:	f8b0 4188 	ldrh.w	r4, [r0, #392]	; 0x188
    20b6:	4573      	cmp	r3, lr
    20b8:	b2a4      	uxth	r4, r4
    20ba:	bf28      	it	cs
    20bc:	4673      	movcs	r3, lr
    20be:	4334      	orrs	r4, r6
	switch (channel) {
    20c0:	2a01      	cmp	r2, #1
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    20c2:	f8a0 4188 	strh.w	r4, [r0, #392]	; 0x188
	switch (channel) {
    20c6:	d00d      	beq.n	20e4 <flexpwmWrite+0x60>
    20c8:	2a02      	cmp	r2, #2
    20ca:	d028      	beq.n	211e <flexpwmWrite+0x9a>
    20cc:	b1c2      	cbz	r2, 2100 <flexpwmWrite+0x7c>
    20ce:	f00c 020f 	and.w	r2, ip, #15
	  case 2: // B
		p->SM[submodule].VAL5 = cval;
		p->OUTEN |= FLEXPWM_OUTEN_PWMB_EN(mask);
		//printf(" write channel B\n");
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
    20d2:	f8b0 c188 	ldrh.w	ip, [r0, #392]	; 0x188
    20d6:	fa1f fc8c 	uxth.w	ip, ip
    20da:	ea4c 0c02 	orr.w	ip, ip, r2
    20de:	f8a0 c188 	strh.w	ip, [r0, #392]	; 0x188
}
    20e2:	bd70      	pop	{r4, r5, r6, pc}
		p->SM[submodule].VAL3 = cval;
    20e4:	b29b      	uxth	r3, r3
    20e6:	f00c 020f 	and.w	r2, ip, #15
		p->OUTEN |= FLEXPWM_OUTEN_PWMA_EN(mask);
    20ea:	022d      	lsls	r5, r5, #8
		p->SM[submodule].VAL3 = cval;
    20ec:	82cb      	strh	r3, [r1, #22]
		p->OUTEN |= FLEXPWM_OUTEN_PWMA_EN(mask);
    20ee:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    20f2:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
    20f6:	b29b      	uxth	r3, r3
    20f8:	432b      	orrs	r3, r5
    20fa:	f8a0 3180 	strh.w	r3, [r0, #384]	; 0x180
		break;
    20fe:	e7e8      	b.n	20d2 <flexpwmWrite+0x4e>
		p->SM[submodule].VAL0 = modulo - cval;
    2100:	ebae 0e03 	sub.w	lr, lr, r3
    2104:	f00c 020f 	and.w	r2, ip, #15
    2108:	fa1f fe8e 	uxth.w	lr, lr
    210c:	f8a1 e00a 	strh.w	lr, [r1, #10]
		p->OUTEN |= FLEXPWM_OUTEN_PWMX_EN(mask);
    2110:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    2114:	b29b      	uxth	r3, r3
    2116:	4313      	orrs	r3, r2
    2118:	f8a0 3180 	strh.w	r3, [r0, #384]	; 0x180
		break;
    211c:	e7d9      	b.n	20d2 <flexpwmWrite+0x4e>
		p->SM[submodule].VAL5 = cval;
    211e:	b29b      	uxth	r3, r3
    2120:	f00c 020f 	and.w	r2, ip, #15
    2124:	83cb      	strh	r3, [r1, #30]
		p->OUTEN |= FLEXPWM_OUTEN_PWMB_EN(mask);
    2126:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    212a:	b29b      	uxth	r3, r3
    212c:	431e      	orrs	r6, r3
    212e:	f8a0 6180 	strh.w	r6, [r0, #384]	; 0x180
    2132:	e7ce      	b.n	20d2 <flexpwmWrite+0x4e>
    2134:	2000173a 	.word	0x2000173a

00002138 <analogWrite>:

void analogWrite(uint8_t pin, int val)
{
	const struct pwm_pin_info_struct *info;

	if (pin >= CORE_NUM_DIGITAL) return;
    2138:	2827      	cmp	r0, #39	; 0x27
    213a:	d84b      	bhi.n	21d4 <analogWrite+0x9c>
{
    213c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//printf("analogWrite, pin %d, val %d\n", pin, val);
	info = pwm_pin_info + pin;
    213e:	4d2a      	ldr	r5, [pc, #168]	; (21e8 <analogWrite+0xb0>)
    2140:	4604      	mov	r4, r0
	if (info->type == 1) {
    2142:	f815 2020 	ldrb.w	r2, [r5, r0, lsl #2]
	info = pwm_pin_info + pin;
    2146:	eb05 0580 	add.w	r5, r5, r0, lsl #2
	if (info->type == 1) {
    214a:	2a01      	cmp	r2, #1
    214c:	d02d      	beq.n	21aa <analogWrite+0x72>
		  case 1: flexpwm = &IMXRT_FLEXPWM2; break;
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
		  default: flexpwm = &IMXRT_FLEXPWM4;
		}
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
	} else if (info->type == 2) {
    214e:	2a02      	cmp	r2, #2
    2150:	d13f      	bne.n	21d2 <analogWrite+0x9a>
		// QuadTimer pin
		IMXRT_TMR_t *qtimer;
		switch ((info->module >> 4) & 3) {
    2152:	786b      	ldrb	r3, [r5, #1]
    2154:	f3c3 1001 	ubfx	r0, r3, #4, #2
    2158:	2803      	cmp	r0, #3
    215a:	d03e      	beq.n	21da <analogWrite+0xa2>
    215c:	4a23      	ldr	r2, [pc, #140]	; (21ec <analogWrite+0xb4>)
    215e:	eb02 3280 	add.w	r2, r2, r0, lsl #14
		  case 0: qtimer = &IMXRT_TMR1; break;
		  case 1: qtimer = &IMXRT_TMR2; break;
		  case 2: qtimer = &IMXRT_TMR3; break;
		  default: qtimer = &IMXRT_TMR4;
		}
		quadtimerWrite(qtimer, info->module & 0x03, val);
    2162:	f003 0c03 	and.w	ip, r3, #3
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
    2166:	4822      	ldr	r0, [pc, #136]	; (21f0 <analogWrite+0xb8>)
    2168:	b289      	uxth	r1, r1
    216a:	4663      	mov	r3, ip
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
    216c:	eb02 1c4c 	add.w	ip, r2, ip, lsl #5
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
    2170:	7806      	ldrb	r6, [r0, #0]
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
    2172:	f8bc e006 	ldrh.w	lr, [ip, #6]
    2176:	0158      	lsls	r0, r3, #5
    2178:	f8bc 3010 	ldrh.w	r3, [ip, #16]
    217c:	fa1f fe8e 	uxth.w	lr, lr
    2180:	f1ce 1e01 	rsb	lr, lr, #65537	; 0x10001
    2184:	fa1e f383 	uxtah	r3, lr, r3
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
    2188:	f103 3eff 	add.w	lr, r3, #4294967295
    218c:	fb0e f101 	mul.w	r1, lr, r1
    2190:	40f1      	lsrs	r1, r6
	if (high >= modulo - 1) high = modulo - 2;
    2192:	458e      	cmp	lr, r1
    2194:	d923      	bls.n	21de <analogWrite+0xa6>
	uint32_t low = modulo - high; // low must 2 or higher
    2196:	1a5b      	subs	r3, r3, r1
	p->CH[submodule].LOAD = 65537 - low;
    2198:	f1c3 0301 	rsb	r3, r3, #1
    219c:	b29b      	uxth	r3, r3
	p->CH[submodule].CMPLD1 = high;
    219e:	b289      	uxth	r1, r1
    21a0:	4402      	add	r2, r0
	p->CH[submodule].LOAD = 65537 - low;
    21a2:	f8ac 3006 	strh.w	r3, [ip, #6]
	p->CH[submodule].CMPLD1 = high;
    21a6:	8211      	strh	r1, [r2, #16]
}
    21a8:	e00d      	b.n	21c6 <analogWrite+0x8e>
		switch ((info->module >> 4) & 3) {
    21aa:	786a      	ldrb	r2, [r5, #1]
    21ac:	f3c2 1301 	ubfx	r3, r2, #4, #2
    21b0:	2b03      	cmp	r3, #3
    21b2:	d010      	beq.n	21d6 <analogWrite+0x9e>
    21b4:	480f      	ldr	r0, [pc, #60]	; (21f4 <analogWrite+0xbc>)
    21b6:	eb00 3083 	add.w	r0, r0, r3, lsl #14
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
    21ba:	b28b      	uxth	r3, r1
    21bc:	f002 0103 	and.w	r1, r2, #3
    21c0:	78aa      	ldrb	r2, [r5, #2]
    21c2:	f7ff ff5f 	bl	2084 <flexpwmWrite>
	} else {
		return;
	}
	*(portConfigRegister(pin)) = info->muxval;
    21c6:	4b0c      	ldr	r3, [pc, #48]	; (21f8 <analogWrite+0xc0>)
    21c8:	78ea      	ldrb	r2, [r5, #3]
    21ca:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    21ce:	685b      	ldr	r3, [r3, #4]
    21d0:	601a      	str	r2, [r3, #0]
	// TODO: pad config register
}
    21d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    21d4:	4770      	bx	lr
		switch ((info->module >> 4) & 3) {
    21d6:	4809      	ldr	r0, [pc, #36]	; (21fc <analogWrite+0xc4>)
    21d8:	e7ef      	b.n	21ba <analogWrite+0x82>
		switch ((info->module >> 4) & 3) {
    21da:	4a09      	ldr	r2, [pc, #36]	; (2200 <analogWrite+0xc8>)
    21dc:	e7c1      	b.n	2162 <analogWrite+0x2a>
	if (high >= modulo - 1) high = modulo - 2;
    21de:	1e99      	subs	r1, r3, #2
    21e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    21e4:	e7db      	b.n	219e <analogWrite+0x66>
    21e6:	bf00      	nop
    21e8:	20000c1c 	.word	0x20000c1c
    21ec:	401dc000 	.word	0x401dc000
    21f0:	2000173a 	.word	0x2000173a
    21f4:	403dc000 	.word	0x403dc000
    21f8:	20000810 	.word	0x20000810
    21fc:	403e8000 	.word	0x403e8000
    2200:	401e8000 	.word	0x401e8000

00002204 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    2204:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    2206:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    2208:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    220c:	4619      	mov	r1, r3
{
    220e:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2210:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2214:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2218:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    221c:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    2220:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    2224:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    2226:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    222a:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    222e:	b29b      	uxth	r3, r3
    2230:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    2234:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2238:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    223c:	3101      	adds	r1, #1
    223e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    2242:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2244:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2246:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    224a:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    224c:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    224e:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    2250:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    2252:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    2256:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    2258:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    225a:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    225c:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    225e:	d1eb      	bne.n	2238 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2260:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    2264:	b29b      	uxth	r3, r3
    2266:	f043 030f 	orr.w	r3, r3, #15
    226a:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    226e:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    2272:	b29b      	uxth	r3, r3
    2274:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    2278:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    227c:	bd10      	pop	{r4, pc}
    227e:	bf00      	nop

00002280 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2280:	4b37      	ldr	r3, [pc, #220]	; (2360 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2282:	4a38      	ldr	r2, [pc, #224]	; (2364 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2284:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    2286:	4838      	ldr	r0, [pc, #224]	; (2368 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2288:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    228c:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    228e:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2290:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2294:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2298:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    229c:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    22a0:	430a      	orrs	r2, r1
    22a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    22a6:	f7ff ffad 	bl	2204 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    22aa:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    22ae:	f7ff ffa9 	bl	2204 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    22b2:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    22b6:	f7ff ffa5 	bl	2204 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    22ba:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    22be:	f7ff ffa1 	bl	2204 <flexpwm_init>
	for (i=0; i < 4; i++) {
    22c2:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    22c4:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    22c8:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    22cc:	4611      	mov	r1, r2
    22ce:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    22d2:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    22d6:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    22d8:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    22da:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    22dc:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    22de:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    22e2:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    22e4:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    22e6:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    22ea:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    22ec:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    22ee:	d1ee      	bne.n	22ce <pwm_init+0x4e>
    22f0:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    22f2:	481e      	ldr	r0, [pc, #120]	; (236c <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    22f4:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    22f8:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    22fc:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    22fe:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2302:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    2306:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    230a:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    230e:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    2310:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    2312:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    2314:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2316:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    231a:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    231c:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    231e:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    2322:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2324:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    2326:	d1ee      	bne.n	2306 <pwm_init+0x86>
    2328:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    232a:	4811      	ldr	r0, [pc, #68]	; (2370 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    232c:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    232e:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    2332:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2334:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2338:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    233c:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    2340:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    2344:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    2346:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    2348:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    234a:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    234c:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    234e:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2350:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    2352:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    2356:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2358:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    235c:	d1ee      	bne.n	233c <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    235e:	bd70      	pop	{r4, r5, r6, pc}
    2360:	400fc000 	.word	0x400fc000
    2364:	fc030000 	.word	0xfc030000
    2368:	403dc000 	.word	0x403dc000
    236c:	401e0000 	.word	0x401e0000
    2370:	401e4000 	.word	0x401e4000

00002374 <serialEvent1()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent1() __attribute__((weak));
void serialEvent1() {}		// No use calling this so disable if called...
    2374:	4770      	bx	lr
    2376:	bf00      	nop

00002378 <serialEvent2()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent2() __attribute__((weak));
void serialEvent2() {}		// No use calling this so disable if called...
    2378:	4770      	bx	lr
    237a:	bf00      	nop

0000237c <serialEvent3()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent3() __attribute__((weak));
void serialEvent3() {}		// No use calling this so disable if called...
    237c:	4770      	bx	lr
    237e:	bf00      	nop

00002380 <serialEvent4()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent4() __attribute__((weak));
void serialEvent4() {}		// No use calling this so disable if called...
    2380:	4770      	bx	lr
    2382:	bf00      	nop

00002384 <serialEvent5()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent5() __attribute__((weak));
void serialEvent5() {}		// No use calling this so disable if called...
    2384:	4770      	bx	lr
    2386:	bf00      	nop

00002388 <serialEvent6()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent6() __attribute__((weak));
void serialEvent6() {}		// No use calling this so disable if called...
    2388:	4770      	bx	lr
    238a:	bf00      	nop

0000238c <serialEvent7()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent7() __attribute__((weak));
void serialEvent7() {}		// No use calling this so disable if called...
    238c:	4770      	bx	lr
    238e:	bf00      	nop

00002390 <unused_interrupt_vector>:
	__disable_irq();
    2390:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    2392:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    2396:	4c4f      	ldr	r4, [pc, #316]	; (24d4 <unused_interrupt_vector+0x144>)
    2398:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    239c:	f3ef 8208 	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    23a0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    23a4:	4e4c      	ldr	r6, [pc, #304]	; (24d8 <unused_interrupt_vector+0x148>)
	while (p < end) {
    23a6:	4d4d      	ldr	r5, [pc, #308]	; (24dc <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    23a8:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    23ac:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    23b0:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    23b4:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    23b8:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    23bc:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    23c0:	6993      	ldr	r3, [r2, #24]
    23c2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    23c6:	69d3      	ldr	r3, [r2, #28]
    23c8:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    23cc:	f000 f8d0 	bl	2570 <tempmonGetTemp>
    23d0:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    23d4:	f001 f9fe 	bl	37d4 <rtc_get>
	info->len = sizeof(*info) / 4;
    23d8:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    23da:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    23de:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    23e2:	460b      	mov	r3, r1
    23e4:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    23e8:	493d      	ldr	r1, [pc, #244]	; (24e0 <unused_interrupt_vector+0x150>)
		crc ^= *p++;
    23ea:	1d30      	adds	r0, r6, #4
    23ec:	405a      	eors	r2, r3
    23ee:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    23f0:	f002 0301 	and.w	r3, r2, #1
    23f4:	3c01      	subs	r4, #1
    23f6:	fb01 f303 	mul.w	r3, r1, r3
    23fa:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    23fe:	d1f7      	bne.n	23f0 <unused_interrupt_vector+0x60>
	while (p < end) {
    2400:	42a8      	cmp	r0, r5
    2402:	d002      	beq.n	240a <unused_interrupt_vector+0x7a>
		crc ^= *p++;
    2404:	6873      	ldr	r3, [r6, #4]
    2406:	4606      	mov	r6, r0
    2408:	e7ef      	b.n	23ea <unused_interrupt_vector+0x5a>
	info->crc = crc;
    240a:	4b32      	ldr	r3, [pc, #200]	; (24d4 <unused_interrupt_vector+0x144>)
    240c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    2410:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    2414:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2418:	492f      	ldr	r1, [pc, #188]	; (24d8 <unused_interrupt_vector+0x148>)
    241a:	4a32      	ldr	r2, [pc, #200]	; (24e4 <unused_interrupt_vector+0x154>)
    241c:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    2420:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    2424:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2428:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    242c:	4a2e      	ldr	r2, [pc, #184]	; (24e8 <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    242e:	2502      	movs	r5, #2
    2430:	482e      	ldr	r0, [pc, #184]	; (24ec <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    2432:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    2434:	492e      	ldr	r1, [pc, #184]	; (24f0 <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    2436:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    243a:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    243c:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    243e:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    2440:	482c      	ldr	r0, [pc, #176]	; (24f4 <unused_interrupt_vector+0x164>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    2442:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    2446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    244a:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    244c:	680b      	ldr	r3, [r1, #0]
    244e:	4283      	cmp	r3, r0
    2450:	d83d      	bhi.n	24ce <unused_interrupt_vector+0x13e>
	PIT_MCR = 0;
    2452:	4d26      	ldr	r5, [pc, #152]	; (24ec <unused_interrupt_vector+0x15c>)
    2454:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    2456:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    245a:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    245e:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    2460:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    2462:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    2466:	4924      	ldr	r1, [pc, #144]	; (24f8 <unused_interrupt_vector+0x168>)
    2468:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    246c:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    2470:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    2474:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    2478:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    247c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    2480:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    2484:	e001      	b.n	248a <unused_interrupt_vector+0xfa>
		usb_isr();
    2486:	f000 f965 	bl	2754 <usb_isr>
		if (PIT_TFLG0) {
    248a:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    248e:	2b00      	cmp	r3, #0
    2490:	d0f9      	beq.n	2486 <unused_interrupt_vector+0xf6>
			if (++count >= 80) break;  // reboot after 8 seconds
    2492:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    2494:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    2498:	2c4f      	cmp	r4, #79	; 0x4f
    249a:	d9f4      	bls.n	2486 <unused_interrupt_vector+0xf6>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    249c:	4b17      	ldr	r3, [pc, #92]	; (24fc <unused_interrupt_vector+0x16c>)
	USB1_USBCMD = USB_USBCMD_RST;
    249e:	2002      	movs	r0, #2
    24a0:	4917      	ldr	r1, [pc, #92]	; (2500 <unused_interrupt_vector+0x170>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    24a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    24a6:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    24aa:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    24ac:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    24b0:	b93b      	cbnz	r3, 24c2 <unused_interrupt_vector+0x132>
	SRC_GPR5 = 0x0BAD00F1;
    24b2:	4814      	ldr	r0, [pc, #80]	; (2504 <unused_interrupt_vector+0x174>)
    24b4:	4914      	ldr	r1, [pc, #80]	; (2508 <unused_interrupt_vector+0x178>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    24b6:	4a0d      	ldr	r2, [pc, #52]	; (24ec <unused_interrupt_vector+0x15c>)
	SRC_GPR5 = 0x0BAD00F1;
    24b8:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    24ba:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    24be:	2b00      	cmp	r3, #0
    24c0:	d0fa      	beq.n	24b8 <unused_interrupt_vector+0x128>
	SCB_AIRCR = 0x05FA0004;
    24c2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    24c6:	4a11      	ldr	r2, [pc, #68]	; (250c <unused_interrupt_vector+0x17c>)
    24c8:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    24cc:	e7fe      	b.n	24cc <unused_interrupt_vector+0x13c>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    24ce:	f7ff fac5 	bl	1a5c <set_arm_clock>
    24d2:	e7be      	b.n	2452 <unused_interrupt_vector+0xc2>
    24d4:	2027ff00 	.word	0x2027ff00
    24d8:	2027ff80 	.word	0x2027ff80
    24dc:	2027ffa8 	.word	0x2027ffa8
    24e0:	edb88320 	.word	0xedb88320
    24e4:	2027ffa0 	.word	0x2027ffa0
    24e8:	400fc000 	.word	0x400fc000
    24ec:	40084000 	.word	0x40084000
    24f0:	20000ecc 	.word	0x20000ecc
    24f4:	0bcd3d80 	.word	0x0bcd3d80
    24f8:	00249f00 	.word	0x00249f00
    24fc:	400d9000 	.word	0x400d9000
    2500:	402e0000 	.word	0x402e0000
    2504:	400f8000 	.word	0x400f8000
    2508:	0bad00f1 	.word	0x0bad00f1
    250c:	05fa0004 	.word	0x05fa0004

00002510 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    2510:	490a      	ldr	r1, [pc, #40]	; (253c <_sbrk+0x2c>)
    2512:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    2514:	b138      	cbz	r0, 2526 <_sbrk+0x16>
{
    2516:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    2518:	1813      	adds	r3, r2, r0
    251a:	4809      	ldr	r0, [pc, #36]	; (2540 <_sbrk+0x30>)
    251c:	4283      	cmp	r3, r0
    251e:	d804      	bhi.n	252a <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    2520:	4610      	mov	r0, r2
                __brkval = prev + incr;
    2522:	600b      	str	r3, [r1, #0]
}
    2524:	bd08      	pop	{r3, pc}
    2526:	4610      	mov	r0, r2
    2528:	4770      	bx	lr
                        errno = ENOMEM;
    252a:	f002 f933 	bl	4794 <__errno>
    252e:	230c      	movs	r3, #12
                        return (void *)-1;
    2530:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    2534:	6003      	str	r3, [r0, #0]
}
    2536:	4610      	mov	r0, r2
    2538:	bd08      	pop	{r3, pc}
    253a:	bf00      	nop
    253c:	2000113c 	.word	0x2000113c
    2540:	20280000 	.word	0x20280000

00002544 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    2544:	2000      	movs	r0, #0
    2546:	4770      	bx	lr

00002548 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    2548:	f04f 30ff 	mov.w	r0, #4294967295
    254c:	4770      	bx	lr
    254e:	bf00      	nop

00002550 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    2550:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    2554:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    2556:	604b      	str	r3, [r1, #4]
}
    2558:	4770      	bx	lr
    255a:	bf00      	nop

0000255c <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    255c:	2001      	movs	r0, #1
    255e:	4770      	bx	lr

00002560 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    2560:	f04f 30ff 	mov.w	r0, #4294967295
    2564:	4770      	bx	lr
    2566:	bf00      	nop

00002568 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    2568:	bf30      	wfi
    256a:	e7fd      	b.n	2568 <abort>

0000256c <Panic_Temp_isr>:
  unused_interrupt_vector();
    256c:	f7ff bf10 	b.w	2390 <unused_interrupt_vector>

00002570 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    2570:	4a12      	ldr	r2, [pc, #72]	; (25bc <tempmonGetTemp+0x4c>)
    2572:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    2576:	075b      	lsls	r3, r3, #29
    2578:	d5fb      	bpl.n	2572 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    257a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    257e:	4810      	ldr	r0, [pc, #64]	; (25c0 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    2580:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    2584:	490f      	ldr	r1, [pc, #60]	; (25c4 <tempmonGetTemp+0x54>)
    2586:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    258a:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    258e:	ed91 6a00 	vldr	s12, [r1]
    2592:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    2596:	4a0c      	ldr	r2, [pc, #48]	; (25c8 <tempmonGetTemp+0x58>)
    2598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    259c:	4b0b      	ldr	r3, [pc, #44]	; (25cc <tempmonGetTemp+0x5c>)
    259e:	edd2 6a00 	vldr	s13, [r2]
    25a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
    25a6:	ed93 7a00 	vldr	s14, [r3]
    25aa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    25ae:	ee67 7a86 	vmul.f32	s15, s15, s12
    25b2:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    25b6:	ee37 0a40 	vsub.f32	s0, s14, s0
    25ba:	4770      	bx	lr
    25bc:	400d8100 	.word	0x400d8100
    25c0:	2000263c 	.word	0x2000263c
    25c4:	20002644 	.word	0x20002644
    25c8:	20002648 	.word	0x20002648
    25cc:	20002640 	.word	0x20002640

000025d0 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    25d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    25d2:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    25d4:	b11b      	cbz	r3, 25de <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    25d6:	6853      	ldr	r3, [r2, #4]
    25d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    25dc:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    25de:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    25e0:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    25e2:	b33c      	cbz	r4, 2634 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    25e4:	4b1a      	ldr	r3, [pc, #104]	; (2650 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    25e6:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    25e8:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    25ec:	420c      	tst	r4, r1
    25ee:	d11d      	bne.n	262c <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    25f0:	4e18      	ldr	r6, [pc, #96]	; (2654 <schedule_transfer+0x84>)
    25f2:	6877      	ldr	r7, [r6, #4]
    25f4:	e004      	b.n	2600 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    25f6:	6874      	ldr	r4, [r6, #4]
    25f8:	1be4      	subs	r4, r4, r7
    25fa:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    25fe:	d20b      	bcs.n	2618 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    2600:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    2604:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    2608:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    260c:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    2610:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    2614:	0464      	lsls	r4, r4, #17
    2616:	d5ee      	bpl.n	25f6 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    2618:	400d      	ands	r5, r1
    261a:	d107      	bne.n	262c <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    261c:	4c0c      	ldr	r4, [pc, #48]	; (2650 <schedule_transfer+0x80>)
		endpoint->status = 0;
    261e:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    2622:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2626:	430b      	orrs	r3, r1
    2628:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    262c:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    262e:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    2630:	bcf0      	pop	{r4, r5, r6, r7}
    2632:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    2634:	4d06      	ldr	r5, [pc, #24]	; (2650 <schedule_transfer+0x80>)
	endpoint->status = 0;
    2636:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    263a:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    263e:	430b      	orrs	r3, r1
    2640:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    2644:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    2646:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    2648:	b662      	cpsie	i
}
    264a:	bcf0      	pop	{r4, r5, r6, r7}
    264c:	4770      	bx	lr
    264e:	bf00      	nop
    2650:	402e0000 	.word	0x402e0000
    2654:	e0001000 	.word	0xe0001000

00002658 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    2658:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    265a:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    265c:	b19d      	cbz	r5, 2686 <run_callbacks+0x2e>
    265e:	4606      	mov	r6, r0
    2660:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    2662:	2400      	movs	r4, #0
    2664:	e003      	b.n	266e <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    2666:	6812      	ldr	r2, [r2, #0]
		count++;
    2668:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    266a:	2a01      	cmp	r2, #1
    266c:	d00c      	beq.n	2688 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    266e:	6853      	ldr	r3, [r2, #4]
    2670:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    2674:	d0f7      	beq.n	2666 <run_callbacks+0xe>
			ep->first_transfer = t;
    2676:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    2678:	b12c      	cbz	r4, 2686 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    267a:	4628      	mov	r0, r5
		ep->callback_function(first);
    267c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    267e:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    2680:	4798      	blx	r3
	while (count) {
    2682:	3c01      	subs	r4, #1
    2684:	d1f9      	bne.n	267a <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    2686:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    2688:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    268c:	e7f4      	b.n	2678 <run_callbacks+0x20>
    268e:	bf00      	nop

00002690 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    2690:	b430      	push	{r4, r5}
	if (len > 0) {
    2692:	b9d9      	cbnz	r1, 26cc <endpoint0_transmit.constprop.0+0x3c>
    2694:	4c1f      	ldr	r4, [pc, #124]	; (2714 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    2696:	4b20      	ldr	r3, [pc, #128]	; (2718 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    2698:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    269a:	4a20      	ldr	r2, [pc, #128]	; (271c <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    269c:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    269e:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    26a2:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    26a4:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    26a6:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    26aa:	2480      	movs	r4, #128	; 0x80
    26ac:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    26ae:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    26b2:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    26b6:	481a      	ldr	r0, [pc, #104]	; (2720 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    26b8:	432b      	orrs	r3, r5
    26ba:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    26be:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    26c0:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    26c4:	2b00      	cmp	r3, #0
    26c6:	d1fb      	bne.n	26c0 <endpoint0_transmit.constprop.0+0x30>
}
    26c8:	bc30      	pop	{r4, r5}
    26ca:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    26cc:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    26ce:	4b15      	ldr	r3, [pc, #84]	; (2724 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    26d0:	4c10      	ldr	r4, [pc, #64]	; (2714 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    26d2:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    26d4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    26d8:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    26da:	4a10      	ldr	r2, [pc, #64]	; (271c <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    26dc:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    26de:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    26e2:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    26e4:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    26e6:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    26ea:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    26ec:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    26ee:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    26f2:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    26f6:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    26f8:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    26fa:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    26fc:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    26fe:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    2702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2706:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    270a:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    270e:	2b00      	cmp	r3, #0
    2710:	d1fb      	bne.n	270a <endpoint0_transmit.constprop.0+0x7a>
    2712:	e7c0      	b.n	2696 <endpoint0_transmit.constprop.0+0x6>
    2714:	20000000 	.word	0x20000000
    2718:	20001ac0 	.word	0x20001ac0
    271c:	402e0000 	.word	0x402e0000
    2720:	200025a8 	.word	0x200025a8
    2724:	20001ae0 	.word	0x20001ae0

00002728 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    2728:	4908      	ldr	r1, [pc, #32]	; (274c <usb_stop_sof_interrupts+0x24>)
    272a:	2201      	movs	r2, #1
    272c:	780b      	ldrb	r3, [r1, #0]
    272e:	fa02 f000 	lsl.w	r0, r2, r0
    2732:	ea23 0000 	bic.w	r0, r3, r0
    2736:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    2738:	b930      	cbnz	r0, 2748 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    273a:	4a05      	ldr	r2, [pc, #20]	; (2750 <usb_stop_sof_interrupts+0x28>)
    273c:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    2740:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2744:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    2748:	4770      	bx	lr
    274a:	bf00      	nop
    274c:	200026b1 	.word	0x200026b1
    2750:	402e0000 	.word	0x402e0000

00002754 <usb_isr>:
{
    2754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    2758:	4c97      	ldr	r4, [pc, #604]	; (29b8 <usb_isr+0x264>)
{
    275a:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    275c:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    2760:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    2762:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    2766:	d553      	bpl.n	2810 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    2768:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    276c:	2a00      	cmp	r2, #0
    276e:	d04a      	beq.n	2806 <usb_isr+0xb2>
    2770:	4e92      	ldr	r6, [pc, #584]	; (29bc <usb_isr+0x268>)
    2772:	f8df a260 	ldr.w	sl, [pc, #608]	; 29d4 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    2776:	f8df 9274 	ldr.w	r9, [pc, #628]	; 29ec <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    277a:	f8df b274 	ldr.w	fp, [pc, #628]	; 29f0 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    277e:	f8df 8274 	ldr.w	r8, [pc, #628]	; 29f4 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    2782:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    2786:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    278a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    278e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    2792:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    2796:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    279a:	049d      	lsls	r5, r3, #18
    279c:	d5f5      	bpl.n	278a <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    279e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    27a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    27a6:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    27aa:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    27ae:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    27b2:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    27b6:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    27ba:	d1fa      	bne.n	27b2 <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    27bc:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    27be:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    27c0:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    27c4:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    27c8:	f000 81cf 	beq.w	2b6a <usb_isr+0x416>
    27cc:	f200 80db 	bhi.w	2986 <usb_isr+0x232>
    27d0:	f240 3102 	movw	r1, #770	; 0x302
    27d4:	428b      	cmp	r3, r1
    27d6:	f000 81e7 	beq.w	2ba8 <usb_isr+0x454>
    27da:	f200 809a 	bhi.w	2912 <usb_isr+0x1be>
    27de:	2b82      	cmp	r3, #130	; 0x82
    27e0:	f000 81cb 	beq.w	2b7a <usb_isr+0x426>
    27e4:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    27e8:	f040 808a 	bne.w	2900 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    27ec:	f010 0f78 	tst.w	r0, #120	; 0x78
    27f0:	b283      	uxth	r3, r0
    27f2:	f000 8203 	beq.w	2bfc <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    27f6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    27fa:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    27fe:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    2802:	2a00      	cmp	r2, #0
    2804:	d1bd      	bne.n	2782 <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    2806:	4a6c      	ldr	r2, [pc, #432]	; (29b8 <usb_isr+0x264>)
    2808:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    280c:	2b00      	cmp	r3, #0
    280e:	d142      	bne.n	2896 <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    2810:	067e      	lsls	r6, r7, #25
    2812:	d516      	bpl.n	2842 <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    2814:	4b68      	ldr	r3, [pc, #416]	; (29b8 <usb_isr+0x264>)
    2816:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    281a:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    281e:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    2822:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    2826:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    282a:	2c00      	cmp	r4, #0
    282c:	d1fb      	bne.n	2826 <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    282e:	f04f 32ff 	mov.w	r2, #4294967295
    2832:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    2836:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    283a:	f000 fd2d 	bl	3298 <usb_serial_reset>
		endpointN_notify_mask = 0;
    283e:	4b60      	ldr	r3, [pc, #384]	; (29c0 <usb_isr+0x26c>)
    2840:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    2842:	01fc      	lsls	r4, r7, #7
    2844:	d503      	bpl.n	284e <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    2846:	4b5f      	ldr	r3, [pc, #380]	; (29c4 <usb_isr+0x270>)
    2848:	681b      	ldr	r3, [r3, #0]
    284a:	b103      	cbz	r3, 284e <usb_isr+0xfa>
    284c:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    284e:	01b8      	lsls	r0, r7, #6
    2850:	d503      	bpl.n	285a <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    2852:	4b5d      	ldr	r3, [pc, #372]	; (29c8 <usb_isr+0x274>)
    2854:	681b      	ldr	r3, [r3, #0]
    2856:	b103      	cbz	r3, 285a <usb_isr+0x106>
    2858:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    285a:	0779      	lsls	r1, r7, #29
    285c:	d508      	bpl.n	2870 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    285e:	4b56      	ldr	r3, [pc, #344]	; (29b8 <usb_isr+0x264>)
    2860:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    2864:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    2868:	d047      	beq.n	28fa <usb_isr+0x1a6>
			usb_high_speed = 1;
    286a:	4b58      	ldr	r3, [pc, #352]	; (29cc <usb_isr+0x278>)
    286c:	2201      	movs	r2, #1
    286e:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    2870:	4b51      	ldr	r3, [pc, #324]	; (29b8 <usb_isr+0x264>)
    2872:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    2876:	061a      	lsls	r2, r3, #24
    2878:	d50a      	bpl.n	2890 <usb_isr+0x13c>
    287a:	063b      	lsls	r3, r7, #24
    287c:	d508      	bpl.n	2890 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    287e:	4a54      	ldr	r2, [pc, #336]	; (29d0 <usb_isr+0x27c>)
    2880:	7813      	ldrb	r3, [r2, #0]
    2882:	b12b      	cbz	r3, 2890 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    2884:	3b01      	subs	r3, #1
    2886:	b2db      	uxtb	r3, r3
    2888:	7013      	strb	r3, [r2, #0]
    288a:	2b00      	cmp	r3, #0
    288c:	f000 8272 	beq.w	2d74 <usb_isr+0x620>
}
    2890:	b003      	add	sp, #12
    2892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    2896:	494f      	ldr	r1, [pc, #316]	; (29d4 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    2898:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    289c:	6808      	ldr	r0, [r1, #0]
    289e:	4203      	tst	r3, r0
    28a0:	f040 81d1 	bne.w	2c46 <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    28a4:	4a46      	ldr	r2, [pc, #280]	; (29c0 <usb_isr+0x26c>)
    28a6:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    28a8:	401c      	ands	r4, r3
    28aa:	d0b1      	beq.n	2810 <usb_isr+0xbc>
				while (tx) {
    28ac:	ea5f 4814 	movs.w	r8, r4, lsr #16
    28b0:	d010      	beq.n	28d4 <usb_isr+0x180>
    28b2:	4e42      	ldr	r6, [pc, #264]	; (29bc <usb_isr+0x268>)
					tx &= ~(1<<p);
    28b4:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    28b8:	fa98 f5a8 	rbit	r5, r8
    28bc:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    28c0:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    28c4:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    28c8:	3040      	adds	r0, #64	; 0x40
    28ca:	f7ff fec5 	bl	2658 <run_callbacks>
				while (tx) {
    28ce:	ea38 0805 	bics.w	r8, r8, r5
    28d2:	d1f1      	bne.n	28b8 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    28d4:	b2a4      	uxth	r4, r4
				while(rx) {
    28d6:	2c00      	cmp	r4, #0
    28d8:	d09a      	beq.n	2810 <usb_isr+0xbc>
    28da:	4e38      	ldr	r6, [pc, #224]	; (29bc <usb_isr+0x268>)
					rx &= ~(1<<p);
    28dc:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    28e0:	fa94 f5a4 	rbit	r5, r4
    28e4:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    28e8:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    28ec:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    28f0:	f7ff feb2 	bl	2658 <run_callbacks>
				while(rx) {
    28f4:	43ac      	bics	r4, r5
    28f6:	d1f3      	bne.n	28e0 <usb_isr+0x18c>
    28f8:	e78a      	b.n	2810 <usb_isr+0xbc>
			usb_high_speed = 0;
    28fa:	4a34      	ldr	r2, [pc, #208]	; (29cc <usb_isr+0x278>)
    28fc:	7013      	strb	r3, [r2, #0]
    28fe:	e7b7      	b.n	2870 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    2900:	2b80      	cmp	r3, #128	; 0x80
    2902:	f47f af78 	bne.w	27f6 <usb_isr+0xa2>
		reply_buffer[0] = 0;
    2906:	4834      	ldr	r0, [pc, #208]	; (29d8 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    2908:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    290a:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    290c:	f7ff fec0 	bl	2690 <endpoint0_transmit.constprop.0>
		return;
    2910:	e775      	b.n	27fe <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    2912:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    2916:	f000 810b 	beq.w	2b30 <usb_isr+0x3dc>
    291a:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    291e:	2b01      	cmp	r3, #1
    2920:	f63f af69 	bhi.w	27f6 <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    2924:	4b2d      	ldr	r3, [pc, #180]	; (29dc <usb_isr+0x288>)
    2926:	685d      	ldr	r5, [r3, #4]
    2928:	2d00      	cmp	r5, #0
    292a:	f43f af64 	beq.w	27f6 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    292e:	fa1f fc8c 	uxth.w	ip, ip
    2932:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    2936:	e004      	b.n	2942 <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    2938:	691d      	ldr	r5, [r3, #16]
    293a:	330c      	adds	r3, #12
    293c:	2d00      	cmp	r5, #0
    293e:	f43f af5a 	beq.w	27f6 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2942:	881a      	ldrh	r2, [r3, #0]
    2944:	4572      	cmp	r2, lr
    2946:	d1f7      	bne.n	2938 <usb_isr+0x1e4>
    2948:	885a      	ldrh	r2, [r3, #2]
    294a:	4562      	cmp	r2, ip
    294c:	d1f4      	bne.n	2938 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    294e:	ea4f 221e 	mov.w	r2, lr, lsr #8
    2952:	2a03      	cmp	r2, #3
    2954:	f000 81a5 	beq.w	2ca2 <usb_isr+0x54e>
					datalen = list->length;
    2958:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    295a:	0c00      	lsrs	r0, r0, #16
    295c:	4282      	cmp	r2, r0
    295e:	bf28      	it	cs
    2960:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    2962:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    2966:	f040 81a1 	bne.w	2cac <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    296a:	4b18      	ldr	r3, [pc, #96]	; (29cc <usb_isr+0x278>)
    296c:	491c      	ldr	r1, [pc, #112]	; (29e0 <usb_isr+0x28c>)
    296e:	7818      	ldrb	r0, [r3, #0]
    2970:	4b1c      	ldr	r3, [pc, #112]	; (29e4 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    2972:	9201      	str	r2, [sp, #4]
    2974:	2800      	cmp	r0, #0
    2976:	bf18      	it	ne
    2978:	4619      	movne	r1, r3
    297a:	481b      	ldr	r0, [pc, #108]	; (29e8 <usb_isr+0x294>)
    297c:	f7ff fab6 	bl	1eec <memcpy>
    2980:	4d19      	ldr	r5, [pc, #100]	; (29e8 <usb_isr+0x294>)
    2982:	9a01      	ldr	r2, [sp, #4]
    2984:	e1e1      	b.n	2d4a <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    2986:	f242 2121 	movw	r1, #8737	; 0x2221
    298a:	428b      	cmp	r3, r1
    298c:	d07c      	beq.n	2a88 <usb_isr+0x334>
    298e:	d933      	bls.n	29f8 <usb_isr+0x2a4>
    2990:	f242 3121 	movw	r1, #8993	; 0x2321
    2994:	428b      	cmp	r3, r1
    2996:	f000 8081 	beq.w	2a9c <usb_isr+0x348>
    299a:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    299e:	428b      	cmp	r3, r1
    29a0:	f47f af29 	bne.w	27f6 <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    29a4:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    29a8:	b283      	uxth	r3, r0
    29aa:	f47f af24 	bne.w	27f6 <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    29ae:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    29b2:	f363 0c0f 	bfi	ip, r3, #0, #16
    29b6:	e7b5      	b.n	2924 <usb_isr+0x1d0>
    29b8:	402e0000 	.word	0x402e0000
    29bc:	20000000 	.word	0x20000000
    29c0:	200025ac 	.word	0x200025ac
    29c4:	20002690 	.word	0x20002690
    29c8:	20002694 	.word	0x20002694
    29cc:	200026b7 	.word	0x200026b7
    29d0:	200026b8 	.word	0x200026b8
    29d4:	200025a8 	.word	0x200025a8
    29d8:	200025fc 	.word	0x200025fc
    29dc:	20000d04 	.word	0x20000d04
    29e0:	60001b18 	.word	0x60001b18
    29e4:	60001b7c 	.word	0x60001b7c
    29e8:	20200000 	.word	0x20200000
    29ec:	200025a0 	.word	0x200025a0
    29f0:	b8c6cf5d 	.word	0xb8c6cf5d
    29f4:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    29f8:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    29fc:	d066      	beq.n	2acc <usb_isr+0x378>
    29fe:	f242 0121 	movw	r1, #8225	; 0x2021
    2a02:	428b      	cmp	r3, r1
    2a04:	f47f aef7 	bne.w	27f6 <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    2a08:	0c03      	lsrs	r3, r0, #16
    2a0a:	2b07      	cmp	r3, #7
    2a0c:	f47f aef3 	bne.w	27f6 <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    2a10:	4bb2      	ldr	r3, [pc, #712]	; (2cdc <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2a12:	49b3      	ldr	r1, [pc, #716]	; (2ce0 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    2a14:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2a16:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    2a18:	49b2      	ldr	r1, [pc, #712]	; (2ce4 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    2a1a:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    2a1c:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    2a20:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    2a24:	2201      	movs	r2, #1
    2a26:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2a28:	4aaf      	ldr	r2, [pc, #700]	; (2ce8 <usb_isr+0x594>)
    2a2a:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    2a2c:	4aaf      	ldr	r2, [pc, #700]	; (2cec <usb_isr+0x598>)
    2a2e:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    2a30:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    2a34:	f041 0101 	orr.w	r1, r1, #1
    2a38:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2a3c:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2a40:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2a44:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2a46:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    2a48:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2a4c:	2b00      	cmp	r3, #0
    2a4e:	d1fb      	bne.n	2a48 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    2a50:	4aa7      	ldr	r2, [pc, #668]	; (2cf0 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    2a52:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    2a54:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    2a56:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2a58:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    2a5a:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2a5c:	f248 0380 	movw	r3, #32896	; 0x8080
    2a60:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2a62:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2a66:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2a6a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2a72:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    2a76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2a7a:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    2a7e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2a82:	2b00      	cmp	r3, #0
    2a84:	d1fb      	bne.n	2a7e <usb_isr+0x32a>
    2a86:	e6ba      	b.n	27fe <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    2a88:	b280      	uxth	r0, r0
    2a8a:	b938      	cbnz	r0, 2a9c <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2a8c:	4b99      	ldr	r3, [pc, #612]	; (2cf4 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    2a8e:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2a92:	6819      	ldr	r1, [r3, #0]
    2a94:	4b98      	ldr	r3, [pc, #608]	; (2cf8 <usb_isr+0x5a4>)
    2a96:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    2a98:	4b98      	ldr	r3, [pc, #608]	; (2cfc <usb_isr+0x5a8>)
    2a9a:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    2a9c:	4b94      	ldr	r3, [pc, #592]	; (2cf0 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    2a9e:	2200      	movs	r2, #0
    2aa0:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    2aa2:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    2aa4:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2aa6:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    2aa8:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2aaa:	2280      	movs	r2, #128	; 0x80
    2aac:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2aae:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2ab2:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2ab6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2abe:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    2ac2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2ac6:	2b00      	cmp	r3, #0
    2ac8:	d1fb      	bne.n	2ac2 <usb_isr+0x36e>
    2aca:	e698      	b.n	27fe <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    2acc:	f3c2 4207 	ubfx	r2, r2, #16, #8
    2ad0:	4b8b      	ldr	r3, [pc, #556]	; (2d00 <usb_isr+0x5ac>)
    2ad2:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    2ad4:	4b8b      	ldr	r3, [pc, #556]	; (2d04 <usb_isr+0x5b0>)
    2ad6:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    2ada:	4b8b      	ldr	r3, [pc, #556]	; (2d08 <usb_isr+0x5b4>)
    2adc:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    2ae0:	4b8a      	ldr	r3, [pc, #552]	; (2d0c <usb_isr+0x5b8>)
    2ae2:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    2ae6:	f000 fbd9 	bl	329c <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    2aea:	2280      	movs	r2, #128	; 0x80
    2aec:	4629      	mov	r1, r5
    2aee:	4888      	ldr	r0, [pc, #544]	; (2d10 <usb_isr+0x5bc>)
    2af0:	f001 fd60 	bl	45b4 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    2af4:	4b87      	ldr	r3, [pc, #540]	; (2d14 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2af6:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    2af8:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    2afc:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    2b00:	4b7b      	ldr	r3, [pc, #492]	; (2cf0 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    2b02:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2b04:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    2b06:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2b08:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    2b0a:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    2b0c:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2b0e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2b12:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2b16:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2b1e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    2b22:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    2b26:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2b2a:	2b00      	cmp	r3, #0
    2b2c:	d1fb      	bne.n	2b26 <usb_isr+0x3d2>
    2b2e:	e666      	b.n	27fe <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    2b30:	4b6f      	ldr	r3, [pc, #444]	; (2cf0 <usb_isr+0x59c>)
    2b32:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    2b34:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    2b36:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2b38:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    2b3a:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2b3c:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2b3e:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2b40:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2b44:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2b48:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2b50:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    2b54:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2b58:	2b00      	cmp	r3, #0
    2b5a:	d1fb      	bne.n	2b54 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    2b5c:	0c13      	lsrs	r3, r2, #16
    2b5e:	065b      	lsls	r3, r3, #25
    2b60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    2b64:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    2b68:	e649      	b.n	27fe <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    2b6a:	4b65      	ldr	r3, [pc, #404]	; (2d00 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    2b6c:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    2b6e:	486a      	ldr	r0, [pc, #424]	; (2d18 <usb_isr+0x5c4>)
    2b70:	781b      	ldrb	r3, [r3, #0]
    2b72:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    2b74:	f7ff fd8c 	bl	2690 <endpoint0_transmit.constprop.0>
		return;
    2b78:	e641      	b.n	27fe <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    2b7a:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    2b7c:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    2b80:	f47f ae39 	bne.w	27f6 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    2b84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    2b88:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    2b8c:	4a62      	ldr	r2, [pc, #392]	; (2d18 <usb_isr+0x5c4>)
    2b8e:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    2b90:	0618      	lsls	r0, r3, #24
    2b92:	f100 809e 	bmi.w	2cd2 <usb_isr+0x57e>
    2b96:	07cb      	lsls	r3, r1, #31
    2b98:	d501      	bpl.n	2b9e <usb_isr+0x44a>
			reply_buffer[0] = 1;
    2b9a:	2301      	movs	r3, #1
    2b9c:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    2b9e:	2102      	movs	r1, #2
    2ba0:	485d      	ldr	r0, [pc, #372]	; (2d18 <usb_isr+0x5c4>)
    2ba2:	f7ff fd75 	bl	2690 <endpoint0_transmit.constprop.0>
		return;
    2ba6:	e62a      	b.n	27fe <usb_isr+0xaa>
		if (endpoint > 7) break;
    2ba8:	f010 0f78 	tst.w	r0, #120	; 0x78
    2bac:	b283      	uxth	r3, r0
    2bae:	f47f ae22 	bne.w	27f6 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    2bb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    2bb6:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    2bba:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    2bbe:	bf14      	ite	ne
    2bc0:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    2bc4:	f043 0301 	orreq.w	r3, r3, #1
    2bc8:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    2bcc:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    2bce:	4b48      	ldr	r3, [pc, #288]	; (2cf0 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    2bd0:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    2bd2:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    2bd4:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2bd6:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    2bd8:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2bda:	2280      	movs	r2, #128	; 0x80
    2bdc:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2bde:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2be2:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2be6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2bee:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    2bf2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2bf6:	2b00      	cmp	r3, #0
    2bf8:	d1fb      	bne.n	2bf2 <usb_isr+0x49e>
    2bfa:	e600      	b.n	27fe <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    2bfc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    2c00:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    2c04:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    2c08:	bf14      	ite	ne
    2c0a:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    2c0e:	f023 0301 	biceq.w	r3, r3, #1
    2c12:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    2c16:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    2c18:	4b35      	ldr	r3, [pc, #212]	; (2cf0 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    2c1a:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    2c1c:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    2c1e:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2c20:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    2c22:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2c24:	2280      	movs	r2, #128	; 0x80
    2c26:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2c28:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2c2c:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2c30:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2c38:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    2c3c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2c40:	2b00      	cmp	r3, #0
    2c42:	d1fb      	bne.n	2c3c <usb_isr+0x4e8>
    2c44:	e5db      	b.n	27fe <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    2c46:	2000      	movs	r0, #0
    2c48:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    2c4a:	4926      	ldr	r1, [pc, #152]	; (2ce4 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    2c4c:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    2c4e:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    2c50:	f242 0121 	movw	r1, #8225	; 0x2021
    2c54:	428c      	cmp	r4, r1
    2c56:	f47f ae25 	bne.w	28a4 <usb_isr+0x150>
    2c5a:	b280      	uxth	r0, r0
    2c5c:	2800      	cmp	r0, #0
    2c5e:	f47f ae21 	bne.w	28a4 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    2c62:	492e      	ldr	r1, [pc, #184]	; (2d1c <usb_isr+0x5c8>)
    2c64:	4c2e      	ldr	r4, [pc, #184]	; (2d20 <usb_isr+0x5cc>)
    2c66:	c903      	ldmia	r1, {r0, r1}
    2c68:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    2c6a:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    2c6c:	ea4f 4111 	mov.w	r1, r1, lsr #16
    2c70:	6020      	str	r0, [r4, #0]
    2c72:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    2c74:	f47f ae16 	bne.w	28a4 <usb_isr+0x150>
	__disable_irq();
    2c78:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    2c7a:	482a      	ldr	r0, [pc, #168]	; (2d24 <usb_isr+0x5d0>)
    2c7c:	7801      	ldrb	r1, [r0, #0]
    2c7e:	f041 0108 	orr.w	r1, r1, #8
    2c82:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    2c84:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    2c88:	060d      	lsls	r5, r1, #24
    2c8a:	d405      	bmi.n	2c98 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    2c8c:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    2c8e:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    2c90:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    2c94:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    2c98:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    2c9a:	4a23      	ldr	r2, [pc, #140]	; (2d28 <usb_isr+0x5d4>)
    2c9c:	2150      	movs	r1, #80	; 0x50
    2c9e:	7011      	strb	r1, [r2, #0]
    2ca0:	e600      	b.n	28a4 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    2ca2:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    2ca4:	782a      	ldrb	r2, [r5, #0]
    2ca6:	4282      	cmp	r2, r0
    2ca8:	bf28      	it	cs
    2caa:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    2cac:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    2cb0:	d144      	bne.n	2d3c <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    2cb2:	4b1e      	ldr	r3, [pc, #120]	; (2d2c <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    2cb4:	4d1e      	ldr	r5, [pc, #120]	; (2d30 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    2cb6:	7818      	ldrb	r0, [r3, #0]
    2cb8:	491e      	ldr	r1, [pc, #120]	; (2d34 <usb_isr+0x5e0>)
    2cba:	4b1f      	ldr	r3, [pc, #124]	; (2d38 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    2cbc:	9201      	str	r2, [sp, #4]
    2cbe:	2800      	cmp	r0, #0
    2cc0:	bf18      	it	ne
    2cc2:	4619      	movne	r1, r3
    2cc4:	4628      	mov	r0, r5
    2cc6:	f7ff f911 	bl	1eec <memcpy>
					usb_descriptor_buffer[1] = 7;
    2cca:	2307      	movs	r3, #7
    2ccc:	706b      	strb	r3, [r5, #1]
    2cce:	9a01      	ldr	r2, [sp, #4]
    2cd0:	e03b      	b.n	2d4a <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    2cd2:	03c9      	lsls	r1, r1, #15
    2cd4:	f53f af61 	bmi.w	2b9a <usb_isr+0x446>
    2cd8:	e761      	b.n	2b9e <usb_isr+0x44a>
    2cda:	bf00      	nop
    2cdc:	20001ae0 	.word	0x20001ae0
    2ce0:	200035a0 	.word	0x200035a0
    2ce4:	20001c98 	.word	0x20001c98
    2ce8:	00070080 	.word	0x00070080
    2cec:	200045a0 	.word	0x200045a0
    2cf0:	20001ac0 	.word	0x20001ac0
    2cf4:	2000267c 	.word	0x2000267c
    2cf8:	2000268c 	.word	0x2000268c
    2cfc:	200026b5 	.word	0x200026b5
    2d00:	200026b6 	.word	0x200026b6
    2d04:	00cc0002 	.word	0x00cc0002
    2d08:	000200c8 	.word	0x000200c8
    2d0c:	00c80002 	.word	0x00c80002
    2d10:	20000080 	.word	0x20000080
    2d14:	74d59319 	.word	0x74d59319
    2d18:	200025fc 	.word	0x200025fc
    2d1c:	200025a0 	.word	0x200025a0
    2d20:	20002684 	.word	0x20002684
    2d24:	200026b1 	.word	0x200026b1
    2d28:	200026b8 	.word	0x200026b8
    2d2c:	200026b7 	.word	0x200026b7
    2d30:	20200000 	.word	0x20200000
    2d34:	60001b7c 	.word	0x60001b7c
    2d38:	60001b18 	.word	0x60001b18
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    2d3c:	4629      	mov	r1, r5
    2d3e:	4d10      	ldr	r5, [pc, #64]	; (2d80 <usb_isr+0x62c>)
    2d40:	9201      	str	r2, [sp, #4]
    2d42:	4628      	mov	r0, r5
    2d44:	f7ff f8d2 	bl	1eec <memcpy>
    2d48:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2d4a:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    2d4e:	4415      	add	r5, r2
	asm("dsb");
    2d50:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    2d54:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2d58:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    2d5c:	3320      	adds	r3, #32
	} while (location < end_addr);
    2d5e:	429d      	cmp	r5, r3
    2d60:	d8fa      	bhi.n	2d58 <usb_isr+0x604>
	asm("dsb");
    2d62:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2d66:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    2d6a:	4805      	ldr	r0, [pc, #20]	; (2d80 <usb_isr+0x62c>)
    2d6c:	4611      	mov	r1, r2
    2d6e:	f7ff fc8f 	bl	2690 <endpoint0_transmit.constprop.0>
				return;
    2d72:	e544      	b.n	27fe <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    2d74:	2003      	movs	r0, #3
    2d76:	f7ff fcd7 	bl	2728 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    2d7a:	f006 ff41 	bl	9c00 <___reboot_Teensyduino__veneer>
    2d7e:	bf00      	nop
    2d80:	20200000 	.word	0x20200000

00002d84 <usb_config_rx>:
{
    2d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2d88:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    2d8a:	1e83      	subs	r3, r0, #2
    2d8c:	2b02      	cmp	r3, #2
    2d8e:	d901      	bls.n	2d94 <usb_config_rx+0x10>
}
    2d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    2d94:	f8df 904c 	ldr.w	r9, [pc, #76]	; 2de4 <usb_config_rx+0x60>
    2d98:	4615      	mov	r5, r2
    2d9a:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    2d9c:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    2d9e:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    2da2:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    2da4:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    2da8:	2100      	movs	r1, #0
    2daa:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2dae:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    2db0:	f001 fc00 	bl	45b4 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2db4:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    2db8:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2dba:	0952      	lsrs	r2, r2, #5
    2dbc:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    2dc0:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    2dc4:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    2dc8:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    2dcc:	2f00      	cmp	r7, #0
    2dce:	d0df      	beq.n	2d90 <usb_config_rx+0xc>
    2dd0:	4a03      	ldr	r2, [pc, #12]	; (2de0 <usb_config_rx+0x5c>)
    2dd2:	40b3      	lsls	r3, r6
    2dd4:	6811      	ldr	r1, [r2, #0]
    2dd6:	430b      	orrs	r3, r1
    2dd8:	6013      	str	r3, [r2, #0]
}
    2dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2dde:	bf00      	nop
    2de0:	200025ac 	.word	0x200025ac
    2de4:	20000000 	.word	0x20000000

00002de8 <usb_config_tx>:
{
    2de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2dec:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    2dee:	1e81      	subs	r1, r0, #2
    2df0:	2902      	cmp	r1, #2
    2df2:	d901      	bls.n	2df8 <usb_config_tx+0x10>
}
    2df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    2df8:	01c7      	lsls	r7, r0, #7
    2dfa:	f8df 904c 	ldr.w	r9, [pc, #76]	; 2e48 <usb_config_tx+0x60>
    2dfe:	4692      	mov	sl, r2
    2e00:	4604      	mov	r4, r0
    2e02:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    2e04:	223c      	movs	r2, #60	; 0x3c
    2e06:	2100      	movs	r1, #0
    2e08:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    2e0a:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2e0e:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    2e10:	f108 0004 	add.w	r0, r8, #4
    2e14:	f001 fbce 	bl	45b4 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2e18:	faba f28a 	clz	r2, sl
    2e1c:	0952      	lsrs	r2, r2, #5
    2e1e:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    2e22:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    2e26:	2201      	movs	r2, #1
	qh->callback_function = callback;
    2e28:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    2e2c:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    2e30:	2e00      	cmp	r6, #0
    2e32:	d0df      	beq.n	2df4 <usb_config_tx+0xc>
    2e34:	4b03      	ldr	r3, [pc, #12]	; (2e44 <usb_config_tx+0x5c>)
    2e36:	3410      	adds	r4, #16
    2e38:	6819      	ldr	r1, [r3, #0]
    2e3a:	40a2      	lsls	r2, r4
    2e3c:	430a      	orrs	r2, r1
    2e3e:	601a      	str	r2, [r3, #0]
}
    2e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e44:	200025ac 	.word	0x200025ac
    2e48:	20000000 	.word	0x20000000

00002e4c <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    2e4c:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    2e4e:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    2e50:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    2e52:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    2e56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    2e5a:	b410      	push	{r4}
	transfer->next = 1;
    2e5c:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    2e5e:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    2e60:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    2e64:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    2e66:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    2e6a:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    2e6e:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    2e70:	6181      	str	r1, [r0, #24]
}
    2e72:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    2e76:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    2e7a:	4770      	bx	lr

00002e7c <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2e7c:	1e83      	subs	r3, r0, #2
{
    2e7e:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2e80:	2b02      	cmp	r3, #2
    2e82:	d900      	bls.n	2e86 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    2e84:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    2e86:	4b06      	ldr	r3, [pc, #24]	; (2ea0 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    2e88:	f100 0110 	add.w	r1, r0, #16
    2e8c:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    2e90:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    2e94:	fa0c f101 	lsl.w	r1, ip, r1
    2e98:	3040      	adds	r0, #64	; 0x40
    2e9a:	f7ff bb99 	b.w	25d0 <schedule_transfer>
    2e9e:	bf00      	nop
    2ea0:	20000000 	.word	0x20000000

00002ea4 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2ea4:	1e83      	subs	r3, r0, #2
{
    2ea6:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2ea8:	2b02      	cmp	r3, #2
    2eaa:	d900      	bls.n	2eae <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    2eac:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    2eae:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    2eb0:	4b02      	ldr	r3, [pc, #8]	; (2ebc <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    2eb2:	4081      	lsls	r1, r0
    2eb4:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    2eb8:	f7ff bb8a 	b.w	25d0 <schedule_transfer>
    2ebc:	20000000 	.word	0x20000000

00002ec0 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    2ec0:	6840      	ldr	r0, [r0, #4]
#endif
}
    2ec2:	4770      	bx	lr

00002ec4 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    2ec4:	4a12      	ldr	r2, [pc, #72]	; (2f10 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    2ec6:	4b13      	ldr	r3, [pc, #76]	; (2f14 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    2ec8:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    2ecc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    2ed0:	4298      	cmp	r0, r3
{
    2ed2:	b510      	push	{r4, lr}
    2ed4:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    2ed6:	d202      	bcs.n	2ede <usb_init_serialnumber+0x1a>
    2ed8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2edc:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    2ede:	4c0e      	ldr	r4, [pc, #56]	; (2f18 <usb_init_serialnumber+0x54>)
    2ee0:	a901      	add	r1, sp, #4
    2ee2:	220a      	movs	r2, #10
    2ee4:	f7ff f89c 	bl	2020 <ultoa>
	for (i=0; i<10; i++) {
    2ee8:	a901      	add	r1, sp, #4
    2eea:	2300      	movs	r3, #0
    2eec:	4620      	mov	r0, r4
		char c = buf[i];
    2eee:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    2ef2:	3301      	adds	r3, #1
		if (!c) break;
    2ef4:	b13a      	cbz	r2, 2f06 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    2ef6:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    2ef8:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    2efc:	d1f7      	bne.n	2eee <usb_init_serialnumber+0x2a>
    2efe:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    2f00:	7023      	strb	r3, [r4, #0]
}
    2f02:	b004      	add	sp, #16
    2f04:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    2f06:	005b      	lsls	r3, r3, #1
    2f08:	b2db      	uxtb	r3, r3
    2f0a:	7023      	strb	r3, [r4, #0]
}
    2f0c:	b004      	add	sp, #16
    2f0e:	bd10      	pop	{r4, pc}
    2f10:	401f4400 	.word	0x401f4400
    2f14:	00989680 	.word	0x00989680
    2f18:	20001720 	.word	0x20001720

00002f1c <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    2f1c:	f000 bad2 	b.w	34c4 <usb_serial_flush_input>

00002f20 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    2f20:	f000 baa2 	b.w	3468 <usb_serial_peekchar>

00002f24 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    2f24:	f000 bb06 	b.w	3534 <usb_serial_getchar>

00002f28 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    2f28:	f000 bac0 	b.w	34ac <usb_serial_available>

00002f2c <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    2f2c:	f000 bb5c 	b.w	35e8 <usb_serial_flush_output>

00002f30 <usb_serial_class::availableForWrite()>:
	size_t write(int n) { return write((uint8_t)n); }
	// Returns the number of bytes which may be transmitted by write() or print()
	// without waiting.  Typically programs which must maintain rapid checking
	// and response to sensors use availableForWrite() to decide whether to
	// transmit.
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    2f30:	f000 bb32 	b.w	3598 <usb_serial_write_buffer_free>

00002f34 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2f34:	4608      	mov	r0, r1
    2f36:	4611      	mov	r1, r2
    2f38:	f000 bb22 	b.w	3580 <usb_serial_write>

00002f3c <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    2f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    2f3e:	4c14      	ldr	r4, [pc, #80]	; (2f90 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2f40:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2f44:	4e13      	ldr	r6, [pc, #76]	; (2f94 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2f46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    2f4a:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2f4e:	4f12      	ldr	r7, [pc, #72]	; (2f98 <rx_queue_transfer+0x5c>)
    2f50:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    2f54:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2f56:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2f5a:	4621      	mov	r1, r4
    2f5c:	883a      	ldrh	r2, [r7, #0]
    2f5e:	4630      	mov	r0, r6
    2f60:	f7ff ff74 	bl	2e4c <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    2f64:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    2f66:	4423      	add	r3, r4
	asm("dsb");
    2f68:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    2f6c:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    2f70:	3420      	adds	r4, #32
	} while (location < end_addr);
    2f72:	42a3      	cmp	r3, r4
    2f74:	d8fa      	bhi.n	2f6c <rx_queue_transfer+0x30>
	asm("dsb");
    2f76:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2f7a:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    2f7e:	2003      	movs	r0, #3
    2f80:	4631      	mov	r1, r6
    2f82:	f7ff ff8f 	bl	2ea4 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    2f86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    2f8a:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    2f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f90:	20200080 	.word	0x20200080
    2f94:	20001b00 	.word	0x20001b00
    2f98:	2000269c 	.word	0x2000269c

00002f9c <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    2f9c:	4b24      	ldr	r3, [pc, #144]	; (3030 <rx_event+0x94>)
{
    2f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    2fa2:	881c      	ldrh	r4, [r3, #0]
    2fa4:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    2fa6:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    2fa8:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2fac:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    2fae:	2c00      	cmp	r4, #0
    2fb0:	dd24      	ble.n	2ffc <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    2fb2:	4920      	ldr	r1, [pc, #128]	; (3034 <rx_event+0x98>)
		if (head != rx_tail) {
    2fb4:	4820      	ldr	r0, [pc, #128]	; (3038 <rx_event+0x9c>)
		uint32_t head = rx_head;
    2fb6:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    2fb8:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    2fba:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    2fbc:	4e1f      	ldr	r6, [pc, #124]	; (303c <rx_event+0xa0>)
		if (head != rx_tail) {
    2fbe:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    2fc0:	481f      	ldr	r0, [pc, #124]	; (3040 <rx_event+0xa4>)
		if (head != rx_tail) {
    2fc2:	d007      	beq.n	2fd4 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    2fc4:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    2fc8:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    2fcc:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    2fd0:	4294      	cmp	r4, r2
    2fd2:	d918      	bls.n	3006 <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    2fd4:	3301      	adds	r3, #1
		rx_index[i] = 0;
    2fd6:	2200      	movs	r2, #0
		rx_count[i] = len;
    2fd8:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    2fdc:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    2fde:	4e19      	ldr	r6, [pc, #100]	; (3044 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    2fe0:	bf88      	it	hi
    2fe2:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    2fe4:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    2fe8:	bf98      	it	ls
    2fea:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    2fec:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    2fee:	4b16      	ldr	r3, [pc, #88]	; (3048 <rx_event+0xac>)
		rx_head = head;
    2ff0:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    2ff2:	681a      	ldr	r2, [r3, #0]
    2ff4:	4414      	add	r4, r2
    2ff6:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    2ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    2ffc:	4628      	mov	r0, r5
}
    2ffe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    3002:	f7ff bf9b 	b.w	2f3c <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    3006:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    300a:	4910      	ldr	r1, [pc, #64]	; (304c <rx_event+0xb0>)
    300c:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    300e:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    3010:	4408      	add	r0, r1
    3012:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    3016:	f7fe ff69 	bl	1eec <memcpy>
				rx_available += len;
    301a:	4a0b      	ldr	r2, [pc, #44]	; (3048 <rx_event+0xac>)
				rx_queue_transfer(i);
    301c:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    301e:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    3022:	6813      	ldr	r3, [r2, #0]
    3024:	4423      	add	r3, r4
}
    3026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    302a:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    302c:	f7ff bf86 	b.w	2f3c <rx_queue_transfer>
    3030:	2000269c 	.word	0x2000269c
    3034:	200026af 	.word	0x200026af
    3038:	200026b0 	.word	0x200026b0
    303c:	20002610 	.word	0x20002610
    3040:	20002630 	.word	0x20002630
    3044:	20002620 	.word	0x20002620
    3048:	2000260c 	.word	0x2000260c
    304c:	20200080 	.word	0x20200080

00003050 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    3050:	4b1d      	ldr	r3, [pc, #116]	; (30c8 <usb_serial_flush_callback+0x78>)
    3052:	781a      	ldrb	r2, [r3, #0]
    3054:	2a00      	cmp	r2, #0
    3056:	d136      	bne.n	30c6 <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    3058:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    305c:	4a1b      	ldr	r2, [pc, #108]	; (30cc <usb_serial_flush_callback+0x7c>)
    305e:	7812      	ldrb	r2, [r2, #0]
    3060:	b38a      	cbz	r2, 30c6 <usb_serial_flush_callback+0x76>
{
    3062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    3066:	4d1a      	ldr	r5, [pc, #104]	; (30d0 <usb_serial_flush_callback+0x80>)
    3068:	882a      	ldrh	r2, [r5, #0]
    306a:	b352      	cbz	r2, 30c2 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    306c:	4e19      	ldr	r6, [pc, #100]	; (30d4 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    306e:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    3072:	4f19      	ldr	r7, [pc, #100]	; (30d8 <usb_serial_flush_callback+0x88>)
    3074:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    3076:	4c19      	ldr	r4, [pc, #100]	; (30dc <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    3078:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    307c:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    3080:	4642      	mov	r2, r8
    3082:	4638      	mov	r0, r7
    3084:	4621      	mov	r1, r4
    3086:	f7ff fee1 	bl	2e4c <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    308a:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    308e:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    3092:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3096:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    309a:	3420      	adds	r4, #32
	} while (location < end_addr);
    309c:	42a2      	cmp	r2, r4
    309e:	d8fa      	bhi.n	3096 <usb_serial_flush_callback+0x46>
	asm("dsb");
    30a0:	f3bf 8f4f 	dsb	sy
	asm("isb");
    30a4:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    30a8:	2004      	movs	r0, #4
    30aa:	4639      	mov	r1, r7
    30ac:	f7ff fee6 	bl	2e7c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    30b0:	7833      	ldrb	r3, [r6, #0]
    30b2:	3301      	adds	r3, #1
    30b4:	b2db      	uxtb	r3, r3
    30b6:	2b03      	cmp	r3, #3
    30b8:	bf88      	it	hi
    30ba:	2300      	movhi	r3, #0
    30bc:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    30be:	2300      	movs	r3, #0
    30c0:	802b      	strh	r3, [r5, #0]
}
    30c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    30c6:	4770      	bx	lr
    30c8:	200026b4 	.word	0x200026b4
    30cc:	200026b6 	.word	0x200026b6
    30d0:	2000269e 	.word	0x2000269e
    30d4:	200026b3 	.word	0x200026b3
    30d8:	20001c00 	.word	0x20001c00
    30dc:	20201080 	.word	0x20201080

000030e0 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    30e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    30e4:	b085      	sub	sp, #20
	while (size > 0) {
    30e6:	e9cd 1001 	strd	r1, r0, [sp, #4]
    30ea:	2900      	cmp	r1, #0
    30ec:	f000 80bf 	beq.w	326e <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    30f0:	2300      	movs	r3, #0
    30f2:	4c60      	ldr	r4, [pc, #384]	; (3274 <usb_serial_write.part.0+0x194>)
    30f4:	f8df 8198 	ldr.w	r8, [pc, #408]	; 3290 <usb_serial_write.part.0+0x1b0>
    30f8:	f8df a198 	ldr.w	sl, [pc, #408]	; 3294 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    30fc:	4f5e      	ldr	r7, [pc, #376]	; (3278 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    30fe:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    3100:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    3102:	4a5e      	ldr	r2, [pc, #376]	; (327c <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    3104:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    3106:	4b5e      	ldr	r3, [pc, #376]	; (3280 <usb_serial_write.part.0+0x1a0>)
    3108:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    310a:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    310e:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    3112:	2b00      	cmp	r3, #0
    3114:	f040 80a7 	bne.w	3266 <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    3118:	461e      	mov	r6, r3
		int waiting=0;
    311a:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    311c:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    311e:	4648      	mov	r0, r9
    3120:	f7ff fece 	bl	2ec0 <usb_transfer_status>
			if (!(status & 0x80)) {
    3124:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    3128:	f000 808c 	beq.w	3244 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    312c:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    3130:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    3134:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    3138:	b905      	cbnz	r5, 313c <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    313a:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    313c:	2b00      	cmp	r3, #0
    313e:	d17d      	bne.n	323c <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    3140:	683b      	ldr	r3, [r7, #0]
    3142:	1b9b      	subs	r3, r3, r6
    3144:	2b78      	cmp	r3, #120	; 0x78
    3146:	f200 8087 	bhi.w	3258 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    314a:	4b4e      	ldr	r3, [pc, #312]	; (3284 <usb_serial_write.part.0+0x1a4>)
    314c:	781b      	ldrb	r3, [r3, #0]
    314e:	2b00      	cmp	r3, #0
    3150:	d074      	beq.n	323c <usb_serial_write.part.0+0x15c>
			yield();
    3152:	f000 fa93 	bl	367c <yield>
			tx_noautoflush = 1;
    3156:	2201      	movs	r2, #1
		while (!tx_available) {
    3158:	f8b8 3000 	ldrh.w	r3, [r8]
    315c:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    315e:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    3160:	2b00      	cmp	r3, #0
    3162:	d0dc      	beq.n	311e <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    3164:	4a46      	ldr	r2, [pc, #280]	; (3280 <usb_serial_write.part.0+0x1a0>)
    3166:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    316a:	7811      	ldrb	r1, [r2, #0]
    316c:	461a      	mov	r2, r3
    316e:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    3172:	4d45      	ldr	r5, [pc, #276]	; (3288 <usb_serial_write.part.0+0x1a8>)
    3174:	02c9      	lsls	r1, r1, #11
    3176:	4428      	add	r0, r5
		if (size >= tx_available) {
    3178:	9d01      	ldr	r5, [sp, #4]
    317a:	4295      	cmp	r5, r2
    317c:	d217      	bcs.n	31ae <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    317e:	9303      	str	r3, [sp, #12]
    3180:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    3184:	462a      	mov	r2, r5
    3186:	f7fe feb1 	bl	1eec <memcpy>
			tx_available -= size;
    318a:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    318c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    3190:	1b5b      	subs	r3, r3, r5
    3192:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    3196:	4b3d      	ldr	r3, [pc, #244]	; (328c <usb_serial_write.part.0+0x1ac>)
    3198:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    319c:	f3bf 8f4f 	dsb	sy
			sent += size;
    31a0:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    31a2:	2300      	movs	r3, #0
			sent += size;
    31a4:	4428      	add	r0, r5
		tx_noautoflush = 0;
    31a6:	7023      	strb	r3, [r4, #0]
}
    31a8:	b005      	add	sp, #20
    31aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    31ae:	4b36      	ldr	r3, [pc, #216]	; (3288 <usb_serial_write.part.0+0x1a8>)
    31b0:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    31b2:	9902      	ldr	r1, [sp, #8]
    31b4:	f7fe fe9a 	bl	1eec <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    31b8:	2300      	movs	r3, #0
    31ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
    31be:	4629      	mov	r1, r5
    31c0:	4648      	mov	r0, r9
    31c2:	f7ff fe43 	bl	2e4c <usb_prepare_transfer>
	asm("dsb");
    31c6:	f3bf 8f4f 	dsb	sy
    31ca:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    31ce:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    31d2:	4293      	cmp	r3, r2
    31d4:	bf34      	ite	cc
    31d6:	2301      	movcc	r3, #1
    31d8:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    31da:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    31de:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    31e2:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    31e6:	3520      	adds	r5, #32
	} while (location < end_addr);
    31e8:	42ab      	cmp	r3, r5
    31ea:	d1fa      	bne.n	31e2 <usb_serial_write.part.0+0x102>
	asm("dsb");
    31ec:	f3bf 8f4f 	dsb	sy
	asm("isb");
    31f0:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    31f4:	2004      	movs	r0, #4
    31f6:	4649      	mov	r1, r9
    31f8:	f7ff fe40 	bl	2e7c <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    31fc:	4a20      	ldr	r2, [pc, #128]	; (3280 <usb_serial_write.part.0+0x1a0>)
    31fe:	7813      	ldrb	r3, [r2, #0]
    3200:	3301      	adds	r3, #1
    3202:	b2db      	uxtb	r3, r3
    3204:	2b03      	cmp	r3, #3
    3206:	bf84      	itt	hi
    3208:	2300      	movhi	r3, #0
    320a:	4a1d      	ldrhi	r2, [pc, #116]	; (3280 <usb_serial_write.part.0+0x1a0>)
    320c:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    320e:	f8b8 3000 	ldrh.w	r3, [r8]
    3212:	9a01      	ldr	r2, [sp, #4]
    3214:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    3216:	9a00      	ldr	r2, [sp, #0]
    3218:	441a      	add	r2, r3
			size -= tx_available;
    321a:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    321c:	9200      	str	r2, [sp, #0]
			data += tx_available;
    321e:	9a02      	ldr	r2, [sp, #8]
    3220:	441a      	add	r2, r3
			tx_available = 0;
    3222:	2300      	movs	r3, #0
			data += tx_available;
    3224:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    3226:	4a19      	ldr	r2, [pc, #100]	; (328c <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    3228:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    322c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    3230:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    3234:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    3236:	2900      	cmp	r1, #0
    3238:	f47f af62 	bne.w	3100 <usb_serial_write.part.0+0x20>
	return sent;
    323c:	9800      	ldr	r0, [sp, #0]
}
    323e:	b005      	add	sp, #20
    3240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    3244:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    3248:	4b0d      	ldr	r3, [pc, #52]	; (3280 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    324a:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    324e:	7819      	ldrb	r1, [r3, #0]
				break;
    3250:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    3252:	f8a8 2000 	strh.w	r2, [r8]
				break;
    3256:	e78a      	b.n	316e <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    3258:	2301      	movs	r3, #1
				return sent;
    325a:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    325c:	f88a 3000 	strb.w	r3, [sl]
}
    3260:	b005      	add	sp, #20
    3262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    3266:	461a      	mov	r2, r3
    3268:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    326c:	e77f      	b.n	316e <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    326e:	9801      	ldr	r0, [sp, #4]
	return sent;
    3270:	e7e5      	b.n	323e <usb_serial_write.part.0+0x15e>
    3272:	bf00      	nop
    3274:	200026b4 	.word	0x200026b4
    3278:	2000267c 	.word	0x2000267c
    327c:	20001c00 	.word	0x20001c00
    3280:	200026b3 	.word	0x200026b3
    3284:	200026b6 	.word	0x200026b6
    3288:	20201080 	.word	0x20201080
    328c:	402e0000 	.word	0x402e0000
    3290:	2000269e 	.word	0x2000269e
    3294:	200026b2 	.word	0x200026b2

00003298 <usb_serial_reset>:
}
    3298:	4770      	bx	lr
    329a:	bf00      	nop

0000329c <usb_serial_configure>:
	if (usb_high_speed) {
    329c:	4b2a      	ldr	r3, [pc, #168]	; (3348 <usb_serial_configure+0xac>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    329e:	2100      	movs	r1, #0
    32a0:	2280      	movs	r2, #128	; 0x80
    32a2:	482a      	ldr	r0, [pc, #168]	; (334c <usb_serial_configure+0xb0>)
{
    32a4:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    32a6:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    32a8:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    32aa:	4d29      	ldr	r5, [pc, #164]	; (3350 <usb_serial_configure+0xb4>)
	if (usb_high_speed) {
    32ac:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    32ae:	4e29      	ldr	r6, [pc, #164]	; (3354 <usb_serial_configure+0xb8>)
	if (usb_high_speed) {
    32b0:	bf0c      	ite	eq
    32b2:	2340      	moveq	r3, #64	; 0x40
    32b4:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    32b8:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    32ba:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    32bc:	f001 f97a 	bl	45b4 <memset>
	tx_head = 0;
    32c0:	4a25      	ldr	r2, [pc, #148]	; (3358 <usb_serial_configure+0xbc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    32c2:	4621      	mov	r1, r4
	tx_available = 0;
    32c4:	4b25      	ldr	r3, [pc, #148]	; (335c <usb_serial_configure+0xc0>)
	tx_head = 0;
    32c6:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    32c8:	f44f 7280 	mov.w	r2, #256	; 0x100
    32cc:	4824      	ldr	r0, [pc, #144]	; (3360 <usb_serial_configure+0xc4>)
	tx_available = 0;
    32ce:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    32d0:	f001 f970 	bl	45b4 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    32d4:	4a23      	ldr	r2, [pc, #140]	; (3364 <usb_serial_configure+0xc8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    32d6:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    32d8:	4b23      	ldr	r3, [pc, #140]	; (3368 <usb_serial_configure+0xcc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    32da:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    32dc:	e9c2 4400 	strd	r4, r4, [r2]
    32e0:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    32e4:	4a21      	ldr	r2, [pc, #132]	; (336c <usb_serial_configure+0xd0>)
	memset(rx_index, 0, sizeof(rx_index));
    32e6:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    32ea:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    32ec:	4a20      	ldr	r2, [pc, #128]	; (3370 <usb_serial_configure+0xd4>)
	memset(rx_index, 0, sizeof(rx_index));
    32ee:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    32f2:	4b20      	ldr	r3, [pc, #128]	; (3374 <usb_serial_configure+0xd8>)
    32f4:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    32f6:	4623      	mov	r3, r4
	rx_available = 0;
    32f8:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    32fa:	4622      	mov	r2, r4
    32fc:	f7ff fd74 	bl	2de8 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    3300:	4622      	mov	r2, r4
    3302:	8831      	ldrh	r1, [r6, #0]
    3304:	2003      	movs	r0, #3
    3306:	4b1c      	ldr	r3, [pc, #112]	; (3378 <usb_serial_configure+0xdc>)
    3308:	f7ff fd3c 	bl	2d84 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    330c:	4623      	mov	r3, r4
    330e:	2201      	movs	r2, #1
    3310:	8829      	ldrh	r1, [r5, #0]
    3312:	2004      	movs	r0, #4
    3314:	f7ff fd68 	bl	2de8 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    3318:	4620      	mov	r0, r4
    331a:	3401      	adds	r4, #1
    331c:	f7ff fe0e 	bl	2f3c <rx_queue_transfer>
    3320:	2c08      	cmp	r4, #8
    3322:	d1f9      	bne.n	3318 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    3324:	4b15      	ldr	r3, [pc, #84]	; (337c <usb_serial_configure+0xe0>)
	USB1_GPTIMER0LD = microseconds - 1;
    3326:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    3328:	4815      	ldr	r0, [pc, #84]	; (3380 <usb_serial_configure+0xe4>)
	USB1_GPTIMER0CTRL = 0;
    332a:	2100      	movs	r1, #0
	usb_timer0_callback = callback;
    332c:	4c15      	ldr	r4, [pc, #84]	; (3384 <usb_serial_configure+0xe8>)
    332e:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    3330:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    3334:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    3338:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    333c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    3340:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    3344:	bd70      	pop	{r4, r5, r6, pc}
    3346:	bf00      	nop
    3348:	200026b7 	.word	0x200026b7
    334c:	20001c00 	.word	0x20001c00
    3350:	200026a0 	.word	0x200026a0
    3354:	2000269c 	.word	0x2000269c
    3358:	200026b3 	.word	0x200026b3
    335c:	2000269e 	.word	0x2000269e
    3360:	20001b00 	.word	0x20001b00
    3364:	20002610 	.word	0x20002610
    3368:	20002620 	.word	0x20002620
    336c:	200026af 	.word	0x200026af
    3370:	2000260c 	.word	0x2000260c
    3374:	200026b0 	.word	0x200026b0
    3378:	00002f9d 	.word	0x00002f9d
    337c:	402e0000 	.word	0x402e0000
    3380:	20002690 	.word	0x20002690
    3384:	00003051 	.word	0x00003051

00003388 <usb_serial_read>:
{
    3388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    338c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3390:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    3394:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 3460 <usb_serial_read+0xd8>
{
    3398:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    339a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    339e:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    33a0:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    33a4:	2900      	cmp	r1, #0
    33a6:	d04f      	beq.n	3448 <usb_serial_read+0xc0>
    33a8:	4680      	mov	r8, r0
    33aa:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    33ac:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    33ae:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 3464 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    33b2:	4b26      	ldr	r3, [pc, #152]	; (344c <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    33b4:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    33b8:	4925      	ldr	r1, [pc, #148]	; (3450 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    33ba:	781b      	ldrb	r3, [r3, #0]
    33bc:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    33be:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    33c2:	d03f      	beq.n	3444 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    33c4:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    33c6:	4b23      	ldr	r3, [pc, #140]	; (3454 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    33c8:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    33ca:	bf28      	it	cs
    33cc:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    33ce:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    33d0:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    33d4:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    33d8:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    33da:	4b1f      	ldr	r3, [pc, #124]	; (3458 <usb_serial_read+0xd0>)
    33dc:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    33e0:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    33e4:	42aa      	cmp	r2, r5
    33e6:	d21c      	bcs.n	3422 <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    33e8:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    33ec:	4918      	ldr	r1, [pc, #96]	; (3450 <usb_serial_read+0xc8>)
			rx_available -= len;
    33ee:	4c1b      	ldr	r4, [pc, #108]	; (345c <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    33f0:	4461      	add	r1, ip
    33f2:	9201      	str	r2, [sp, #4]
    33f4:	f7fe fd7a 	bl	1eec <memcpy>
			rx_available -= len;
    33f8:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    33fa:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    33fe:	4658      	mov	r0, fp
			rx_index[i] += len;
    3400:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    3402:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    3406:	442a      	add	r2, r5
			rx_available -= len;
    3408:	4439      	add	r1, r7
			rx_index[i] += len;
    340a:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    340e:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    3410:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3414:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3418:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    341c:	b003      	add	sp, #12
    341e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3422:	462a      	mov	r2, r5
			count += avail;
    3424:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3426:	f7fe fd61 	bl	1eec <memcpy>
			rx_available -= avail;
    342a:	490c      	ldr	r1, [pc, #48]	; (345c <usb_serial_read+0xd4>)
			rx_tail = tail;
    342c:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    342e:	4630      	mov	r0, r6
			rx_available -= avail;
    3430:	680a      	ldr	r2, [r1, #0]
			p += avail;
    3432:	44a8      	add	r8, r5
			rx_available -= avail;
    3434:	1b52      	subs	r2, r2, r5
    3436:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    3438:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    343c:	f7ff fd7e 	bl	2f3c <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    3440:	45bb      	cmp	fp, r7
    3442:	d8b6      	bhi.n	33b2 <usb_serial_read+0x2a>
	return count;
    3444:	4638      	mov	r0, r7
    3446:	e7e3      	b.n	3410 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    3448:	4608      	mov	r0, r1
    344a:	e7e1      	b.n	3410 <usb_serial_read+0x88>
    344c:	200026af 	.word	0x200026af
    3450:	20200080 	.word	0x20200080
    3454:	20002630 	.word	0x20002630
    3458:	20002610 	.word	0x20002610
    345c:	2000260c 	.word	0x2000260c
    3460:	200026b0 	.word	0x200026b0
    3464:	20002620 	.word	0x20002620

00003468 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    3468:	4b0b      	ldr	r3, [pc, #44]	; (3498 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    346a:	4a0c      	ldr	r2, [pc, #48]	; (349c <usb_serial_peekchar+0x34>)
    346c:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    346e:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    3470:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    3472:	428a      	cmp	r2, r1
    3474:	d00d      	beq.n	3492 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    3476:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    3478:	4809      	ldr	r0, [pc, #36]	; (34a0 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    347a:	4a0a      	ldr	r2, [pc, #40]	; (34a4 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    347c:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    347e:	490a      	ldr	r1, [pc, #40]	; (34a8 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    3480:	bf28      	it	cs
    3482:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    3484:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    3486:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    348a:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    348e:	5c58      	ldrb	r0, [r3, r1]
    3490:	4770      	bx	lr
	if (tail == rx_head) return -1;
    3492:	f04f 30ff 	mov.w	r0, #4294967295
}
    3496:	4770      	bx	lr
    3498:	200026af 	.word	0x200026af
    349c:	200026b0 	.word	0x200026b0
    34a0:	20002630 	.word	0x20002630
    34a4:	20200080 	.word	0x20200080
    34a8:	20002620 	.word	0x20002620

000034ac <usb_serial_available>:
	uint32_t n = rx_available;
    34ac:	4b04      	ldr	r3, [pc, #16]	; (34c0 <usb_serial_available+0x14>)
{
    34ae:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    34b0:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    34b2:	b10c      	cbz	r4, 34b8 <usb_serial_available+0xc>
}
    34b4:	4620      	mov	r0, r4
    34b6:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    34b8:	f000 f8e0 	bl	367c <yield>
}
    34bc:	4620      	mov	r0, r4
    34be:	bd10      	pop	{r4, pc}
    34c0:	2000260c 	.word	0x2000260c

000034c4 <usb_serial_flush_input>:
{
    34c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    34c8:	4e14      	ldr	r6, [pc, #80]	; (351c <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    34ca:	4d15      	ldr	r5, [pc, #84]	; (3520 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    34cc:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    34ce:	782a      	ldrb	r2, [r5, #0]
    34d0:	4293      	cmp	r3, r2
    34d2:	d021      	beq.n	3518 <usb_serial_flush_input+0x54>
    34d4:	b2dc      	uxtb	r4, r3
    34d6:	f8df 9050 	ldr.w	r9, [pc, #80]	; 3528 <usb_serial_flush_input+0x64>
    34da:	f8df b050 	ldr.w	fp, [pc, #80]	; 352c <usb_serial_flush_input+0x68>
    34de:	f8df 8050 	ldr.w	r8, [pc, #80]	; 3530 <usb_serial_flush_input+0x6c>
    34e2:	4f10      	ldr	r7, [pc, #64]	; (3524 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    34e4:	3401      	adds	r4, #1
    34e6:	2c08      	cmp	r4, #8
		rx_tail = tail;
    34e8:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    34ec:	d901      	bls.n	34f2 <usb_serial_flush_input+0x2e>
    34ee:	2400      	movs	r4, #0
    34f0:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    34f2:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    34f6:	f8db 3000 	ldr.w	r3, [fp]
    34fa:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    34fe:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    3502:	1a52      	subs	r2, r2, r1
    3504:	1a9b      	subs	r3, r3, r2
    3506:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    350a:	f7ff fd17 	bl	2f3c <rx_queue_transfer>
		rx_tail = tail;
    350e:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    3512:	782b      	ldrb	r3, [r5, #0]
    3514:	42a3      	cmp	r3, r4
    3516:	d1e5      	bne.n	34e4 <usb_serial_flush_input+0x20>
}
    3518:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    351c:	200026b0 	.word	0x200026b0
    3520:	200026af 	.word	0x200026af
    3524:	20002620 	.word	0x20002620
    3528:	20002630 	.word	0x20002630
    352c:	2000260c 	.word	0x2000260c
    3530:	20002610 	.word	0x20002610

00003534 <usb_serial_getchar>:
{
    3534:	b500      	push	{lr}
    3536:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    3538:	2101      	movs	r1, #1
    353a:	f10d 0007 	add.w	r0, sp, #7
    353e:	f7ff ff23 	bl	3388 <usb_serial_read>
    3542:	b120      	cbz	r0, 354e <usb_serial_getchar+0x1a>
    3544:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    3548:	b003      	add	sp, #12
    354a:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    354e:	f04f 30ff 	mov.w	r0, #4294967295
    3552:	e7f9      	b.n	3548 <usb_serial_getchar+0x14>

00003554 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    3554:	4b09      	ldr	r3, [pc, #36]	; (357c <usb_serial_putchar+0x28>)
{
    3556:	b500      	push	{lr}
    3558:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    355a:	781b      	ldrb	r3, [r3, #0]
{
    355c:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    3560:	b13b      	cbz	r3, 3572 <usb_serial_putchar+0x1e>
    3562:	2101      	movs	r1, #1
    3564:	f10d 0007 	add.w	r0, sp, #7
    3568:	f7ff fdba 	bl	30e0 <usb_serial_write.part.0>
}
    356c:	b003      	add	sp, #12
    356e:	f85d fb04 	ldr.w	pc, [sp], #4
    3572:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    3576:	b003      	add	sp, #12
    3578:	f85d fb04 	ldr.w	pc, [sp], #4
    357c:	200026b6 	.word	0x200026b6

00003580 <usb_serial_write>:
	if (!usb_configuration) return 0;
    3580:	4b04      	ldr	r3, [pc, #16]	; (3594 <usb_serial_write+0x14>)
    3582:	781b      	ldrb	r3, [r3, #0]
    3584:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    3588:	b10b      	cbz	r3, 358e <usb_serial_write+0xe>
    358a:	f7ff bda9 	b.w	30e0 <usb_serial_write.part.0>
}
    358e:	4610      	mov	r0, r2
    3590:	4770      	bx	lr
    3592:	bf00      	nop
    3594:	200026b6 	.word	0x200026b6

00003598 <usb_serial_write_buffer_free>:
{
    3598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    359c:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    359e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 35e4 <usb_serial_write_buffer_free+0x4c>
    35a2:	2301      	movs	r3, #1
    35a4:	4d0d      	ldr	r5, [pc, #52]	; (35dc <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    35a6:	4627      	mov	r7, r4
    35a8:	4e0d      	ldr	r6, [pc, #52]	; (35e0 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    35aa:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    35ae:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    35b0:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    35b2:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    35b4:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    35b6:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    35ba:	d005      	beq.n	35c8 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    35bc:	f7ff fc80 	bl	2ec0 <usb_transfer_status>
    35c0:	0603      	lsls	r3, r0, #24
    35c2:	bf58      	it	pl
    35c4:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    35c8:	2c04      	cmp	r4, #4
    35ca:	d1f0      	bne.n	35ae <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    35cc:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    35d0:	2300      	movs	r3, #0
}
    35d2:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    35d4:	f888 3000 	strb.w	r3, [r8]
}
    35d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    35dc:	20001c00 	.word	0x20001c00
    35e0:	200026b3 	.word	0x200026b3
    35e4:	200026b4 	.word	0x200026b4

000035e8 <usb_serial_flush_output>:
{
    35e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    35ec:	4b1d      	ldr	r3, [pc, #116]	; (3664 <usb_serial_flush_output+0x7c>)
    35ee:	781b      	ldrb	r3, [r3, #0]
    35f0:	b113      	cbz	r3, 35f8 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    35f2:	4d1d      	ldr	r5, [pc, #116]	; (3668 <usb_serial_flush_output+0x80>)
    35f4:	882a      	ldrh	r2, [r5, #0]
    35f6:	b90a      	cbnz	r2, 35fc <usb_serial_flush_output+0x14>
}
    35f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    35fc:	4e1b      	ldr	r6, [pc, #108]	; (366c <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    35fe:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    3602:	491b      	ldr	r1, [pc, #108]	; (3670 <usb_serial_flush_output+0x88>)
    3604:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    3606:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    3608:	4c1a      	ldr	r4, [pc, #104]	; (3674 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    360a:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    360e:	4f1a      	ldr	r7, [pc, #104]	; (3678 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    3610:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    3614:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    3616:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    3618:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    361a:	4621      	mov	r1, r4
    361c:	2300      	movs	r3, #0
    361e:	f7ff fc15 	bl	2e4c <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    3622:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    3626:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    362a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    362e:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    3632:	3420      	adds	r4, #32
	} while (location < end_addr);
    3634:	42a2      	cmp	r2, r4
    3636:	d8fa      	bhi.n	362e <usb_serial_flush_output+0x46>
	asm("dsb");
    3638:	f3bf 8f4f 	dsb	sy
	asm("isb");
    363c:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    3640:	2004      	movs	r0, #4
    3642:	4641      	mov	r1, r8
    3644:	f7ff fc1a 	bl	2e7c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    3648:	7833      	ldrb	r3, [r6, #0]
    364a:	3301      	adds	r3, #1
    364c:	b2db      	uxtb	r3, r3
    364e:	2b03      	cmp	r3, #3
    3650:	bf88      	it	hi
    3652:	2300      	movhi	r3, #0
    3654:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    3656:	2300      	movs	r3, #0
    3658:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    365a:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    365e:	703b      	strb	r3, [r7, #0]
}
    3660:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3664:	200026b6 	.word	0x200026b6
    3668:	2000269e 	.word	0x2000269e
    366c:	200026b3 	.word	0x200026b3
    3670:	20001c00 	.word	0x20001c00
    3674:	20201080 	.word	0x20201080
    3678:	200026b4 	.word	0x200026b4

0000367c <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    367c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    3680:	4e32      	ldr	r6, [pc, #200]	; (374c <yield+0xd0>)
    3682:	7833      	ldrb	r3, [r6, #0]
    3684:	b163      	cbz	r3, 36a0 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    3686:	4f32      	ldr	r7, [pc, #200]	; (3750 <yield+0xd4>)
    3688:	783a      	ldrb	r2, [r7, #0]
    368a:	b94a      	cbnz	r2, 36a0 <yield+0x24>
	running = 1;
    368c:	2201      	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    368e:	07d9      	lsls	r1, r3, #31
	running = 1;
    3690:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    3692:	d444      	bmi.n	371e <yield+0xa2>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    3694:	079a      	lsls	r2, r3, #30
    3696:	d426      	bmi.n	36e6 <yield+0x6a>

	running = 0;
    3698:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    369a:	075b      	lsls	r3, r3, #29
	running = 0;
    369c:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    369e:	d401      	bmi.n	36a4 <yield+0x28>
	
};
    36a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    36a4:	4b2b      	ldr	r3, [pc, #172]	; (3754 <yield+0xd8>)
    36a6:	681a      	ldr	r2, [r3, #0]
    36a8:	2a00      	cmp	r2, #0
    36aa:	d0f9      	beq.n	36a0 <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    36ac:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    36b0:	2a00      	cmp	r2, #0
    36b2:	d1f5      	bne.n	36a0 <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    36b4:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    36b8:	b672      	cpsid	i
		EventResponder *first = firstYield;
    36ba:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    36bc:	2800      	cmp	r0, #0
    36be:	d03b      	beq.n	3738 <yield+0xbc>
		if (runningFromYield) {
    36c0:	4c25      	ldr	r4, [pc, #148]	; (3758 <yield+0xdc>)
    36c2:	7821      	ldrb	r1, [r4, #0]
    36c4:	2900      	cmp	r1, #0
    36c6:	d137      	bne.n	3738 <yield+0xbc>
		runningFromYield = true;
    36c8:	2201      	movs	r2, #1
    36ca:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    36cc:	6942      	ldr	r2, [r0, #20]
    36ce:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    36d0:	2a00      	cmp	r2, #0
    36d2:	d038      	beq.n	3746 <yield+0xca>
			firstYield->_prev = nullptr;
    36d4:	6191      	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    36d6:	b905      	cbnz	r5, 36da <yield+0x5e>
    36d8:	b662      	cpsie	i
		first->_triggered = false;
    36da:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    36dc:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    36de:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    36e0:	4798      	blx	r3
		runningFromYield = false;
    36e2:	7025      	strb	r5, [r4, #0]
    36e4:	e7dc      	b.n	36a0 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    36e6:	f8df 807c 	ldr.w	r8, [pc, #124]	; 3764 <yield+0xe8>
    36ea:	f898 2000 	ldrb.w	r2, [r8]
    36ee:	2a00      	cmp	r2, #0
    36f0:	d0d2      	beq.n	3698 <yield+0x1c>
    36f2:	2500      	movs	r5, #0
    36f4:	f8df 9070 	ldr.w	r9, [pc, #112]	; 3768 <yield+0xec>
    36f8:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    36fa:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    36fe:	3501      	adds	r5, #1
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    3700:	6823      	ldr	r3, [r4, #0]
    3702:	4620      	mov	r0, r4
    3704:	691b      	ldr	r3, [r3, #16]
    3706:	4798      	blx	r3
    3708:	b110      	cbz	r0, 3710 <yield+0x94>
    370a:	6963      	ldr	r3, [r4, #20]
    370c:	689b      	ldr	r3, [r3, #8]
    370e:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    3710:	f898 2000 	ldrb.w	r2, [r8]
    3714:	b2eb      	uxtb	r3, r5
    3716:	429a      	cmp	r2, r3
    3718:	d8ef      	bhi.n	36fa <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    371a:	7833      	ldrb	r3, [r6, #0]
    371c:	e7bc      	b.n	3698 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    371e:	f7ff fec5 	bl	34ac <usb_serial_available>
		if (Serial.available()) serialEvent();
    3722:	b968      	cbnz	r0, 3740 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    3724:	4b0d      	ldr	r3, [pc, #52]	; (375c <yield+0xe0>)
    3726:	781b      	ldrb	r3, [r3, #0]
    3728:	b90b      	cbnz	r3, 372e <yield+0xb2>
    372a:	7833      	ldrb	r3, [r6, #0]
    372c:	e7b2      	b.n	3694 <yield+0x18>
    372e:	7833      	ldrb	r3, [r6, #0]
    3730:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    3734:	7033      	strb	r3, [r6, #0]
    3736:	e7ad      	b.n	3694 <yield+0x18>
		if (doit) __enable_irq();
    3738:	2d00      	cmp	r5, #0
    373a:	d1b1      	bne.n	36a0 <yield+0x24>
    373c:	b662      	cpsie	i
    373e:	e7af      	b.n	36a0 <yield+0x24>
		if (Serial.available()) serialEvent();
    3740:	f000 f85a 	bl	37f8 <serialEvent()>
    3744:	e7ee      	b.n	3724 <yield+0xa8>
			lastYield = nullptr;
    3746:	4b06      	ldr	r3, [pc, #24]	; (3760 <yield+0xe4>)
    3748:	601a      	str	r2, [r3, #0]
    374a:	e7c4      	b.n	36d6 <yield+0x5a>
    374c:	2000173b 	.word	0x2000173b
    3750:	200026ac 	.word	0x200026ac
    3754:	20002260 	.word	0x20002260
    3758:	200026aa 	.word	0x200026aa
    375c:	60001bec 	.word	0x60001bec
    3760:	2000226c 	.word	0x2000226c
    3764:	200026ab 	.word	0x200026ab
    3768:	20002270 	.word	0x20002270

0000376c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    376c:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    376e:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    3772:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3774:	4c0c      	ldr	r4, [pc, #48]	; (37a8 <EventResponder::runFromInterrupt()+0x3c>)
    3776:	6820      	ldr	r0, [r4, #0]
		if (first) {
    3778:	b180      	cbz	r0, 379c <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    377a:	4e0c      	ldr	r6, [pc, #48]	; (37ac <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    377c:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    377e:	6943      	ldr	r3, [r0, #20]
    3780:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    3782:	b173      	cbz	r3, 37a2 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    3784:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    3786:	b902      	cbnz	r2, 378a <EventResponder::runFromInterrupt()+0x1e>
    3788:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    378a:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    378c:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    378e:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3790:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    3794:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    3796:	6820      	ldr	r0, [r4, #0]
		if (first) {
    3798:	2800      	cmp	r0, #0
    379a:	d1f0      	bne.n	377e <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    379c:	b902      	cbnz	r2, 37a0 <EventResponder::runFromInterrupt()+0x34>
    379e:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    37a0:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    37a2:	6033      	str	r3, [r6, #0]
    37a4:	e7ef      	b.n	3786 <EventResponder::runFromInterrupt()+0x1a>
    37a6:	bf00      	nop
    37a8:	20002268 	.word	0x20002268
    37ac:	20002264 	.word	0x20002264

000037b0 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    37b0:	f7ff bfdc 	b.w	376c <EventResponder::runFromInterrupt()>

000037b4 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    37b4:	4904      	ldr	r1, [pc, #16]	; (37c8 <systick_isr+0x14>)
	systick_millis_count++;
    37b6:	4a05      	ldr	r2, [pc, #20]	; (37cc <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    37b8:	6849      	ldr	r1, [r1, #4]
    37ba:	4b05      	ldr	r3, [pc, #20]	; (37d0 <systick_isr+0x1c>)
    37bc:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    37be:	6813      	ldr	r3, [r2, #0]
    37c0:	3301      	adds	r3, #1
    37c2:	6013      	str	r3, [r2, #0]
}
    37c4:	4770      	bx	lr
    37c6:	bf00      	nop
    37c8:	e0001000 	.word	0xe0001000
    37cc:	2000267c 	.word	0x2000267c
    37d0:	20002678 	.word	0x20002678

000037d4 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    37d4:	4a07      	ldr	r2, [pc, #28]	; (37f4 <rtc_get+0x20>)
    37d6:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    37d8:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    37da:	4619      	mov	r1, r3
    37dc:	4684      	mov	ip, r0
    37de:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    37e0:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    37e2:	4299      	cmp	r1, r3
    37e4:	d1f9      	bne.n	37da <rtc_get+0x6>
    37e6:	4584      	cmp	ip, r0
    37e8:	d1f7      	bne.n	37da <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    37ea:	0bdb      	lsrs	r3, r3, #15
}
    37ec:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    37f0:	4770      	bx	lr
    37f2:	bf00      	nop
    37f4:	400d4000 	.word	0x400d4000

000037f8 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    37f8:	4770      	bx	lr
    37fa:	bf00      	nop

000037fc <__aeabi_atexit>:
    37fc:	4603      	mov	r3, r0
    37fe:	4608      	mov	r0, r1
    3800:	4619      	mov	r1, r3
    3802:	f000 bcc5 	b.w	4190 <__cxa_atexit>
    3806:	bf00      	nop

00003808 <malloc>:
    3808:	4b02      	ldr	r3, [pc, #8]	; (3814 <malloc+0xc>)
    380a:	4601      	mov	r1, r0
    380c:	6818      	ldr	r0, [r3, #0]
    380e:	f000 b80b 	b.w	3828 <_malloc_r>
    3812:	bf00      	nop
    3814:	200016cc 	.word	0x200016cc

00003818 <free>:
    3818:	4b02      	ldr	r3, [pc, #8]	; (3824 <free+0xc>)
    381a:	4601      	mov	r1, r0
    381c:	6818      	ldr	r0, [r3, #0]
    381e:	f001 b951 	b.w	4ac4 <_free_r>
    3822:	bf00      	nop
    3824:	200016cc 	.word	0x200016cc

00003828 <_malloc_r>:
    3828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    382c:	f101 060b 	add.w	r6, r1, #11
    3830:	2e16      	cmp	r6, #22
    3832:	b083      	sub	sp, #12
    3834:	4604      	mov	r4, r0
    3836:	d824      	bhi.n	3882 <_malloc_r+0x5a>
    3838:	2910      	cmp	r1, #16
    383a:	f200 80ba 	bhi.w	39b2 <_malloc_r+0x18a>
    383e:	f000 faa3 	bl	3d88 <__malloc_lock>
    3842:	2610      	movs	r6, #16
    3844:	2218      	movs	r2, #24
    3846:	2002      	movs	r0, #2
    3848:	4fb5      	ldr	r7, [pc, #724]	; (3b20 <_malloc_r+0x2f8>)
    384a:	443a      	add	r2, r7
    384c:	f1a2 0108 	sub.w	r1, r2, #8
    3850:	6853      	ldr	r3, [r2, #4]
    3852:	428b      	cmp	r3, r1
    3854:	f000 80ba 	beq.w	39cc <_malloc_r+0x1a4>
    3858:	685a      	ldr	r2, [r3, #4]
    385a:	68d9      	ldr	r1, [r3, #12]
    385c:	f022 0203 	bic.w	r2, r2, #3
    3860:	441a      	add	r2, r3
    3862:	689d      	ldr	r5, [r3, #8]
    3864:	60e9      	str	r1, [r5, #12]
    3866:	608d      	str	r5, [r1, #8]
    3868:	6851      	ldr	r1, [r2, #4]
    386a:	f041 0101 	orr.w	r1, r1, #1
    386e:	4620      	mov	r0, r4
    3870:	6051      	str	r1, [r2, #4]
    3872:	f103 0508 	add.w	r5, r3, #8
    3876:	f000 fa8d 	bl	3d94 <__malloc_unlock>
    387a:	4628      	mov	r0, r5
    387c:	b003      	add	sp, #12
    387e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3882:	f036 0607 	bics.w	r6, r6, #7
    3886:	f100 8094 	bmi.w	39b2 <_malloc_r+0x18a>
    388a:	42b1      	cmp	r1, r6
    388c:	f200 8091 	bhi.w	39b2 <_malloc_r+0x18a>
    3890:	f000 fa7a 	bl	3d88 <__malloc_lock>
    3894:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    3898:	f0c0 819a 	bcc.w	3bd0 <_malloc_r+0x3a8>
    389c:	0a73      	lsrs	r3, r6, #9
    389e:	f000 808f 	beq.w	39c0 <_malloc_r+0x198>
    38a2:	2b04      	cmp	r3, #4
    38a4:	f200 816f 	bhi.w	3b86 <_malloc_r+0x35e>
    38a8:	09b3      	lsrs	r3, r6, #6
    38aa:	f103 0039 	add.w	r0, r3, #57	; 0x39
    38ae:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    38b2:	00c3      	lsls	r3, r0, #3
    38b4:	4f9a      	ldr	r7, [pc, #616]	; (3b20 <_malloc_r+0x2f8>)
    38b6:	443b      	add	r3, r7
    38b8:	f1a3 0508 	sub.w	r5, r3, #8
    38bc:	685b      	ldr	r3, [r3, #4]
    38be:	429d      	cmp	r5, r3
    38c0:	d106      	bne.n	38d0 <_malloc_r+0xa8>
    38c2:	e00c      	b.n	38de <_malloc_r+0xb6>
    38c4:	2900      	cmp	r1, #0
    38c6:	f280 8127 	bge.w	3b18 <_malloc_r+0x2f0>
    38ca:	68db      	ldr	r3, [r3, #12]
    38cc:	429d      	cmp	r5, r3
    38ce:	d006      	beq.n	38de <_malloc_r+0xb6>
    38d0:	685a      	ldr	r2, [r3, #4]
    38d2:	f022 0203 	bic.w	r2, r2, #3
    38d6:	1b91      	subs	r1, r2, r6
    38d8:	290f      	cmp	r1, #15
    38da:	ddf3      	ble.n	38c4 <_malloc_r+0x9c>
    38dc:	4660      	mov	r0, ip
    38de:	693d      	ldr	r5, [r7, #16]
    38e0:	f8df c250 	ldr.w	ip, [pc, #592]	; 3b34 <_malloc_r+0x30c>
    38e4:	4565      	cmp	r5, ip
    38e6:	d07c      	beq.n	39e2 <_malloc_r+0x1ba>
    38e8:	686a      	ldr	r2, [r5, #4]
    38ea:	f022 0203 	bic.w	r2, r2, #3
    38ee:	1b93      	subs	r3, r2, r6
    38f0:	2b0f      	cmp	r3, #15
    38f2:	f300 817b 	bgt.w	3bec <_malloc_r+0x3c4>
    38f6:	2b00      	cmp	r3, #0
    38f8:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    38fc:	f280 816c 	bge.w	3bd8 <_malloc_r+0x3b0>
    3900:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    3904:	f080 811a 	bcs.w	3b3c <_malloc_r+0x314>
    3908:	08d3      	lsrs	r3, r2, #3
    390a:	6879      	ldr	r1, [r7, #4]
    390c:	3301      	adds	r3, #1
    390e:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    3912:	2201      	movs	r2, #1
    3914:	fa02 f20e 	lsl.w	r2, r2, lr
    3918:	430a      	orrs	r2, r1
    391a:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    391e:	f8c5 e008 	str.w	lr, [r5, #8]
    3922:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    3926:	3908      	subs	r1, #8
    3928:	60e9      	str	r1, [r5, #12]
    392a:	607a      	str	r2, [r7, #4]
    392c:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    3930:	f8ce 500c 	str.w	r5, [lr, #12]
    3934:	1083      	asrs	r3, r0, #2
    3936:	2101      	movs	r1, #1
    3938:	4099      	lsls	r1, r3
    393a:	4291      	cmp	r1, r2
    393c:	d857      	bhi.n	39ee <_malloc_r+0x1c6>
    393e:	4211      	tst	r1, r2
    3940:	d106      	bne.n	3950 <_malloc_r+0x128>
    3942:	f020 0003 	bic.w	r0, r0, #3
    3946:	0049      	lsls	r1, r1, #1
    3948:	4211      	tst	r1, r2
    394a:	f100 0004 	add.w	r0, r0, #4
    394e:	d0fa      	beq.n	3946 <_malloc_r+0x11e>
    3950:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    3954:	464d      	mov	r5, r9
    3956:	4686      	mov	lr, r0
    3958:	f8d5 800c 	ldr.w	r8, [r5, #12]
    395c:	4545      	cmp	r5, r8
    395e:	d108      	bne.n	3972 <_malloc_r+0x14a>
    3960:	e11d      	b.n	3b9e <_malloc_r+0x376>
    3962:	2b00      	cmp	r3, #0
    3964:	f280 8124 	bge.w	3bb0 <_malloc_r+0x388>
    3968:	f8d8 800c 	ldr.w	r8, [r8, #12]
    396c:	4545      	cmp	r5, r8
    396e:	f000 8116 	beq.w	3b9e <_malloc_r+0x376>
    3972:	f8d8 2004 	ldr.w	r2, [r8, #4]
    3976:	f022 0203 	bic.w	r2, r2, #3
    397a:	1b93      	subs	r3, r2, r6
    397c:	2b0f      	cmp	r3, #15
    397e:	ddf0      	ble.n	3962 <_malloc_r+0x13a>
    3980:	4620      	mov	r0, r4
    3982:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    3986:	eb08 0106 	add.w	r1, r8, r6
    398a:	f046 0601 	orr.w	r6, r6, #1
    398e:	f8c8 6004 	str.w	r6, [r8, #4]
    3992:	60ec      	str	r4, [r5, #12]
    3994:	60a5      	str	r5, [r4, #8]
    3996:	f043 0401 	orr.w	r4, r3, #1
    399a:	e9c7 1104 	strd	r1, r1, [r7, #16]
    399e:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    39a2:	604c      	str	r4, [r1, #4]
    39a4:	f848 3002 	str.w	r3, [r8, r2]
    39a8:	f000 f9f4 	bl	3d94 <__malloc_unlock>
    39ac:	f108 0508 	add.w	r5, r8, #8
    39b0:	e002      	b.n	39b8 <_malloc_r+0x190>
    39b2:	230c      	movs	r3, #12
    39b4:	6023      	str	r3, [r4, #0]
    39b6:	2500      	movs	r5, #0
    39b8:	4628      	mov	r0, r5
    39ba:	b003      	add	sp, #12
    39bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    39c0:	f44f 7300 	mov.w	r3, #512	; 0x200
    39c4:	2040      	movs	r0, #64	; 0x40
    39c6:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    39ca:	e773      	b.n	38b4 <_malloc_r+0x8c>
    39cc:	68d3      	ldr	r3, [r2, #12]
    39ce:	429a      	cmp	r2, r3
    39d0:	bf08      	it	eq
    39d2:	3002      	addeq	r0, #2
    39d4:	f47f af40 	bne.w	3858 <_malloc_r+0x30>
    39d8:	693d      	ldr	r5, [r7, #16]
    39da:	f8df c158 	ldr.w	ip, [pc, #344]	; 3b34 <_malloc_r+0x30c>
    39de:	4565      	cmp	r5, ip
    39e0:	d182      	bne.n	38e8 <_malloc_r+0xc0>
    39e2:	687a      	ldr	r2, [r7, #4]
    39e4:	1083      	asrs	r3, r0, #2
    39e6:	2101      	movs	r1, #1
    39e8:	4099      	lsls	r1, r3
    39ea:	4291      	cmp	r1, r2
    39ec:	d9a7      	bls.n	393e <_malloc_r+0x116>
    39ee:	68bd      	ldr	r5, [r7, #8]
    39f0:	686b      	ldr	r3, [r5, #4]
    39f2:	f023 0903 	bic.w	r9, r3, #3
    39f6:	454e      	cmp	r6, r9
    39f8:	d803      	bhi.n	3a02 <_malloc_r+0x1da>
    39fa:	eba9 0306 	sub.w	r3, r9, r6
    39fe:	2b0f      	cmp	r3, #15
    3a00:	dc7a      	bgt.n	3af8 <_malloc_r+0x2d0>
    3a02:	f8df b134 	ldr.w	fp, [pc, #308]	; 3b38 <_malloc_r+0x310>
    3a06:	4b47      	ldr	r3, [pc, #284]	; (3b24 <_malloc_r+0x2fc>)
    3a08:	f8db 2000 	ldr.w	r2, [fp]
    3a0c:	681b      	ldr	r3, [r3, #0]
    3a0e:	3201      	adds	r2, #1
    3a10:	4433      	add	r3, r6
    3a12:	eb05 0a09 	add.w	sl, r5, r9
    3a16:	f000 8133 	beq.w	3c80 <_malloc_r+0x458>
    3a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    3a1e:	330f      	adds	r3, #15
    3a20:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    3a24:	f028 080f 	bic.w	r8, r8, #15
    3a28:	4641      	mov	r1, r8
    3a2a:	4620      	mov	r0, r4
    3a2c:	f000 fe8a 	bl	4744 <_sbrk_r>
    3a30:	1c41      	adds	r1, r0, #1
    3a32:	4602      	mov	r2, r0
    3a34:	f000 80f3 	beq.w	3c1e <_malloc_r+0x3f6>
    3a38:	4582      	cmp	sl, r0
    3a3a:	f200 80ee 	bhi.w	3c1a <_malloc_r+0x3f2>
    3a3e:	4b3a      	ldr	r3, [pc, #232]	; (3b28 <_malloc_r+0x300>)
    3a40:	6819      	ldr	r1, [r3, #0]
    3a42:	4441      	add	r1, r8
    3a44:	6019      	str	r1, [r3, #0]
    3a46:	4608      	mov	r0, r1
    3a48:	f000 814e 	beq.w	3ce8 <_malloc_r+0x4c0>
    3a4c:	f8db 1000 	ldr.w	r1, [fp]
    3a50:	9301      	str	r3, [sp, #4]
    3a52:	3101      	adds	r1, #1
    3a54:	bf1b      	ittet	ne
    3a56:	eba2 010a 	subne.w	r1, r2, sl
    3a5a:	1809      	addne	r1, r1, r0
    3a5c:	f8cb 2000 	streq.w	r2, [fp]
    3a60:	6019      	strne	r1, [r3, #0]
    3a62:	f012 0b07 	ands.w	fp, r2, #7
    3a66:	f000 8117 	beq.w	3c98 <_malloc_r+0x470>
    3a6a:	f1cb 0108 	rsb	r1, fp, #8
    3a6e:	440a      	add	r2, r1
    3a70:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    3a74:	4490      	add	r8, r2
    3a76:	3108      	adds	r1, #8
    3a78:	eba1 0108 	sub.w	r1, r1, r8
    3a7c:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    3a80:	4651      	mov	r1, sl
    3a82:	4620      	mov	r0, r4
    3a84:	9200      	str	r2, [sp, #0]
    3a86:	f000 fe5d 	bl	4744 <_sbrk_r>
    3a8a:	1c42      	adds	r2, r0, #1
    3a8c:	e9dd 2300 	ldrd	r2, r3, [sp]
    3a90:	f000 814f 	beq.w	3d32 <_malloc_r+0x50a>
    3a94:	1a80      	subs	r0, r0, r2
    3a96:	eb00 080a 	add.w	r8, r0, sl
    3a9a:	6819      	ldr	r1, [r3, #0]
    3a9c:	60ba      	str	r2, [r7, #8]
    3a9e:	f048 0001 	orr.w	r0, r8, #1
    3aa2:	4451      	add	r1, sl
    3aa4:	42bd      	cmp	r5, r7
    3aa6:	6050      	str	r0, [r2, #4]
    3aa8:	6019      	str	r1, [r3, #0]
    3aaa:	f000 8129 	beq.w	3d00 <_malloc_r+0x4d8>
    3aae:	f1b9 0f0f 	cmp.w	r9, #15
    3ab2:	f240 8127 	bls.w	3d04 <_malloc_r+0x4dc>
    3ab6:	6868      	ldr	r0, [r5, #4]
    3ab8:	f1a9 0c0c 	sub.w	ip, r9, #12
    3abc:	f02c 0c07 	bic.w	ip, ip, #7
    3ac0:	f000 0001 	and.w	r0, r0, #1
    3ac4:	ea40 000c 	orr.w	r0, r0, ip
    3ac8:	6068      	str	r0, [r5, #4]
    3aca:	f04f 0e05 	mov.w	lr, #5
    3ace:	eb05 000c 	add.w	r0, r5, ip
    3ad2:	f1bc 0f0f 	cmp.w	ip, #15
    3ad6:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    3ada:	f200 8132 	bhi.w	3d42 <_malloc_r+0x51a>
    3ade:	6850      	ldr	r0, [r2, #4]
    3ae0:	4615      	mov	r5, r2
    3ae2:	4b12      	ldr	r3, [pc, #72]	; (3b2c <_malloc_r+0x304>)
    3ae4:	681a      	ldr	r2, [r3, #0]
    3ae6:	428a      	cmp	r2, r1
    3ae8:	bf38      	it	cc
    3aea:	6019      	strcc	r1, [r3, #0]
    3aec:	4b10      	ldr	r3, [pc, #64]	; (3b30 <_malloc_r+0x308>)
    3aee:	681a      	ldr	r2, [r3, #0]
    3af0:	428a      	cmp	r2, r1
    3af2:	bf38      	it	cc
    3af4:	6019      	strcc	r1, [r3, #0]
    3af6:	e094      	b.n	3c22 <_malloc_r+0x3fa>
    3af8:	19aa      	adds	r2, r5, r6
    3afa:	f043 0301 	orr.w	r3, r3, #1
    3afe:	f046 0601 	orr.w	r6, r6, #1
    3b02:	606e      	str	r6, [r5, #4]
    3b04:	4620      	mov	r0, r4
    3b06:	60ba      	str	r2, [r7, #8]
    3b08:	6053      	str	r3, [r2, #4]
    3b0a:	f000 f943 	bl	3d94 <__malloc_unlock>
    3b0e:	3508      	adds	r5, #8
    3b10:	4628      	mov	r0, r5
    3b12:	b003      	add	sp, #12
    3b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b18:	68d9      	ldr	r1, [r3, #12]
    3b1a:	441a      	add	r2, r3
    3b1c:	e6a1      	b.n	3862 <_malloc_r+0x3a>
    3b1e:	bf00      	nop
    3b20:	200012b0 	.word	0x200012b0
    3b24:	2000245c 	.word	0x2000245c
    3b28:	2000242c 	.word	0x2000242c
    3b2c:	20002454 	.word	0x20002454
    3b30:	20002458 	.word	0x20002458
    3b34:	200012b8 	.word	0x200012b8
    3b38:	200016b8 	.word	0x200016b8
    3b3c:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    3b40:	ea4f 2352 	mov.w	r3, r2, lsr #9
    3b44:	d363      	bcc.n	3c0e <_malloc_r+0x3e6>
    3b46:	2b14      	cmp	r3, #20
    3b48:	f200 80b7 	bhi.w	3cba <_malloc_r+0x492>
    3b4c:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    3b50:	00c9      	lsls	r1, r1, #3
    3b52:	335b      	adds	r3, #91	; 0x5b
    3b54:	eb07 0e01 	add.w	lr, r7, r1
    3b58:	5879      	ldr	r1, [r7, r1]
    3b5a:	f1ae 0e08 	sub.w	lr, lr, #8
    3b5e:	458e      	cmp	lr, r1
    3b60:	f000 8091 	beq.w	3c86 <_malloc_r+0x45e>
    3b64:	684b      	ldr	r3, [r1, #4]
    3b66:	f023 0303 	bic.w	r3, r3, #3
    3b6a:	4293      	cmp	r3, r2
    3b6c:	d902      	bls.n	3b74 <_malloc_r+0x34c>
    3b6e:	6889      	ldr	r1, [r1, #8]
    3b70:	458e      	cmp	lr, r1
    3b72:	d1f7      	bne.n	3b64 <_malloc_r+0x33c>
    3b74:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    3b78:	687a      	ldr	r2, [r7, #4]
    3b7a:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    3b7e:	f8ce 5008 	str.w	r5, [lr, #8]
    3b82:	60cd      	str	r5, [r1, #12]
    3b84:	e6d6      	b.n	3934 <_malloc_r+0x10c>
    3b86:	2b14      	cmp	r3, #20
    3b88:	d959      	bls.n	3c3e <_malloc_r+0x416>
    3b8a:	2b54      	cmp	r3, #84	; 0x54
    3b8c:	f200 809d 	bhi.w	3cca <_malloc_r+0x4a2>
    3b90:	0b33      	lsrs	r3, r6, #12
    3b92:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    3b96:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    3b9a:	00c3      	lsls	r3, r0, #3
    3b9c:	e68a      	b.n	38b4 <_malloc_r+0x8c>
    3b9e:	f10e 0e01 	add.w	lr, lr, #1
    3ba2:	f01e 0f03 	tst.w	lr, #3
    3ba6:	f105 0508 	add.w	r5, r5, #8
    3baa:	f47f aed5 	bne.w	3958 <_malloc_r+0x130>
    3bae:	e051      	b.n	3c54 <_malloc_r+0x42c>
    3bb0:	4442      	add	r2, r8
    3bb2:	4645      	mov	r5, r8
    3bb4:	6853      	ldr	r3, [r2, #4]
    3bb6:	f8d8 100c 	ldr.w	r1, [r8, #12]
    3bba:	f043 0301 	orr.w	r3, r3, #1
    3bbe:	6053      	str	r3, [r2, #4]
    3bc0:	f855 3f08 	ldr.w	r3, [r5, #8]!
    3bc4:	4620      	mov	r0, r4
    3bc6:	60d9      	str	r1, [r3, #12]
    3bc8:	608b      	str	r3, [r1, #8]
    3bca:	f000 f8e3 	bl	3d94 <__malloc_unlock>
    3bce:	e6f3      	b.n	39b8 <_malloc_r+0x190>
    3bd0:	08f0      	lsrs	r0, r6, #3
    3bd2:	f106 0208 	add.w	r2, r6, #8
    3bd6:	e637      	b.n	3848 <_malloc_r+0x20>
    3bd8:	442a      	add	r2, r5
    3bda:	4620      	mov	r0, r4
    3bdc:	6853      	ldr	r3, [r2, #4]
    3bde:	f043 0301 	orr.w	r3, r3, #1
    3be2:	6053      	str	r3, [r2, #4]
    3be4:	3508      	adds	r5, #8
    3be6:	f000 f8d5 	bl	3d94 <__malloc_unlock>
    3bea:	e6e5      	b.n	39b8 <_malloc_r+0x190>
    3bec:	19a9      	adds	r1, r5, r6
    3bee:	4620      	mov	r0, r4
    3bf0:	f046 0601 	orr.w	r6, r6, #1
    3bf4:	f043 0401 	orr.w	r4, r3, #1
    3bf8:	606e      	str	r6, [r5, #4]
    3bfa:	e9c7 1104 	strd	r1, r1, [r7, #16]
    3bfe:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    3c02:	604c      	str	r4, [r1, #4]
    3c04:	50ab      	str	r3, [r5, r2]
    3c06:	f000 f8c5 	bl	3d94 <__malloc_unlock>
    3c0a:	3508      	adds	r5, #8
    3c0c:	e6d4      	b.n	39b8 <_malloc_r+0x190>
    3c0e:	0993      	lsrs	r3, r2, #6
    3c10:	f103 0139 	add.w	r1, r3, #57	; 0x39
    3c14:	00c9      	lsls	r1, r1, #3
    3c16:	3338      	adds	r3, #56	; 0x38
    3c18:	e79c      	b.n	3b54 <_malloc_r+0x32c>
    3c1a:	42bd      	cmp	r5, r7
    3c1c:	d05f      	beq.n	3cde <_malloc_r+0x4b6>
    3c1e:	68bd      	ldr	r5, [r7, #8]
    3c20:	6868      	ldr	r0, [r5, #4]
    3c22:	f020 0803 	bic.w	r8, r0, #3
    3c26:	4546      	cmp	r6, r8
    3c28:	eba8 0306 	sub.w	r3, r8, r6
    3c2c:	d802      	bhi.n	3c34 <_malloc_r+0x40c>
    3c2e:	2b0f      	cmp	r3, #15
    3c30:	f73f af62 	bgt.w	3af8 <_malloc_r+0x2d0>
    3c34:	4620      	mov	r0, r4
    3c36:	f000 f8ad 	bl	3d94 <__malloc_unlock>
    3c3a:	2500      	movs	r5, #0
    3c3c:	e6bc      	b.n	39b8 <_malloc_r+0x190>
    3c3e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    3c42:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    3c46:	00c3      	lsls	r3, r0, #3
    3c48:	e634      	b.n	38b4 <_malloc_r+0x8c>
    3c4a:	f859 3908 	ldr.w	r3, [r9], #-8
    3c4e:	454b      	cmp	r3, r9
    3c50:	f040 8096 	bne.w	3d80 <_malloc_r+0x558>
    3c54:	f010 0f03 	tst.w	r0, #3
    3c58:	f100 30ff 	add.w	r0, r0, #4294967295
    3c5c:	d1f5      	bne.n	3c4a <_malloc_r+0x422>
    3c5e:	687b      	ldr	r3, [r7, #4]
    3c60:	ea23 0301 	bic.w	r3, r3, r1
    3c64:	607b      	str	r3, [r7, #4]
    3c66:	0049      	lsls	r1, r1, #1
    3c68:	4299      	cmp	r1, r3
    3c6a:	f63f aec0 	bhi.w	39ee <_malloc_r+0x1c6>
    3c6e:	b919      	cbnz	r1, 3c78 <_malloc_r+0x450>
    3c70:	e6bd      	b.n	39ee <_malloc_r+0x1c6>
    3c72:	0049      	lsls	r1, r1, #1
    3c74:	f10e 0e04 	add.w	lr, lr, #4
    3c78:	4219      	tst	r1, r3
    3c7a:	d0fa      	beq.n	3c72 <_malloc_r+0x44a>
    3c7c:	4670      	mov	r0, lr
    3c7e:	e667      	b.n	3950 <_malloc_r+0x128>
    3c80:	f103 0810 	add.w	r8, r3, #16
    3c84:	e6d0      	b.n	3a28 <_malloc_r+0x200>
    3c86:	109a      	asrs	r2, r3, #2
    3c88:	f04f 0801 	mov.w	r8, #1
    3c8c:	687b      	ldr	r3, [r7, #4]
    3c8e:	fa08 f202 	lsl.w	r2, r8, r2
    3c92:	431a      	orrs	r2, r3
    3c94:	607a      	str	r2, [r7, #4]
    3c96:	e770      	b.n	3b7a <_malloc_r+0x352>
    3c98:	eb02 0108 	add.w	r1, r2, r8
    3c9c:	4249      	negs	r1, r1
    3c9e:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    3ca2:	4651      	mov	r1, sl
    3ca4:	4620      	mov	r0, r4
    3ca6:	9200      	str	r2, [sp, #0]
    3ca8:	f000 fd4c 	bl	4744 <_sbrk_r>
    3cac:	1c43      	adds	r3, r0, #1
    3cae:	e9dd 2300 	ldrd	r2, r3, [sp]
    3cb2:	f47f aeef 	bne.w	3a94 <_malloc_r+0x26c>
    3cb6:	46da      	mov	sl, fp
    3cb8:	e6ef      	b.n	3a9a <_malloc_r+0x272>
    3cba:	2b54      	cmp	r3, #84	; 0x54
    3cbc:	d825      	bhi.n	3d0a <_malloc_r+0x4e2>
    3cbe:	0b13      	lsrs	r3, r2, #12
    3cc0:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    3cc4:	00c9      	lsls	r1, r1, #3
    3cc6:	336e      	adds	r3, #110	; 0x6e
    3cc8:	e744      	b.n	3b54 <_malloc_r+0x32c>
    3cca:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    3cce:	d825      	bhi.n	3d1c <_malloc_r+0x4f4>
    3cd0:	0bf3      	lsrs	r3, r6, #15
    3cd2:	f103 0078 	add.w	r0, r3, #120	; 0x78
    3cd6:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    3cda:	00c3      	lsls	r3, r0, #3
    3cdc:	e5ea      	b.n	38b4 <_malloc_r+0x8c>
    3cde:	4b29      	ldr	r3, [pc, #164]	; (3d84 <_malloc_r+0x55c>)
    3ce0:	6818      	ldr	r0, [r3, #0]
    3ce2:	4440      	add	r0, r8
    3ce4:	6018      	str	r0, [r3, #0]
    3ce6:	e6b1      	b.n	3a4c <_malloc_r+0x224>
    3ce8:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    3cec:	f1bc 0f00 	cmp.w	ip, #0
    3cf0:	f47f aeac 	bne.w	3a4c <_malloc_r+0x224>
    3cf4:	68bd      	ldr	r5, [r7, #8]
    3cf6:	44c8      	add	r8, r9
    3cf8:	f048 0001 	orr.w	r0, r8, #1
    3cfc:	6068      	str	r0, [r5, #4]
    3cfe:	e6f0      	b.n	3ae2 <_malloc_r+0x2ba>
    3d00:	4615      	mov	r5, r2
    3d02:	e6ee      	b.n	3ae2 <_malloc_r+0x2ba>
    3d04:	2301      	movs	r3, #1
    3d06:	6053      	str	r3, [r2, #4]
    3d08:	e794      	b.n	3c34 <_malloc_r+0x40c>
    3d0a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    3d0e:	d823      	bhi.n	3d58 <_malloc_r+0x530>
    3d10:	0bd3      	lsrs	r3, r2, #15
    3d12:	f103 0178 	add.w	r1, r3, #120	; 0x78
    3d16:	00c9      	lsls	r1, r1, #3
    3d18:	3377      	adds	r3, #119	; 0x77
    3d1a:	e71b      	b.n	3b54 <_malloc_r+0x32c>
    3d1c:	f240 5254 	movw	r2, #1364	; 0x554
    3d20:	4293      	cmp	r3, r2
    3d22:	d823      	bhi.n	3d6c <_malloc_r+0x544>
    3d24:	0cb3      	lsrs	r3, r6, #18
    3d26:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    3d2a:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    3d2e:	00c3      	lsls	r3, r0, #3
    3d30:	e5c0      	b.n	38b4 <_malloc_r+0x8c>
    3d32:	f1ab 0b08 	sub.w	fp, fp, #8
    3d36:	44d8      	add	r8, fp
    3d38:	eba8 0802 	sub.w	r8, r8, r2
    3d3c:	f04f 0a00 	mov.w	sl, #0
    3d40:	e6ab      	b.n	3a9a <_malloc_r+0x272>
    3d42:	f105 0108 	add.w	r1, r5, #8
    3d46:	4620      	mov	r0, r4
    3d48:	9300      	str	r3, [sp, #0]
    3d4a:	f000 febb 	bl	4ac4 <_free_r>
    3d4e:	68bd      	ldr	r5, [r7, #8]
    3d50:	9b00      	ldr	r3, [sp, #0]
    3d52:	6868      	ldr	r0, [r5, #4]
    3d54:	6819      	ldr	r1, [r3, #0]
    3d56:	e6c4      	b.n	3ae2 <_malloc_r+0x2ba>
    3d58:	f240 5154 	movw	r1, #1364	; 0x554
    3d5c:	428b      	cmp	r3, r1
    3d5e:	d80b      	bhi.n	3d78 <_malloc_r+0x550>
    3d60:	0c93      	lsrs	r3, r2, #18
    3d62:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    3d66:	00c9      	lsls	r1, r1, #3
    3d68:	337c      	adds	r3, #124	; 0x7c
    3d6a:	e6f3      	b.n	3b54 <_malloc_r+0x32c>
    3d6c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    3d70:	207f      	movs	r0, #127	; 0x7f
    3d72:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    3d76:	e59d      	b.n	38b4 <_malloc_r+0x8c>
    3d78:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    3d7c:	237e      	movs	r3, #126	; 0x7e
    3d7e:	e6e9      	b.n	3b54 <_malloc_r+0x32c>
    3d80:	687b      	ldr	r3, [r7, #4]
    3d82:	e770      	b.n	3c66 <_malloc_r+0x43e>
    3d84:	2000242c 	.word	0x2000242c

00003d88 <__malloc_lock>:
    3d88:	4801      	ldr	r0, [pc, #4]	; (3d90 <__malloc_lock+0x8>)
    3d8a:	f000 bd31 	b.w	47f0 <__retarget_lock_acquire_recursive>
    3d8e:	bf00      	nop
    3d90:	20002424 	.word	0x20002424

00003d94 <__malloc_unlock>:
    3d94:	4801      	ldr	r0, [pc, #4]	; (3d9c <__malloc_unlock+0x8>)
    3d96:	f000 bd2d 	b.w	47f4 <__retarget_lock_release_recursive>
    3d9a:	bf00      	nop
    3d9c:	20002424 	.word	0x20002424

00003da0 <realloc>:
    3da0:	b410      	push	{r4}
    3da2:	4c04      	ldr	r4, [pc, #16]	; (3db4 <realloc+0x14>)
    3da4:	4603      	mov	r3, r0
    3da6:	460a      	mov	r2, r1
    3da8:	6820      	ldr	r0, [r4, #0]
    3daa:	f85d 4b04 	ldr.w	r4, [sp], #4
    3dae:	4619      	mov	r1, r3
    3db0:	f000 b802 	b.w	3db8 <_realloc_r>
    3db4:	200016cc 	.word	0x200016cc

00003db8 <_realloc_r>:
    3db8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3dbc:	4617      	mov	r7, r2
    3dbe:	2900      	cmp	r1, #0
    3dc0:	f000 8098 	beq.w	3ef4 <_realloc_r+0x13c>
    3dc4:	460c      	mov	r4, r1
    3dc6:	f107 050b 	add.w	r5, r7, #11
    3dca:	4680      	mov	r8, r0
    3dcc:	f7ff ffdc 	bl	3d88 <__malloc_lock>
    3dd0:	2d16      	cmp	r5, #22
    3dd2:	f854 1c04 	ldr.w	r1, [r4, #-4]
    3dd6:	d85b      	bhi.n	3e90 <_realloc_r+0xd8>
    3dd8:	2510      	movs	r5, #16
    3dda:	462a      	mov	r2, r5
    3ddc:	42af      	cmp	r7, r5
    3dde:	d85c      	bhi.n	3e9a <_realloc_r+0xe2>
    3de0:	f021 0603 	bic.w	r6, r1, #3
    3de4:	4296      	cmp	r6, r2
    3de6:	f1a4 0908 	sub.w	r9, r4, #8
    3dea:	da62      	bge.n	3eb2 <_realloc_r+0xfa>
    3dec:	4bbc      	ldr	r3, [pc, #752]	; (40e0 <_realloc_r+0x328>)
    3dee:	f8d3 c008 	ldr.w	ip, [r3, #8]
    3df2:	eb09 0006 	add.w	r0, r9, r6
    3df6:	4584      	cmp	ip, r0
    3df8:	f000 8097 	beq.w	3f2a <_realloc_r+0x172>
    3dfc:	f8d0 c004 	ldr.w	ip, [r0, #4]
    3e00:	f02c 0301 	bic.w	r3, ip, #1
    3e04:	4403      	add	r3, r0
    3e06:	685b      	ldr	r3, [r3, #4]
    3e08:	07db      	lsls	r3, r3, #31
    3e0a:	d468      	bmi.n	3ede <_realloc_r+0x126>
    3e0c:	f02c 0c03 	bic.w	ip, ip, #3
    3e10:	eb06 030c 	add.w	r3, r6, ip
    3e14:	4293      	cmp	r3, r2
    3e16:	da47      	bge.n	3ea8 <_realloc_r+0xf0>
    3e18:	07cb      	lsls	r3, r1, #31
    3e1a:	d410      	bmi.n	3e3e <_realloc_r+0x86>
    3e1c:	f854 3c08 	ldr.w	r3, [r4, #-8]
    3e20:	eba9 0a03 	sub.w	sl, r9, r3
    3e24:	f8da 3004 	ldr.w	r3, [sl, #4]
    3e28:	f023 0103 	bic.w	r1, r3, #3
    3e2c:	448c      	add	ip, r1
    3e2e:	44b4      	add	ip, r6
    3e30:	4594      	cmp	ip, r2
    3e32:	f280 8111 	bge.w	4058 <_realloc_r+0x2a0>
    3e36:	1873      	adds	r3, r6, r1
    3e38:	4293      	cmp	r3, r2
    3e3a:	f280 80e8 	bge.w	400e <_realloc_r+0x256>
    3e3e:	4639      	mov	r1, r7
    3e40:	4640      	mov	r0, r8
    3e42:	f7ff fcf1 	bl	3828 <_malloc_r>
    3e46:	4607      	mov	r7, r0
    3e48:	b1e0      	cbz	r0, 3e84 <_realloc_r+0xcc>
    3e4a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3e4e:	f023 0301 	bic.w	r3, r3, #1
    3e52:	444b      	add	r3, r9
    3e54:	f1a0 0208 	sub.w	r2, r0, #8
    3e58:	4293      	cmp	r3, r2
    3e5a:	f000 80d2 	beq.w	4002 <_realloc_r+0x24a>
    3e5e:	1f32      	subs	r2, r6, #4
    3e60:	2a24      	cmp	r2, #36	; 0x24
    3e62:	f200 80f5 	bhi.w	4050 <_realloc_r+0x298>
    3e66:	2a13      	cmp	r2, #19
    3e68:	f200 80ac 	bhi.w	3fc4 <_realloc_r+0x20c>
    3e6c:	4603      	mov	r3, r0
    3e6e:	4622      	mov	r2, r4
    3e70:	6811      	ldr	r1, [r2, #0]
    3e72:	6019      	str	r1, [r3, #0]
    3e74:	6851      	ldr	r1, [r2, #4]
    3e76:	6059      	str	r1, [r3, #4]
    3e78:	6892      	ldr	r2, [r2, #8]
    3e7a:	609a      	str	r2, [r3, #8]
    3e7c:	4621      	mov	r1, r4
    3e7e:	4640      	mov	r0, r8
    3e80:	f000 fe20 	bl	4ac4 <_free_r>
    3e84:	4640      	mov	r0, r8
    3e86:	f7ff ff85 	bl	3d94 <__malloc_unlock>
    3e8a:	4638      	mov	r0, r7
    3e8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e90:	f025 0507 	bic.w	r5, r5, #7
    3e94:	2d00      	cmp	r5, #0
    3e96:	462a      	mov	r2, r5
    3e98:	daa0      	bge.n	3ddc <_realloc_r+0x24>
    3e9a:	230c      	movs	r3, #12
    3e9c:	f8c8 3000 	str.w	r3, [r8]
    3ea0:	2700      	movs	r7, #0
    3ea2:	4638      	mov	r0, r7
    3ea4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ea8:	461e      	mov	r6, r3
    3eaa:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    3eae:	60d3      	str	r3, [r2, #12]
    3eb0:	609a      	str	r2, [r3, #8]
    3eb2:	1b73      	subs	r3, r6, r5
    3eb4:	2b0f      	cmp	r3, #15
    3eb6:	d822      	bhi.n	3efe <_realloc_r+0x146>
    3eb8:	f8d9 3004 	ldr.w	r3, [r9, #4]
    3ebc:	f003 0301 	and.w	r3, r3, #1
    3ec0:	4333      	orrs	r3, r6
    3ec2:	444e      	add	r6, r9
    3ec4:	f8c9 3004 	str.w	r3, [r9, #4]
    3ec8:	6873      	ldr	r3, [r6, #4]
    3eca:	f043 0301 	orr.w	r3, r3, #1
    3ece:	6073      	str	r3, [r6, #4]
    3ed0:	4640      	mov	r0, r8
    3ed2:	4627      	mov	r7, r4
    3ed4:	f7ff ff5e 	bl	3d94 <__malloc_unlock>
    3ed8:	4638      	mov	r0, r7
    3eda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ede:	07c9      	lsls	r1, r1, #31
    3ee0:	d4ad      	bmi.n	3e3e <_realloc_r+0x86>
    3ee2:	f854 3c08 	ldr.w	r3, [r4, #-8]
    3ee6:	eba9 0a03 	sub.w	sl, r9, r3
    3eea:	f8da 1004 	ldr.w	r1, [sl, #4]
    3eee:	f021 0103 	bic.w	r1, r1, #3
    3ef2:	e7a0      	b.n	3e36 <_realloc_r+0x7e>
    3ef4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ef8:	4611      	mov	r1, r2
    3efa:	f7ff bc95 	b.w	3828 <_malloc_r>
    3efe:	f8d9 2004 	ldr.w	r2, [r9, #4]
    3f02:	eb09 0105 	add.w	r1, r9, r5
    3f06:	f002 0201 	and.w	r2, r2, #1
    3f0a:	444e      	add	r6, r9
    3f0c:	f043 0301 	orr.w	r3, r3, #1
    3f10:	432a      	orrs	r2, r5
    3f12:	f8c9 2004 	str.w	r2, [r9, #4]
    3f16:	604b      	str	r3, [r1, #4]
    3f18:	6873      	ldr	r3, [r6, #4]
    3f1a:	f043 0301 	orr.w	r3, r3, #1
    3f1e:	3108      	adds	r1, #8
    3f20:	6073      	str	r3, [r6, #4]
    3f22:	4640      	mov	r0, r8
    3f24:	f000 fdce 	bl	4ac4 <_free_r>
    3f28:	e7d2      	b.n	3ed0 <_realloc_r+0x118>
    3f2a:	f8dc 0004 	ldr.w	r0, [ip, #4]
    3f2e:	f020 0b03 	bic.w	fp, r0, #3
    3f32:	eb06 0c0b 	add.w	ip, r6, fp
    3f36:	f105 0010 	add.w	r0, r5, #16
    3f3a:	4584      	cmp	ip, r0
    3f3c:	da4d      	bge.n	3fda <_realloc_r+0x222>
    3f3e:	07c9      	lsls	r1, r1, #31
    3f40:	f53f af7d 	bmi.w	3e3e <_realloc_r+0x86>
    3f44:	f854 1c08 	ldr.w	r1, [r4, #-8]
    3f48:	eba9 0a01 	sub.w	sl, r9, r1
    3f4c:	f8da 1004 	ldr.w	r1, [sl, #4]
    3f50:	f021 0103 	bic.w	r1, r1, #3
    3f54:	448b      	add	fp, r1
    3f56:	44b3      	add	fp, r6
    3f58:	4558      	cmp	r0, fp
    3f5a:	f73f af6c 	bgt.w	3e36 <_realloc_r+0x7e>
    3f5e:	4657      	mov	r7, sl
    3f60:	f8da 100c 	ldr.w	r1, [sl, #12]
    3f64:	f857 0f08 	ldr.w	r0, [r7, #8]!
    3f68:	1f32      	subs	r2, r6, #4
    3f6a:	2a24      	cmp	r2, #36	; 0x24
    3f6c:	60c1      	str	r1, [r0, #12]
    3f6e:	6088      	str	r0, [r1, #8]
    3f70:	f200 80db 	bhi.w	412a <_realloc_r+0x372>
    3f74:	2a13      	cmp	r2, #19
    3f76:	f240 80d6 	bls.w	4126 <_realloc_r+0x36e>
    3f7a:	6821      	ldr	r1, [r4, #0]
    3f7c:	f8ca 1008 	str.w	r1, [sl, #8]
    3f80:	6861      	ldr	r1, [r4, #4]
    3f82:	f8ca 100c 	str.w	r1, [sl, #12]
    3f86:	2a1b      	cmp	r2, #27
    3f88:	f200 80df 	bhi.w	414a <_realloc_r+0x392>
    3f8c:	3408      	adds	r4, #8
    3f8e:	f10a 0210 	add.w	r2, sl, #16
    3f92:	6821      	ldr	r1, [r4, #0]
    3f94:	6011      	str	r1, [r2, #0]
    3f96:	6861      	ldr	r1, [r4, #4]
    3f98:	6051      	str	r1, [r2, #4]
    3f9a:	68a1      	ldr	r1, [r4, #8]
    3f9c:	6091      	str	r1, [r2, #8]
    3f9e:	eb0a 0105 	add.w	r1, sl, r5
    3fa2:	ebab 0205 	sub.w	r2, fp, r5
    3fa6:	f042 0201 	orr.w	r2, r2, #1
    3faa:	6099      	str	r1, [r3, #8]
    3fac:	604a      	str	r2, [r1, #4]
    3fae:	f8da 3004 	ldr.w	r3, [sl, #4]
    3fb2:	f003 0301 	and.w	r3, r3, #1
    3fb6:	432b      	orrs	r3, r5
    3fb8:	4640      	mov	r0, r8
    3fba:	f8ca 3004 	str.w	r3, [sl, #4]
    3fbe:	f7ff fee9 	bl	3d94 <__malloc_unlock>
    3fc2:	e76e      	b.n	3ea2 <_realloc_r+0xea>
    3fc4:	6823      	ldr	r3, [r4, #0]
    3fc6:	6003      	str	r3, [r0, #0]
    3fc8:	6863      	ldr	r3, [r4, #4]
    3fca:	6043      	str	r3, [r0, #4]
    3fcc:	2a1b      	cmp	r2, #27
    3fce:	d868      	bhi.n	40a2 <_realloc_r+0x2ea>
    3fd0:	f104 0208 	add.w	r2, r4, #8
    3fd4:	f100 0308 	add.w	r3, r0, #8
    3fd8:	e74a      	b.n	3e70 <_realloc_r+0xb8>
    3fda:	eb09 0205 	add.w	r2, r9, r5
    3fde:	609a      	str	r2, [r3, #8]
    3fe0:	ebac 0305 	sub.w	r3, ip, r5
    3fe4:	f043 0301 	orr.w	r3, r3, #1
    3fe8:	6053      	str	r3, [r2, #4]
    3fea:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3fee:	f003 0301 	and.w	r3, r3, #1
    3ff2:	432b      	orrs	r3, r5
    3ff4:	4640      	mov	r0, r8
    3ff6:	f844 3c04 	str.w	r3, [r4, #-4]
    3ffa:	f7ff fecb 	bl	3d94 <__malloc_unlock>
    3ffe:	4627      	mov	r7, r4
    4000:	e74f      	b.n	3ea2 <_realloc_r+0xea>
    4002:	f850 3c04 	ldr.w	r3, [r0, #-4]
    4006:	f023 0303 	bic.w	r3, r3, #3
    400a:	441e      	add	r6, r3
    400c:	e751      	b.n	3eb2 <_realloc_r+0xfa>
    400e:	4657      	mov	r7, sl
    4010:	f8da 100c 	ldr.w	r1, [sl, #12]
    4014:	f857 0f08 	ldr.w	r0, [r7, #8]!
    4018:	1f32      	subs	r2, r6, #4
    401a:	2a24      	cmp	r2, #36	; 0x24
    401c:	60c1      	str	r1, [r0, #12]
    401e:	6088      	str	r0, [r1, #8]
    4020:	d84c      	bhi.n	40bc <_realloc_r+0x304>
    4022:	2a13      	cmp	r2, #19
    4024:	d948      	bls.n	40b8 <_realloc_r+0x300>
    4026:	6821      	ldr	r1, [r4, #0]
    4028:	f8ca 1008 	str.w	r1, [sl, #8]
    402c:	6861      	ldr	r1, [r4, #4]
    402e:	f8ca 100c 	str.w	r1, [sl, #12]
    4032:	2a1b      	cmp	r2, #27
    4034:	d856      	bhi.n	40e4 <_realloc_r+0x32c>
    4036:	3408      	adds	r4, #8
    4038:	f10a 0210 	add.w	r2, sl, #16
    403c:	461e      	mov	r6, r3
    403e:	6823      	ldr	r3, [r4, #0]
    4040:	6013      	str	r3, [r2, #0]
    4042:	6863      	ldr	r3, [r4, #4]
    4044:	6053      	str	r3, [r2, #4]
    4046:	68a3      	ldr	r3, [r4, #8]
    4048:	6093      	str	r3, [r2, #8]
    404a:	46d1      	mov	r9, sl
    404c:	463c      	mov	r4, r7
    404e:	e730      	b.n	3eb2 <_realloc_r+0xfa>
    4050:	4621      	mov	r1, r4
    4052:	f000 fa33 	bl	44bc <memmove>
    4056:	e711      	b.n	3e7c <_realloc_r+0xc4>
    4058:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    405c:	4657      	mov	r7, sl
    405e:	60cb      	str	r3, [r1, #12]
    4060:	6099      	str	r1, [r3, #8]
    4062:	f857 1f08 	ldr.w	r1, [r7, #8]!
    4066:	f8da 300c 	ldr.w	r3, [sl, #12]
    406a:	60cb      	str	r3, [r1, #12]
    406c:	1f32      	subs	r2, r6, #4
    406e:	2a24      	cmp	r2, #36	; 0x24
    4070:	6099      	str	r1, [r3, #8]
    4072:	d82d      	bhi.n	40d0 <_realloc_r+0x318>
    4074:	2a13      	cmp	r2, #19
    4076:	d929      	bls.n	40cc <_realloc_r+0x314>
    4078:	6823      	ldr	r3, [r4, #0]
    407a:	f8ca 3008 	str.w	r3, [sl, #8]
    407e:	6863      	ldr	r3, [r4, #4]
    4080:	f8ca 300c 	str.w	r3, [sl, #12]
    4084:	2a1b      	cmp	r2, #27
    4086:	d842      	bhi.n	410e <_realloc_r+0x356>
    4088:	3408      	adds	r4, #8
    408a:	f10a 0310 	add.w	r3, sl, #16
    408e:	6822      	ldr	r2, [r4, #0]
    4090:	601a      	str	r2, [r3, #0]
    4092:	6862      	ldr	r2, [r4, #4]
    4094:	605a      	str	r2, [r3, #4]
    4096:	68a2      	ldr	r2, [r4, #8]
    4098:	609a      	str	r2, [r3, #8]
    409a:	4666      	mov	r6, ip
    409c:	46d1      	mov	r9, sl
    409e:	463c      	mov	r4, r7
    40a0:	e707      	b.n	3eb2 <_realloc_r+0xfa>
    40a2:	68a3      	ldr	r3, [r4, #8]
    40a4:	6083      	str	r3, [r0, #8]
    40a6:	68e3      	ldr	r3, [r4, #12]
    40a8:	60c3      	str	r3, [r0, #12]
    40aa:	2a24      	cmp	r2, #36	; 0x24
    40ac:	d026      	beq.n	40fc <_realloc_r+0x344>
    40ae:	f104 0210 	add.w	r2, r4, #16
    40b2:	f100 0310 	add.w	r3, r0, #16
    40b6:	e6db      	b.n	3e70 <_realloc_r+0xb8>
    40b8:	463a      	mov	r2, r7
    40ba:	e7bf      	b.n	403c <_realloc_r+0x284>
    40bc:	4621      	mov	r1, r4
    40be:	4638      	mov	r0, r7
    40c0:	461e      	mov	r6, r3
    40c2:	46d1      	mov	r9, sl
    40c4:	f000 f9fa 	bl	44bc <memmove>
    40c8:	463c      	mov	r4, r7
    40ca:	e6f2      	b.n	3eb2 <_realloc_r+0xfa>
    40cc:	463b      	mov	r3, r7
    40ce:	e7de      	b.n	408e <_realloc_r+0x2d6>
    40d0:	4621      	mov	r1, r4
    40d2:	4638      	mov	r0, r7
    40d4:	4666      	mov	r6, ip
    40d6:	46d1      	mov	r9, sl
    40d8:	f000 f9f0 	bl	44bc <memmove>
    40dc:	463c      	mov	r4, r7
    40de:	e6e8      	b.n	3eb2 <_realloc_r+0xfa>
    40e0:	200012b0 	.word	0x200012b0
    40e4:	68a1      	ldr	r1, [r4, #8]
    40e6:	f8ca 1010 	str.w	r1, [sl, #16]
    40ea:	68e1      	ldr	r1, [r4, #12]
    40ec:	f8ca 1014 	str.w	r1, [sl, #20]
    40f0:	2a24      	cmp	r2, #36	; 0x24
    40f2:	d020      	beq.n	4136 <_realloc_r+0x37e>
    40f4:	3410      	adds	r4, #16
    40f6:	f10a 0218 	add.w	r2, sl, #24
    40fa:	e79f      	b.n	403c <_realloc_r+0x284>
    40fc:	6923      	ldr	r3, [r4, #16]
    40fe:	6103      	str	r3, [r0, #16]
    4100:	6961      	ldr	r1, [r4, #20]
    4102:	6141      	str	r1, [r0, #20]
    4104:	f104 0218 	add.w	r2, r4, #24
    4108:	f100 0318 	add.w	r3, r0, #24
    410c:	e6b0      	b.n	3e70 <_realloc_r+0xb8>
    410e:	68a3      	ldr	r3, [r4, #8]
    4110:	f8ca 3010 	str.w	r3, [sl, #16]
    4114:	68e3      	ldr	r3, [r4, #12]
    4116:	f8ca 3014 	str.w	r3, [sl, #20]
    411a:	2a24      	cmp	r2, #36	; 0x24
    411c:	d021      	beq.n	4162 <_realloc_r+0x3aa>
    411e:	3410      	adds	r4, #16
    4120:	f10a 0318 	add.w	r3, sl, #24
    4124:	e7b3      	b.n	408e <_realloc_r+0x2d6>
    4126:	463a      	mov	r2, r7
    4128:	e733      	b.n	3f92 <_realloc_r+0x1da>
    412a:	4621      	mov	r1, r4
    412c:	4638      	mov	r0, r7
    412e:	f000 f9c5 	bl	44bc <memmove>
    4132:	4b16      	ldr	r3, [pc, #88]	; (418c <_realloc_r+0x3d4>)
    4134:	e733      	b.n	3f9e <_realloc_r+0x1e6>
    4136:	6922      	ldr	r2, [r4, #16]
    4138:	f8ca 2018 	str.w	r2, [sl, #24]
    413c:	6962      	ldr	r2, [r4, #20]
    413e:	f8ca 201c 	str.w	r2, [sl, #28]
    4142:	3418      	adds	r4, #24
    4144:	f10a 0220 	add.w	r2, sl, #32
    4148:	e778      	b.n	403c <_realloc_r+0x284>
    414a:	68a1      	ldr	r1, [r4, #8]
    414c:	f8ca 1010 	str.w	r1, [sl, #16]
    4150:	68e1      	ldr	r1, [r4, #12]
    4152:	f8ca 1014 	str.w	r1, [sl, #20]
    4156:	2a24      	cmp	r2, #36	; 0x24
    4158:	d00d      	beq.n	4176 <_realloc_r+0x3be>
    415a:	3410      	adds	r4, #16
    415c:	f10a 0218 	add.w	r2, sl, #24
    4160:	e717      	b.n	3f92 <_realloc_r+0x1da>
    4162:	6923      	ldr	r3, [r4, #16]
    4164:	f8ca 3018 	str.w	r3, [sl, #24]
    4168:	6963      	ldr	r3, [r4, #20]
    416a:	f8ca 301c 	str.w	r3, [sl, #28]
    416e:	3418      	adds	r4, #24
    4170:	f10a 0320 	add.w	r3, sl, #32
    4174:	e78b      	b.n	408e <_realloc_r+0x2d6>
    4176:	6922      	ldr	r2, [r4, #16]
    4178:	f8ca 2018 	str.w	r2, [sl, #24]
    417c:	6962      	ldr	r2, [r4, #20]
    417e:	f8ca 201c 	str.w	r2, [sl, #28]
    4182:	3418      	adds	r4, #24
    4184:	f10a 0220 	add.w	r2, sl, #32
    4188:	e703      	b.n	3f92 <_realloc_r+0x1da>
    418a:	bf00      	nop
    418c:	200012b0 	.word	0x200012b0

00004190 <__cxa_atexit>:
    4190:	4613      	mov	r3, r2
    4192:	460a      	mov	r2, r1
    4194:	4601      	mov	r1, r0
    4196:	2002      	movs	r0, #2
    4198:	f000 bc00 	b.w	499c <__register_exitproc>

0000419c <stdio_exit_handler>:
    419c:	4a02      	ldr	r2, [pc, #8]	; (41a8 <stdio_exit_handler+0xc>)
    419e:	4903      	ldr	r1, [pc, #12]	; (41ac <stdio_exit_handler+0x10>)
    41a0:	4803      	ldr	r0, [pc, #12]	; (41b0 <stdio_exit_handler+0x14>)
    41a2:	f000 b8bb 	b.w	431c <_fwalk_sglue>
    41a6:	bf00      	nop
    41a8:	200016c0 	.word	0x200016c0
    41ac:	00006fd5 	.word	0x00006fd5
    41b0:	20000da8 	.word	0x20000da8

000041b4 <cleanup_stdio>:
    41b4:	4b0c      	ldr	r3, [pc, #48]	; (41e8 <cleanup_stdio+0x34>)
    41b6:	6841      	ldr	r1, [r0, #4]
    41b8:	4299      	cmp	r1, r3
    41ba:	b510      	push	{r4, lr}
    41bc:	4604      	mov	r4, r0
    41be:	d001      	beq.n	41c4 <cleanup_stdio+0x10>
    41c0:	f002 ff08 	bl	6fd4 <_fclose_r>
    41c4:	68a1      	ldr	r1, [r4, #8]
    41c6:	4b09      	ldr	r3, [pc, #36]	; (41ec <cleanup_stdio+0x38>)
    41c8:	4299      	cmp	r1, r3
    41ca:	d002      	beq.n	41d2 <cleanup_stdio+0x1e>
    41cc:	4620      	mov	r0, r4
    41ce:	f002 ff01 	bl	6fd4 <_fclose_r>
    41d2:	68e1      	ldr	r1, [r4, #12]
    41d4:	4b06      	ldr	r3, [pc, #24]	; (41f0 <cleanup_stdio+0x3c>)
    41d6:	4299      	cmp	r1, r3
    41d8:	d004      	beq.n	41e4 <cleanup_stdio+0x30>
    41da:	4620      	mov	r0, r4
    41dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    41e0:	f002 bef8 	b.w	6fd4 <_fclose_r>
    41e4:	bd10      	pop	{r4, pc}
    41e6:	bf00      	nop
    41e8:	20002460 	.word	0x20002460
    41ec:	200024c8 	.word	0x200024c8
    41f0:	20002530 	.word	0x20002530

000041f4 <global_stdio_init.part.0>:
    41f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    41f8:	4c2a      	ldr	r4, [pc, #168]	; (42a4 <global_stdio_init.part.0+0xb0>)
    41fa:	4b2b      	ldr	r3, [pc, #172]	; (42a8 <global_stdio_init.part.0+0xb4>)
    41fc:	482b      	ldr	r0, [pc, #172]	; (42ac <global_stdio_init.part.0+0xb8>)
    41fe:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 42c0 <global_stdio_init.part.0+0xcc>
    4202:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 42c4 <global_stdio_init.part.0+0xd0>
    4206:	4f2a      	ldr	r7, [pc, #168]	; (42b0 <global_stdio_init.part.0+0xbc>)
    4208:	6018      	str	r0, [r3, #0]
    420a:	2500      	movs	r5, #0
    420c:	2304      	movs	r3, #4
    420e:	2208      	movs	r2, #8
    4210:	4629      	mov	r1, r5
    4212:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    4216:	4e27      	ldr	r6, [pc, #156]	; (42b4 <global_stdio_init.part.0+0xc0>)
    4218:	6665      	str	r5, [r4, #100]	; 0x64
    421a:	e9c4 5302 	strd	r5, r3, [r4, #8]
    421e:	e9c4 5500 	strd	r5, r5, [r4]
    4222:	e9c4 5504 	strd	r5, r5, [r4, #16]
    4226:	61a5      	str	r5, [r4, #24]
    4228:	f000 f9c4 	bl	45b4 <memset>
    422c:	4b22      	ldr	r3, [pc, #136]	; (42b8 <global_stdio_init.part.0+0xc4>)
    422e:	6763      	str	r3, [r4, #116]	; 0x74
    4230:	2208      	movs	r2, #8
    4232:	4629      	mov	r1, r5
    4234:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    4238:	e9c4 4907 	strd	r4, r9, [r4, #28]
    423c:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    4240:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    4244:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    4248:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    424c:	6725      	str	r5, [r4, #112]	; 0x70
    424e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    4252:	62e6      	str	r6, [r4, #44]	; 0x2c
    4254:	f000 f9ae 	bl	45b4 <memset>
    4258:	4b18      	ldr	r3, [pc, #96]	; (42bc <global_stdio_init.part.0+0xc8>)
    425a:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    425e:	4629      	mov	r1, r5
    4260:	f104 0368 	add.w	r3, r4, #104	; 0x68
    4264:	2208      	movs	r2, #8
    4266:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    426a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    426e:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    4272:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    4276:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    427a:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    427e:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    4282:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    4286:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    428a:	f000 f993 	bl	45b4 <memset>
    428e:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    4292:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    4296:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    429a:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    429e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    42a2:	bf00      	nop
    42a4:	20002460 	.word	0x20002460
    42a8:	20002598 	.word	0x20002598
    42ac:	0000419d 	.word	0x0000419d
    42b0:	000043c9 	.word	0x000043c9
    42b4:	000043e9 	.word	0x000043e9
    42b8:	00010009 	.word	0x00010009
    42bc:	00020012 	.word	0x00020012
    42c0:	00004365 	.word	0x00004365
    42c4:	00004389 	.word	0x00004389

000042c8 <__sinit>:
    42c8:	b510      	push	{r4, lr}
    42ca:	4604      	mov	r4, r0
    42cc:	480a      	ldr	r0, [pc, #40]	; (42f8 <__sinit+0x30>)
    42ce:	f000 fa8f 	bl	47f0 <__retarget_lock_acquire_recursive>
    42d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    42d4:	b923      	cbnz	r3, 42e0 <__sinit+0x18>
    42d6:	4b09      	ldr	r3, [pc, #36]	; (42fc <__sinit+0x34>)
    42d8:	4a09      	ldr	r2, [pc, #36]	; (4300 <__sinit+0x38>)
    42da:	681b      	ldr	r3, [r3, #0]
    42dc:	6362      	str	r2, [r4, #52]	; 0x34
    42de:	b123      	cbz	r3, 42ea <__sinit+0x22>
    42e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42e4:	4804      	ldr	r0, [pc, #16]	; (42f8 <__sinit+0x30>)
    42e6:	f000 ba85 	b.w	47f4 <__retarget_lock_release_recursive>
    42ea:	f7ff ff83 	bl	41f4 <global_stdio_init.part.0>
    42ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42f2:	4801      	ldr	r0, [pc, #4]	; (42f8 <__sinit+0x30>)
    42f4:	f000 ba7e 	b.w	47f4 <__retarget_lock_release_recursive>
    42f8:	20002428 	.word	0x20002428
    42fc:	20002598 	.word	0x20002598
    4300:	000041b5 	.word	0x000041b5

00004304 <__sfp_lock_acquire>:
    4304:	4801      	ldr	r0, [pc, #4]	; (430c <__sfp_lock_acquire+0x8>)
    4306:	f000 ba73 	b.w	47f0 <__retarget_lock_acquire_recursive>
    430a:	bf00      	nop
    430c:	20002428 	.word	0x20002428

00004310 <__sfp_lock_release>:
    4310:	4801      	ldr	r0, [pc, #4]	; (4318 <__sfp_lock_release+0x8>)
    4312:	f000 ba6f 	b.w	47f4 <__retarget_lock_release_recursive>
    4316:	bf00      	nop
    4318:	20002428 	.word	0x20002428

0000431c <_fwalk_sglue>:
    431c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4320:	4680      	mov	r8, r0
    4322:	460f      	mov	r7, r1
    4324:	4616      	mov	r6, r2
    4326:	f04f 0900 	mov.w	r9, #0
    432a:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    432e:	3d01      	subs	r5, #1
    4330:	d411      	bmi.n	4356 <_fwalk_sglue+0x3a>
    4332:	89a3      	ldrh	r3, [r4, #12]
    4334:	2b01      	cmp	r3, #1
    4336:	f105 35ff 	add.w	r5, r5, #4294967295
    433a:	d908      	bls.n	434e <_fwalk_sglue+0x32>
    433c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    4340:	3301      	adds	r3, #1
    4342:	4621      	mov	r1, r4
    4344:	d003      	beq.n	434e <_fwalk_sglue+0x32>
    4346:	4640      	mov	r0, r8
    4348:	47b8      	blx	r7
    434a:	ea49 0900 	orr.w	r9, r9, r0
    434e:	1c6b      	adds	r3, r5, #1
    4350:	f104 0468 	add.w	r4, r4, #104	; 0x68
    4354:	d1ed      	bne.n	4332 <_fwalk_sglue+0x16>
    4356:	6836      	ldr	r6, [r6, #0]
    4358:	2e00      	cmp	r6, #0
    435a:	d1e6      	bne.n	432a <_fwalk_sglue+0xe>
    435c:	4648      	mov	r0, r9
    435e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4362:	bf00      	nop

00004364 <__sread>:
    4364:	b510      	push	{r4, lr}
    4366:	460c      	mov	r4, r1
    4368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    436c:	f000 f9d4 	bl	4718 <_read_r>
    4370:	2800      	cmp	r0, #0
    4372:	db03      	blt.n	437c <__sread+0x18>
    4374:	6d23      	ldr	r3, [r4, #80]	; 0x50
    4376:	4403      	add	r3, r0
    4378:	6523      	str	r3, [r4, #80]	; 0x50
    437a:	bd10      	pop	{r4, pc}
    437c:	89a3      	ldrh	r3, [r4, #12]
    437e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4382:	81a3      	strh	r3, [r4, #12]
    4384:	bd10      	pop	{r4, pc}
    4386:	bf00      	nop

00004388 <__swrite>:
    4388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    438c:	460c      	mov	r4, r1
    438e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    4392:	461f      	mov	r7, r3
    4394:	05cb      	lsls	r3, r1, #23
    4396:	4605      	mov	r5, r0
    4398:	4616      	mov	r6, r2
    439a:	d40b      	bmi.n	43b4 <__swrite+0x2c>
    439c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    43a0:	81a1      	strh	r1, [r4, #12]
    43a2:	463b      	mov	r3, r7
    43a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    43a8:	4632      	mov	r2, r6
    43aa:	4628      	mov	r0, r5
    43ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    43b0:	f000 b9da 	b.w	4768 <_write_r>
    43b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    43b8:	2302      	movs	r3, #2
    43ba:	2200      	movs	r2, #0
    43bc:	f000 f996 	bl	46ec <_lseek_r>
    43c0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    43c4:	e7ea      	b.n	439c <__swrite+0x14>
    43c6:	bf00      	nop

000043c8 <__sseek>:
    43c8:	b510      	push	{r4, lr}
    43ca:	460c      	mov	r4, r1
    43cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    43d0:	f000 f98c 	bl	46ec <_lseek_r>
    43d4:	89a3      	ldrh	r3, [r4, #12]
    43d6:	1c42      	adds	r2, r0, #1
    43d8:	bf0e      	itee	eq
    43da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    43de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    43e2:	6520      	strne	r0, [r4, #80]	; 0x50
    43e4:	81a3      	strh	r3, [r4, #12]
    43e6:	bd10      	pop	{r4, pc}

000043e8 <__sclose>:
    43e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    43ec:	f000 b96c 	b.w	46c8 <_close_r>

000043f0 <_vdprintf_r>:
    43f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    43f2:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    43f6:	af04      	add	r7, sp, #16
    43f8:	9300      	str	r3, [sp, #0]
    43fa:	4613      	mov	r3, r2
    43fc:	f44f 7200 	mov.w	r2, #512	; 0x200
    4400:	460e      	mov	r6, r1
    4402:	9203      	str	r2, [sp, #12]
    4404:	4639      	mov	r1, r7
    4406:	aa03      	add	r2, sp, #12
    4408:	4605      	mov	r5, r0
    440a:	f000 f825 	bl	4458 <_vasnprintf_r>
    440e:	b188      	cbz	r0, 4434 <_vdprintf_r+0x44>
    4410:	4604      	mov	r4, r0
    4412:	4602      	mov	r2, r0
    4414:	9b03      	ldr	r3, [sp, #12]
    4416:	4631      	mov	r1, r6
    4418:	4628      	mov	r0, r5
    441a:	f000 f9a5 	bl	4768 <_write_r>
    441e:	42bc      	cmp	r4, r7
    4420:	9003      	str	r0, [sp, #12]
    4422:	d004      	beq.n	442e <_vdprintf_r+0x3e>
    4424:	4628      	mov	r0, r5
    4426:	4621      	mov	r1, r4
    4428:	f000 fb4c 	bl	4ac4 <_free_r>
    442c:	9803      	ldr	r0, [sp, #12]
    442e:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    4432:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4434:	f04f 30ff 	mov.w	r0, #4294967295
    4438:	e7f9      	b.n	442e <_vdprintf_r+0x3e>
    443a:	bf00      	nop

0000443c <vdprintf>:
    443c:	b410      	push	{r4}
    443e:	4c05      	ldr	r4, [pc, #20]	; (4454 <vdprintf+0x18>)
    4440:	4684      	mov	ip, r0
    4442:	4613      	mov	r3, r2
    4444:	6820      	ldr	r0, [r4, #0]
    4446:	f85d 4b04 	ldr.w	r4, [sp], #4
    444a:	460a      	mov	r2, r1
    444c:	4661      	mov	r1, ip
    444e:	f7ff bfcf 	b.w	43f0 <_vdprintf_r>
    4452:	bf00      	nop
    4454:	200016cc 	.word	0x200016cc

00004458 <_vasnprintf_r>:
    4458:	b530      	push	{r4, r5, lr}
    445a:	6814      	ldr	r4, [r2, #0]
    445c:	4615      	mov	r5, r2
    445e:	b09b      	sub	sp, #108	; 0x6c
    4460:	461a      	mov	r2, r3
    4462:	b109      	cbz	r1, 4468 <_vasnprintf_r+0x10>
    4464:	2c00      	cmp	r4, #0
    4466:	d119      	bne.n	449c <_vasnprintf_r+0x44>
    4468:	2100      	movs	r1, #0
    446a:	f44f 7322 	mov.w	r3, #648	; 0x288
    446e:	f8ad 300c 	strh.w	r3, [sp, #12]
    4472:	9100      	str	r1, [sp, #0]
    4474:	9104      	str	r1, [sp, #16]
    4476:	f64f 73ff 	movw	r3, #65535	; 0xffff
    447a:	9102      	str	r1, [sp, #8]
    447c:	9105      	str	r1, [sp, #20]
    447e:	f8ad 300e 	strh.w	r3, [sp, #14]
    4482:	4669      	mov	r1, sp
    4484:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    4486:	f001 f803 	bl	5490 <_svfprintf_r>
    448a:	2800      	cmp	r0, #0
    448c:	db13      	blt.n	44b6 <_vasnprintf_r+0x5e>
    448e:	9b00      	ldr	r3, [sp, #0]
    4490:	6028      	str	r0, [r5, #0]
    4492:	2200      	movs	r2, #0
    4494:	701a      	strb	r2, [r3, #0]
    4496:	9804      	ldr	r0, [sp, #16]
    4498:	b01b      	add	sp, #108	; 0x6c
    449a:	bd30      	pop	{r4, r5, pc}
    449c:	f44f 63c1 	mov.w	r3, #1544	; 0x608
    44a0:	9100      	str	r1, [sp, #0]
    44a2:	9104      	str	r1, [sp, #16]
    44a4:	f8ad 300c 	strh.w	r3, [sp, #12]
    44a8:	4621      	mov	r1, r4
    44aa:	dae4      	bge.n	4476 <_vasnprintf_r+0x1e>
    44ac:	238b      	movs	r3, #139	; 0x8b
    44ae:	6003      	str	r3, [r0, #0]
    44b0:	2000      	movs	r0, #0
    44b2:	b01b      	add	sp, #108	; 0x6c
    44b4:	bd30      	pop	{r4, r5, pc}
    44b6:	2000      	movs	r0, #0
    44b8:	e7ee      	b.n	4498 <_vasnprintf_r+0x40>
    44ba:	bf00      	nop

000044bc <memmove>:
    44bc:	4288      	cmp	r0, r1
    44be:	d90d      	bls.n	44dc <memmove+0x20>
    44c0:	188b      	adds	r3, r1, r2
    44c2:	4283      	cmp	r3, r0
    44c4:	d90a      	bls.n	44dc <memmove+0x20>
    44c6:	eb00 0c02 	add.w	ip, r0, r2
    44ca:	b1ba      	cbz	r2, 44fc <memmove+0x40>
    44cc:	4662      	mov	r2, ip
    44ce:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    44d2:	f802 cd01 	strb.w	ip, [r2, #-1]!
    44d6:	4299      	cmp	r1, r3
    44d8:	d1f9      	bne.n	44ce <memmove+0x12>
    44da:	4770      	bx	lr
    44dc:	2a0f      	cmp	r2, #15
    44de:	d80e      	bhi.n	44fe <memmove+0x42>
    44e0:	4603      	mov	r3, r0
    44e2:	f102 3cff 	add.w	ip, r2, #4294967295
    44e6:	b14a      	cbz	r2, 44fc <memmove+0x40>
    44e8:	f10c 0c01 	add.w	ip, ip, #1
    44ec:	3b01      	subs	r3, #1
    44ee:	448c      	add	ip, r1
    44f0:	f811 2b01 	ldrb.w	r2, [r1], #1
    44f4:	f803 2f01 	strb.w	r2, [r3, #1]!
    44f8:	4561      	cmp	r1, ip
    44fa:	d1f9      	bne.n	44f0 <memmove+0x34>
    44fc:	4770      	bx	lr
    44fe:	ea40 0301 	orr.w	r3, r0, r1
    4502:	079b      	lsls	r3, r3, #30
    4504:	d150      	bne.n	45a8 <memmove+0xec>
    4506:	f1a2 0310 	sub.w	r3, r2, #16
    450a:	b570      	push	{r4, r5, r6, lr}
    450c:	f101 0c20 	add.w	ip, r1, #32
    4510:	f023 050f 	bic.w	r5, r3, #15
    4514:	f101 0e10 	add.w	lr, r1, #16
    4518:	f100 0410 	add.w	r4, r0, #16
    451c:	44ac      	add	ip, r5
    451e:	091b      	lsrs	r3, r3, #4
    4520:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    4524:	f844 5c10 	str.w	r5, [r4, #-16]
    4528:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    452c:	f844 5c0c 	str.w	r5, [r4, #-12]
    4530:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    4534:	f844 5c08 	str.w	r5, [r4, #-8]
    4538:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    453c:	f844 5c04 	str.w	r5, [r4, #-4]
    4540:	f10e 0e10 	add.w	lr, lr, #16
    4544:	45e6      	cmp	lr, ip
    4546:	f104 0410 	add.w	r4, r4, #16
    454a:	d1e9      	bne.n	4520 <memmove+0x64>
    454c:	3301      	adds	r3, #1
    454e:	f012 0f0c 	tst.w	r2, #12
    4552:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    4556:	f002 040f 	and.w	r4, r2, #15
    455a:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    455e:	d027      	beq.n	45b0 <memmove+0xf4>
    4560:	3c04      	subs	r4, #4
    4562:	f024 0603 	bic.w	r6, r4, #3
    4566:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    456a:	441e      	add	r6, r3
    456c:	1f1c      	subs	r4, r3, #4
    456e:	468e      	mov	lr, r1
    4570:	f85e 5b04 	ldr.w	r5, [lr], #4
    4574:	f844 5f04 	str.w	r5, [r4, #4]!
    4578:	42b4      	cmp	r4, r6
    457a:	d1f9      	bne.n	4570 <memmove+0xb4>
    457c:	f10c 0401 	add.w	r4, ip, #1
    4580:	f002 0203 	and.w	r2, r2, #3
    4584:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4588:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    458c:	f102 3cff 	add.w	ip, r2, #4294967295
    4590:	b14a      	cbz	r2, 45a6 <memmove+0xea>
    4592:	f10c 0c01 	add.w	ip, ip, #1
    4596:	3b01      	subs	r3, #1
    4598:	448c      	add	ip, r1
    459a:	f811 2b01 	ldrb.w	r2, [r1], #1
    459e:	f803 2f01 	strb.w	r2, [r3, #1]!
    45a2:	4561      	cmp	r1, ip
    45a4:	d1f9      	bne.n	459a <memmove+0xde>
    45a6:	bd70      	pop	{r4, r5, r6, pc}
    45a8:	f102 3cff 	add.w	ip, r2, #4294967295
    45ac:	4603      	mov	r3, r0
    45ae:	e79b      	b.n	44e8 <memmove+0x2c>
    45b0:	4622      	mov	r2, r4
    45b2:	e7eb      	b.n	458c <memmove+0xd0>

000045b4 <memset>:
    45b4:	0783      	lsls	r3, r0, #30
    45b6:	b530      	push	{r4, r5, lr}
    45b8:	d048      	beq.n	464c <memset+0x98>
    45ba:	1e54      	subs	r4, r2, #1
    45bc:	2a00      	cmp	r2, #0
    45be:	d03f      	beq.n	4640 <memset+0x8c>
    45c0:	b2ca      	uxtb	r2, r1
    45c2:	4603      	mov	r3, r0
    45c4:	e001      	b.n	45ca <memset+0x16>
    45c6:	3c01      	subs	r4, #1
    45c8:	d33a      	bcc.n	4640 <memset+0x8c>
    45ca:	f803 2b01 	strb.w	r2, [r3], #1
    45ce:	079d      	lsls	r5, r3, #30
    45d0:	d1f9      	bne.n	45c6 <memset+0x12>
    45d2:	2c03      	cmp	r4, #3
    45d4:	d92d      	bls.n	4632 <memset+0x7e>
    45d6:	b2cd      	uxtb	r5, r1
    45d8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    45dc:	2c0f      	cmp	r4, #15
    45de:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    45e2:	d936      	bls.n	4652 <memset+0x9e>
    45e4:	f1a4 0210 	sub.w	r2, r4, #16
    45e8:	f022 0c0f 	bic.w	ip, r2, #15
    45ec:	f103 0e20 	add.w	lr, r3, #32
    45f0:	44e6      	add	lr, ip
    45f2:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    45f6:	f103 0210 	add.w	r2, r3, #16
    45fa:	e942 5504 	strd	r5, r5, [r2, #-16]
    45fe:	e942 5502 	strd	r5, r5, [r2, #-8]
    4602:	3210      	adds	r2, #16
    4604:	4572      	cmp	r2, lr
    4606:	d1f8      	bne.n	45fa <memset+0x46>
    4608:	f10c 0201 	add.w	r2, ip, #1
    460c:	f014 0f0c 	tst.w	r4, #12
    4610:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    4614:	f004 0c0f 	and.w	ip, r4, #15
    4618:	d013      	beq.n	4642 <memset+0x8e>
    461a:	f1ac 0304 	sub.w	r3, ip, #4
    461e:	f023 0303 	bic.w	r3, r3, #3
    4622:	3304      	adds	r3, #4
    4624:	4413      	add	r3, r2
    4626:	f842 5b04 	str.w	r5, [r2], #4
    462a:	4293      	cmp	r3, r2
    462c:	d1fb      	bne.n	4626 <memset+0x72>
    462e:	f00c 0403 	and.w	r4, ip, #3
    4632:	b12c      	cbz	r4, 4640 <memset+0x8c>
    4634:	b2c9      	uxtb	r1, r1
    4636:	441c      	add	r4, r3
    4638:	f803 1b01 	strb.w	r1, [r3], #1
    463c:	429c      	cmp	r4, r3
    463e:	d1fb      	bne.n	4638 <memset+0x84>
    4640:	bd30      	pop	{r4, r5, pc}
    4642:	4664      	mov	r4, ip
    4644:	4613      	mov	r3, r2
    4646:	2c00      	cmp	r4, #0
    4648:	d1f4      	bne.n	4634 <memset+0x80>
    464a:	e7f9      	b.n	4640 <memset+0x8c>
    464c:	4603      	mov	r3, r0
    464e:	4614      	mov	r4, r2
    4650:	e7bf      	b.n	45d2 <memset+0x1e>
    4652:	461a      	mov	r2, r3
    4654:	46a4      	mov	ip, r4
    4656:	e7e0      	b.n	461a <memset+0x66>

00004658 <strncpy>:
    4658:	ea40 0301 	orr.w	r3, r0, r1
    465c:	079b      	lsls	r3, r3, #30
    465e:	b530      	push	{r4, r5, lr}
    4660:	d101      	bne.n	4666 <strncpy+0xe>
    4662:	2a03      	cmp	r2, #3
    4664:	d80f      	bhi.n	4686 <strncpy+0x2e>
    4666:	4684      	mov	ip, r0
    4668:	f101 3eff 	add.w	lr, r1, #4294967295
    466c:	e007      	b.n	467e <strncpy+0x26>
    466e:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    4672:	f803 1b01 	strb.w	r1, [r3], #1
    4676:	1e54      	subs	r4, r2, #1
    4678:	b1c1      	cbz	r1, 46ac <strncpy+0x54>
    467a:	469c      	mov	ip, r3
    467c:	4622      	mov	r2, r4
    467e:	4663      	mov	r3, ip
    4680:	2a00      	cmp	r2, #0
    4682:	d1f4      	bne.n	466e <strncpy+0x16>
    4684:	bd30      	pop	{r4, r5, pc}
    4686:	460b      	mov	r3, r1
    4688:	4684      	mov	ip, r0
    468a:	4619      	mov	r1, r3
    468c:	f853 5b04 	ldr.w	r5, [r3], #4
    4690:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    4694:	ea24 0405 	bic.w	r4, r4, r5
    4698:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    469c:	d1e4      	bne.n	4668 <strncpy+0x10>
    469e:	3a04      	subs	r2, #4
    46a0:	2a03      	cmp	r2, #3
    46a2:	f84c 5b04 	str.w	r5, [ip], #4
    46a6:	4619      	mov	r1, r3
    46a8:	d8ef      	bhi.n	468a <strncpy+0x32>
    46aa:	e7dd      	b.n	4668 <strncpy+0x10>
    46ac:	4494      	add	ip, r2
    46ae:	2c00      	cmp	r4, #0
    46b0:	d0e8      	beq.n	4684 <strncpy+0x2c>
    46b2:	f803 1b01 	strb.w	r1, [r3], #1
    46b6:	4563      	cmp	r3, ip
    46b8:	d1fb      	bne.n	46b2 <strncpy+0x5a>
    46ba:	bd30      	pop	{r4, r5, pc}

000046bc <__locale_mb_cur_max>:
    46bc:	4b01      	ldr	r3, [pc, #4]	; (46c4 <__locale_mb_cur_max+0x8>)
    46be:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    46c2:	4770      	bx	lr
    46c4:	20001144 	.word	0x20001144

000046c8 <_close_r>:
    46c8:	b538      	push	{r3, r4, r5, lr}
    46ca:	4d07      	ldr	r5, [pc, #28]	; (46e8 <_close_r+0x20>)
    46cc:	2200      	movs	r2, #0
    46ce:	4604      	mov	r4, r0
    46d0:	4608      	mov	r0, r1
    46d2:	602a      	str	r2, [r5, #0]
    46d4:	f7fd ff38 	bl	2548 <_close>
    46d8:	1c43      	adds	r3, r0, #1
    46da:	d000      	beq.n	46de <_close_r+0x16>
    46dc:	bd38      	pop	{r3, r4, r5, pc}
    46de:	682b      	ldr	r3, [r5, #0]
    46e0:	2b00      	cmp	r3, #0
    46e2:	d0fb      	beq.n	46dc <_close_r+0x14>
    46e4:	6023      	str	r3, [r4, #0]
    46e6:	bd38      	pop	{r3, r4, r5, pc}
    46e8:	200025b0 	.word	0x200025b0

000046ec <_lseek_r>:
    46ec:	b538      	push	{r3, r4, r5, lr}
    46ee:	460c      	mov	r4, r1
    46f0:	4d08      	ldr	r5, [pc, #32]	; (4714 <_lseek_r+0x28>)
    46f2:	4684      	mov	ip, r0
    46f4:	4611      	mov	r1, r2
    46f6:	4620      	mov	r0, r4
    46f8:	461a      	mov	r2, r3
    46fa:	2300      	movs	r3, #0
    46fc:	602b      	str	r3, [r5, #0]
    46fe:	4664      	mov	r4, ip
    4700:	f7fd ff2e 	bl	2560 <_lseek>
    4704:	1c43      	adds	r3, r0, #1
    4706:	d000      	beq.n	470a <_lseek_r+0x1e>
    4708:	bd38      	pop	{r3, r4, r5, pc}
    470a:	682b      	ldr	r3, [r5, #0]
    470c:	2b00      	cmp	r3, #0
    470e:	d0fb      	beq.n	4708 <_lseek_r+0x1c>
    4710:	6023      	str	r3, [r4, #0]
    4712:	bd38      	pop	{r3, r4, r5, pc}
    4714:	200025b0 	.word	0x200025b0

00004718 <_read_r>:
    4718:	b538      	push	{r3, r4, r5, lr}
    471a:	460c      	mov	r4, r1
    471c:	4d08      	ldr	r5, [pc, #32]	; (4740 <_read_r+0x28>)
    471e:	4684      	mov	ip, r0
    4720:	4611      	mov	r1, r2
    4722:	4620      	mov	r0, r4
    4724:	461a      	mov	r2, r3
    4726:	2300      	movs	r3, #0
    4728:	602b      	str	r3, [r5, #0]
    472a:	4664      	mov	r4, ip
    472c:	f7fd ff0a 	bl	2544 <_read>
    4730:	1c43      	adds	r3, r0, #1
    4732:	d000      	beq.n	4736 <_read_r+0x1e>
    4734:	bd38      	pop	{r3, r4, r5, pc}
    4736:	682b      	ldr	r3, [r5, #0]
    4738:	2b00      	cmp	r3, #0
    473a:	d0fb      	beq.n	4734 <_read_r+0x1c>
    473c:	6023      	str	r3, [r4, #0]
    473e:	bd38      	pop	{r3, r4, r5, pc}
    4740:	200025b0 	.word	0x200025b0

00004744 <_sbrk_r>:
    4744:	b538      	push	{r3, r4, r5, lr}
    4746:	4d07      	ldr	r5, [pc, #28]	; (4764 <_sbrk_r+0x20>)
    4748:	2200      	movs	r2, #0
    474a:	4604      	mov	r4, r0
    474c:	4608      	mov	r0, r1
    474e:	602a      	str	r2, [r5, #0]
    4750:	f7fd fede 	bl	2510 <_sbrk>
    4754:	1c43      	adds	r3, r0, #1
    4756:	d000      	beq.n	475a <_sbrk_r+0x16>
    4758:	bd38      	pop	{r3, r4, r5, pc}
    475a:	682b      	ldr	r3, [r5, #0]
    475c:	2b00      	cmp	r3, #0
    475e:	d0fb      	beq.n	4758 <_sbrk_r+0x14>
    4760:	6023      	str	r3, [r4, #0]
    4762:	bd38      	pop	{r3, r4, r5, pc}
    4764:	200025b0 	.word	0x200025b0

00004768 <_write_r>:
    4768:	b538      	push	{r3, r4, r5, lr}
    476a:	460c      	mov	r4, r1
    476c:	4d08      	ldr	r5, [pc, #32]	; (4790 <_write_r+0x28>)
    476e:	4684      	mov	ip, r0
    4770:	4611      	mov	r1, r2
    4772:	4620      	mov	r0, r4
    4774:	461a      	mov	r2, r3
    4776:	2300      	movs	r3, #0
    4778:	602b      	str	r3, [r5, #0]
    477a:	4664      	mov	r4, ip
    477c:	f7fd f88c 	bl	1898 <_write>
    4780:	1c43      	adds	r3, r0, #1
    4782:	d000      	beq.n	4786 <_write_r+0x1e>
    4784:	bd38      	pop	{r3, r4, r5, pc}
    4786:	682b      	ldr	r3, [r5, #0]
    4788:	2b00      	cmp	r3, #0
    478a:	d0fb      	beq.n	4784 <_write_r+0x1c>
    478c:	6023      	str	r3, [r4, #0]
    478e:	bd38      	pop	{r3, r4, r5, pc}
    4790:	200025b0 	.word	0x200025b0

00004794 <__errno>:
    4794:	4b01      	ldr	r3, [pc, #4]	; (479c <__errno+0x8>)
    4796:	6818      	ldr	r0, [r3, #0]
    4798:	4770      	bx	lr
    479a:	bf00      	nop
    479c:	200016cc 	.word	0x200016cc

000047a0 <__libc_init_array>:
    47a0:	b570      	push	{r4, r5, r6, lr}
    47a2:	4e0d      	ldr	r6, [pc, #52]	; (47d8 <__libc_init_array+0x38>)
    47a4:	4d0d      	ldr	r5, [pc, #52]	; (47dc <__libc_init_array+0x3c>)
    47a6:	1b76      	subs	r6, r6, r5
    47a8:	10b6      	asrs	r6, r6, #2
    47aa:	d006      	beq.n	47ba <__libc_init_array+0x1a>
    47ac:	2400      	movs	r4, #0
    47ae:	f855 3b04 	ldr.w	r3, [r5], #4
    47b2:	3401      	adds	r4, #1
    47b4:	4798      	blx	r3
    47b6:	42a6      	cmp	r6, r4
    47b8:	d1f9      	bne.n	47ae <__libc_init_array+0xe>
    47ba:	4e09      	ldr	r6, [pc, #36]	; (47e0 <__libc_init_array+0x40>)
    47bc:	4d09      	ldr	r5, [pc, #36]	; (47e4 <__libc_init_array+0x44>)
    47be:	1b76      	subs	r6, r6, r5
    47c0:	f005 fa22 	bl	9c08 <___init_veneer>
    47c4:	10b6      	asrs	r6, r6, #2
    47c6:	d006      	beq.n	47d6 <__libc_init_array+0x36>
    47c8:	2400      	movs	r4, #0
    47ca:	f855 3b04 	ldr.w	r3, [r5], #4
    47ce:	3401      	adds	r4, #1
    47d0:	4798      	blx	r3
    47d2:	42a6      	cmp	r6, r4
    47d4:	d1f9      	bne.n	47ca <__libc_init_array+0x2a>
    47d6:	bd70      	pop	{r4, r5, r6, pc}
    47d8:	60001ab8 	.word	0x60001ab8
    47dc:	60001ab8 	.word	0x60001ab8
    47e0:	60001adc 	.word	0x60001adc
    47e4:	60001ab8 	.word	0x60001ab8

000047e8 <__retarget_lock_init_recursive>:
    47e8:	4770      	bx	lr
    47ea:	bf00      	nop

000047ec <__retarget_lock_close_recursive>:
    47ec:	4770      	bx	lr
    47ee:	bf00      	nop

000047f0 <__retarget_lock_acquire_recursive>:
    47f0:	4770      	bx	lr
    47f2:	bf00      	nop

000047f4 <__retarget_lock_release_recursive>:
    47f4:	4770      	bx	lr
    47f6:	bf00      	nop

000047f8 <strcpy>:
    47f8:	ea80 0201 	eor.w	r2, r0, r1
    47fc:	4684      	mov	ip, r0
    47fe:	f012 0f03 	tst.w	r2, #3
    4802:	d14f      	bne.n	48a4 <strcpy+0xac>
    4804:	f011 0f03 	tst.w	r1, #3
    4808:	d132      	bne.n	4870 <strcpy+0x78>
    480a:	f84d 4d04 	str.w	r4, [sp, #-4]!
    480e:	f011 0f04 	tst.w	r1, #4
    4812:	f851 3b04 	ldr.w	r3, [r1], #4
    4816:	d00b      	beq.n	4830 <strcpy+0x38>
    4818:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    481c:	439a      	bics	r2, r3
    481e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    4822:	bf04      	itt	eq
    4824:	f84c 3b04 	streq.w	r3, [ip], #4
    4828:	f851 3b04 	ldreq.w	r3, [r1], #4
    482c:	d116      	bne.n	485c <strcpy+0x64>
    482e:	bf00      	nop
    4830:	f851 4b04 	ldr.w	r4, [r1], #4
    4834:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    4838:	439a      	bics	r2, r3
    483a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    483e:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    4842:	d10b      	bne.n	485c <strcpy+0x64>
    4844:	f84c 3b04 	str.w	r3, [ip], #4
    4848:	43a2      	bics	r2, r4
    484a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    484e:	bf04      	itt	eq
    4850:	f851 3b04 	ldreq.w	r3, [r1], #4
    4854:	f84c 4b04 	streq.w	r4, [ip], #4
    4858:	d0ea      	beq.n	4830 <strcpy+0x38>
    485a:	4623      	mov	r3, r4
    485c:	f80c 3b01 	strb.w	r3, [ip], #1
    4860:	f013 0fff 	tst.w	r3, #255	; 0xff
    4864:	ea4f 2333 	mov.w	r3, r3, ror #8
    4868:	d1f8      	bne.n	485c <strcpy+0x64>
    486a:	f85d 4b04 	ldr.w	r4, [sp], #4
    486e:	4770      	bx	lr
    4870:	f011 0f01 	tst.w	r1, #1
    4874:	d006      	beq.n	4884 <strcpy+0x8c>
    4876:	f811 2b01 	ldrb.w	r2, [r1], #1
    487a:	f80c 2b01 	strb.w	r2, [ip], #1
    487e:	2a00      	cmp	r2, #0
    4880:	bf08      	it	eq
    4882:	4770      	bxeq	lr
    4884:	f011 0f02 	tst.w	r1, #2
    4888:	d0bf      	beq.n	480a <strcpy+0x12>
    488a:	f831 2b02 	ldrh.w	r2, [r1], #2
    488e:	f012 0fff 	tst.w	r2, #255	; 0xff
    4892:	bf16      	itet	ne
    4894:	f82c 2b02 	strhne.w	r2, [ip], #2
    4898:	f88c 2000 	strbeq.w	r2, [ip]
    489c:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    48a0:	d1b3      	bne.n	480a <strcpy+0x12>
    48a2:	4770      	bx	lr
    48a4:	f811 2b01 	ldrb.w	r2, [r1], #1
    48a8:	f80c 2b01 	strb.w	r2, [ip], #1
    48ac:	2a00      	cmp	r2, #0
    48ae:	d1f9      	bne.n	48a4 <strcpy+0xac>
    48b0:	4770      	bx	lr
    48b2:	bf00      	nop
	...

000048c0 <strlen>:
    48c0:	f890 f000 	pld	[r0]
    48c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    48c8:	f020 0107 	bic.w	r1, r0, #7
    48cc:	f06f 0c00 	mvn.w	ip, #0
    48d0:	f010 0407 	ands.w	r4, r0, #7
    48d4:	f891 f020 	pld	[r1, #32]
    48d8:	f040 8049 	bne.w	496e <strlen+0xae>
    48dc:	f04f 0400 	mov.w	r4, #0
    48e0:	f06f 0007 	mvn.w	r0, #7
    48e4:	e9d1 2300 	ldrd	r2, r3, [r1]
    48e8:	f891 f040 	pld	[r1, #64]	; 0x40
    48ec:	f100 0008 	add.w	r0, r0, #8
    48f0:	fa82 f24c 	uadd8	r2, r2, ip
    48f4:	faa4 f28c 	sel	r2, r4, ip
    48f8:	fa83 f34c 	uadd8	r3, r3, ip
    48fc:	faa2 f38c 	sel	r3, r2, ip
    4900:	bb4b      	cbnz	r3, 4956 <strlen+0x96>
    4902:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    4906:	fa82 f24c 	uadd8	r2, r2, ip
    490a:	f100 0008 	add.w	r0, r0, #8
    490e:	faa4 f28c 	sel	r2, r4, ip
    4912:	fa83 f34c 	uadd8	r3, r3, ip
    4916:	faa2 f38c 	sel	r3, r2, ip
    491a:	b9e3      	cbnz	r3, 4956 <strlen+0x96>
    491c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    4920:	fa82 f24c 	uadd8	r2, r2, ip
    4924:	f100 0008 	add.w	r0, r0, #8
    4928:	faa4 f28c 	sel	r2, r4, ip
    492c:	fa83 f34c 	uadd8	r3, r3, ip
    4930:	faa2 f38c 	sel	r3, r2, ip
    4934:	b97b      	cbnz	r3, 4956 <strlen+0x96>
    4936:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    493a:	f101 0120 	add.w	r1, r1, #32
    493e:	fa82 f24c 	uadd8	r2, r2, ip
    4942:	f100 0008 	add.w	r0, r0, #8
    4946:	faa4 f28c 	sel	r2, r4, ip
    494a:	fa83 f34c 	uadd8	r3, r3, ip
    494e:	faa2 f38c 	sel	r3, r2, ip
    4952:	2b00      	cmp	r3, #0
    4954:	d0c6      	beq.n	48e4 <strlen+0x24>
    4956:	2a00      	cmp	r2, #0
    4958:	bf04      	itt	eq
    495a:	3004      	addeq	r0, #4
    495c:	461a      	moveq	r2, r3
    495e:	ba12      	rev	r2, r2
    4960:	fab2 f282 	clz	r2, r2
    4964:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    4968:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    496c:	4770      	bx	lr
    496e:	e9d1 2300 	ldrd	r2, r3, [r1]
    4972:	f004 0503 	and.w	r5, r4, #3
    4976:	f1c4 0000 	rsb	r0, r4, #0
    497a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    497e:	f014 0f04 	tst.w	r4, #4
    4982:	f891 f040 	pld	[r1, #64]	; 0x40
    4986:	fa0c f505 	lsl.w	r5, ip, r5
    498a:	ea62 0205 	orn	r2, r2, r5
    498e:	bf1c      	itt	ne
    4990:	ea63 0305 	ornne	r3, r3, r5
    4994:	4662      	movne	r2, ip
    4996:	f04f 0400 	mov.w	r4, #0
    499a:	e7a9      	b.n	48f0 <strlen+0x30>

0000499c <__register_exitproc>:
    499c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    49a0:	f8df a07c 	ldr.w	sl, [pc, #124]	; 4a20 <__register_exitproc+0x84>
    49a4:	4606      	mov	r6, r0
    49a6:	f8da 0000 	ldr.w	r0, [sl]
    49aa:	4698      	mov	r8, r3
    49ac:	460f      	mov	r7, r1
    49ae:	4691      	mov	r9, r2
    49b0:	f7ff ff1e 	bl	47f0 <__retarget_lock_acquire_recursive>
    49b4:	4b18      	ldr	r3, [pc, #96]	; (4a18 <__register_exitproc+0x7c>)
    49b6:	681c      	ldr	r4, [r3, #0]
    49b8:	b324      	cbz	r4, 4a04 <__register_exitproc+0x68>
    49ba:	6865      	ldr	r5, [r4, #4]
    49bc:	2d1f      	cmp	r5, #31
    49be:	dc24      	bgt.n	4a0a <__register_exitproc+0x6e>
    49c0:	b95e      	cbnz	r6, 49da <__register_exitproc+0x3e>
    49c2:	1c6b      	adds	r3, r5, #1
    49c4:	3502      	adds	r5, #2
    49c6:	f8da 0000 	ldr.w	r0, [sl]
    49ca:	6063      	str	r3, [r4, #4]
    49cc:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    49d0:	f7ff ff10 	bl	47f4 <__retarget_lock_release_recursive>
    49d4:	2000      	movs	r0, #0
    49d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    49da:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    49de:	2301      	movs	r3, #1
    49e0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    49e4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    49e8:	40ab      	lsls	r3, r5
    49ea:	431a      	orrs	r2, r3
    49ec:	2e02      	cmp	r6, #2
    49ee:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    49f2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    49f6:	d1e4      	bne.n	49c2 <__register_exitproc+0x26>
    49f8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    49fc:	431a      	orrs	r2, r3
    49fe:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    4a02:	e7de      	b.n	49c2 <__register_exitproc+0x26>
    4a04:	4c05      	ldr	r4, [pc, #20]	; (4a1c <__register_exitproc+0x80>)
    4a06:	601c      	str	r4, [r3, #0]
    4a08:	e7d7      	b.n	49ba <__register_exitproc+0x1e>
    4a0a:	f8da 0000 	ldr.w	r0, [sl]
    4a0e:	f7ff fef1 	bl	47f4 <__retarget_lock_release_recursive>
    4a12:	f04f 30ff 	mov.w	r0, #4294967295
    4a16:	e7de      	b.n	49d6 <__register_exitproc+0x3a>
    4a18:	2000228c 	.word	0x2000228c
    4a1c:	20002290 	.word	0x20002290
    4a20:	20001138 	.word	0x20001138

00004a24 <_malloc_trim_r>:
    4a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a26:	4f24      	ldr	r7, [pc, #144]	; (4ab8 <_malloc_trim_r+0x94>)
    4a28:	460c      	mov	r4, r1
    4a2a:	4606      	mov	r6, r0
    4a2c:	f7ff f9ac 	bl	3d88 <__malloc_lock>
    4a30:	68bb      	ldr	r3, [r7, #8]
    4a32:	685d      	ldr	r5, [r3, #4]
    4a34:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    4a38:	310f      	adds	r1, #15
    4a3a:	f025 0503 	bic.w	r5, r5, #3
    4a3e:	194b      	adds	r3, r1, r5
    4a40:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    4a44:	f023 030f 	bic.w	r3, r3, #15
    4a48:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    4a4c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    4a50:	db07      	blt.n	4a62 <_malloc_trim_r+0x3e>
    4a52:	2100      	movs	r1, #0
    4a54:	4630      	mov	r0, r6
    4a56:	f7ff fe75 	bl	4744 <_sbrk_r>
    4a5a:	68bb      	ldr	r3, [r7, #8]
    4a5c:	442b      	add	r3, r5
    4a5e:	4298      	cmp	r0, r3
    4a60:	d004      	beq.n	4a6c <_malloc_trim_r+0x48>
    4a62:	4630      	mov	r0, r6
    4a64:	f7ff f996 	bl	3d94 <__malloc_unlock>
    4a68:	2000      	movs	r0, #0
    4a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a6c:	4261      	negs	r1, r4
    4a6e:	4630      	mov	r0, r6
    4a70:	f7ff fe68 	bl	4744 <_sbrk_r>
    4a74:	3001      	adds	r0, #1
    4a76:	d00d      	beq.n	4a94 <_malloc_trim_r+0x70>
    4a78:	4a10      	ldr	r2, [pc, #64]	; (4abc <_malloc_trim_r+0x98>)
    4a7a:	68bb      	ldr	r3, [r7, #8]
    4a7c:	1b2d      	subs	r5, r5, r4
    4a7e:	f045 0501 	orr.w	r5, r5, #1
    4a82:	605d      	str	r5, [r3, #4]
    4a84:	6813      	ldr	r3, [r2, #0]
    4a86:	4630      	mov	r0, r6
    4a88:	1b1b      	subs	r3, r3, r4
    4a8a:	6013      	str	r3, [r2, #0]
    4a8c:	f7ff f982 	bl	3d94 <__malloc_unlock>
    4a90:	2001      	movs	r0, #1
    4a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a94:	2100      	movs	r1, #0
    4a96:	4630      	mov	r0, r6
    4a98:	f7ff fe54 	bl	4744 <_sbrk_r>
    4a9c:	68ba      	ldr	r2, [r7, #8]
    4a9e:	1a83      	subs	r3, r0, r2
    4aa0:	2b0f      	cmp	r3, #15
    4aa2:	ddde      	ble.n	4a62 <_malloc_trim_r+0x3e>
    4aa4:	f043 0301 	orr.w	r3, r3, #1
    4aa8:	6053      	str	r3, [r2, #4]
    4aaa:	4b05      	ldr	r3, [pc, #20]	; (4ac0 <_malloc_trim_r+0x9c>)
    4aac:	4903      	ldr	r1, [pc, #12]	; (4abc <_malloc_trim_r+0x98>)
    4aae:	681b      	ldr	r3, [r3, #0]
    4ab0:	1ac0      	subs	r0, r0, r3
    4ab2:	6008      	str	r0, [r1, #0]
    4ab4:	e7d5      	b.n	4a62 <_malloc_trim_r+0x3e>
    4ab6:	bf00      	nop
    4ab8:	200012b0 	.word	0x200012b0
    4abc:	2000242c 	.word	0x2000242c
    4ac0:	200016b8 	.word	0x200016b8

00004ac4 <_free_r>:
    4ac4:	2900      	cmp	r1, #0
    4ac6:	d061      	beq.n	4b8c <_free_r+0xc8>
    4ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4aca:	460c      	mov	r4, r1
    4acc:	4606      	mov	r6, r0
    4ace:	f7ff f95b 	bl	3d88 <__malloc_lock>
    4ad2:	f854 2c04 	ldr.w	r2, [r4, #-4]
    4ad6:	4f7b      	ldr	r7, [pc, #492]	; (4cc4 <_free_r+0x200>)
    4ad8:	f1a4 0508 	sub.w	r5, r4, #8
    4adc:	f022 0101 	bic.w	r1, r2, #1
    4ae0:	eb05 0c01 	add.w	ip, r5, r1
    4ae4:	68b8      	ldr	r0, [r7, #8]
    4ae6:	f8dc 3004 	ldr.w	r3, [ip, #4]
    4aea:	4560      	cmp	r0, ip
    4aec:	f023 0303 	bic.w	r3, r3, #3
    4af0:	f000 808b 	beq.w	4c0a <_free_r+0x146>
    4af4:	07d2      	lsls	r2, r2, #31
    4af6:	f8cc 3004 	str.w	r3, [ip, #4]
    4afa:	d432      	bmi.n	4b62 <_free_r+0x9e>
    4afc:	f854 2c08 	ldr.w	r2, [r4, #-8]
    4b00:	1aad      	subs	r5, r5, r2
    4b02:	4411      	add	r1, r2
    4b04:	68aa      	ldr	r2, [r5, #8]
    4b06:	f107 0008 	add.w	r0, r7, #8
    4b0a:	4282      	cmp	r2, r0
    4b0c:	d06a      	beq.n	4be4 <_free_r+0x120>
    4b0e:	eb0c 0403 	add.w	r4, ip, r3
    4b12:	f8d4 e004 	ldr.w	lr, [r4, #4]
    4b16:	68ec      	ldr	r4, [r5, #12]
    4b18:	60d4      	str	r4, [r2, #12]
    4b1a:	f01e 0f01 	tst.w	lr, #1
    4b1e:	60a2      	str	r2, [r4, #8]
    4b20:	f000 8097 	beq.w	4c52 <_free_r+0x18e>
    4b24:	f041 0301 	orr.w	r3, r1, #1
    4b28:	606b      	str	r3, [r5, #4]
    4b2a:	f8cc 1000 	str.w	r1, [ip]
    4b2e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    4b32:	d235      	bcs.n	4ba0 <_free_r+0xdc>
    4b34:	6878      	ldr	r0, [r7, #4]
    4b36:	08cb      	lsrs	r3, r1, #3
    4b38:	2201      	movs	r2, #1
    4b3a:	0949      	lsrs	r1, r1, #5
    4b3c:	3301      	adds	r3, #1
    4b3e:	408a      	lsls	r2, r1
    4b40:	4302      	orrs	r2, r0
    4b42:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    4b46:	607a      	str	r2, [r7, #4]
    4b48:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    4b4c:	3a08      	subs	r2, #8
    4b4e:	e9c5 1202 	strd	r1, r2, [r5, #8]
    4b52:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    4b56:	60cd      	str	r5, [r1, #12]
    4b58:	4630      	mov	r0, r6
    4b5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4b5e:	f7ff b919 	b.w	3d94 <__malloc_unlock>
    4b62:	eb0c 0203 	add.w	r2, ip, r3
    4b66:	6852      	ldr	r2, [r2, #4]
    4b68:	07d0      	lsls	r0, r2, #31
    4b6a:	d410      	bmi.n	4b8e <_free_r+0xca>
    4b6c:	4419      	add	r1, r3
    4b6e:	f107 0008 	add.w	r0, r7, #8
    4b72:	f8dc 3008 	ldr.w	r3, [ip, #8]
    4b76:	4283      	cmp	r3, r0
    4b78:	d073      	beq.n	4c62 <_free_r+0x19e>
    4b7a:	f8dc 200c 	ldr.w	r2, [ip, #12]
    4b7e:	60da      	str	r2, [r3, #12]
    4b80:	6093      	str	r3, [r2, #8]
    4b82:	f041 0301 	orr.w	r3, r1, #1
    4b86:	606b      	str	r3, [r5, #4]
    4b88:	5069      	str	r1, [r5, r1]
    4b8a:	e7d0      	b.n	4b2e <_free_r+0x6a>
    4b8c:	4770      	bx	lr
    4b8e:	f041 0301 	orr.w	r3, r1, #1
    4b92:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    4b96:	f844 3c04 	str.w	r3, [r4, #-4]
    4b9a:	f8cc 1000 	str.w	r1, [ip]
    4b9e:	d3c9      	bcc.n	4b34 <_free_r+0x70>
    4ba0:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    4ba4:	ea4f 2351 	mov.w	r3, r1, lsr #9
    4ba8:	d248      	bcs.n	4c3c <_free_r+0x178>
    4baa:	098b      	lsrs	r3, r1, #6
    4bac:	f103 0039 	add.w	r0, r3, #57	; 0x39
    4bb0:	f103 0238 	add.w	r2, r3, #56	; 0x38
    4bb4:	00c3      	lsls	r3, r0, #3
    4bb6:	18f8      	adds	r0, r7, r3
    4bb8:	58fb      	ldr	r3, [r7, r3]
    4bba:	3808      	subs	r0, #8
    4bbc:	4298      	cmp	r0, r3
    4bbe:	d059      	beq.n	4c74 <_free_r+0x1b0>
    4bc0:	685a      	ldr	r2, [r3, #4]
    4bc2:	f022 0203 	bic.w	r2, r2, #3
    4bc6:	428a      	cmp	r2, r1
    4bc8:	d902      	bls.n	4bd0 <_free_r+0x10c>
    4bca:	689b      	ldr	r3, [r3, #8]
    4bcc:	4298      	cmp	r0, r3
    4bce:	d1f7      	bne.n	4bc0 <_free_r+0xfc>
    4bd0:	68d8      	ldr	r0, [r3, #12]
    4bd2:	e9c5 3002 	strd	r3, r0, [r5, #8]
    4bd6:	6085      	str	r5, [r0, #8]
    4bd8:	60dd      	str	r5, [r3, #12]
    4bda:	4630      	mov	r0, r6
    4bdc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4be0:	f7ff b8d8 	b.w	3d94 <__malloc_unlock>
    4be4:	eb0c 0203 	add.w	r2, ip, r3
    4be8:	6852      	ldr	r2, [r2, #4]
    4bea:	07d2      	lsls	r2, r2, #31
    4bec:	d463      	bmi.n	4cb6 <_free_r+0x1f2>
    4bee:	440b      	add	r3, r1
    4bf0:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    4bf4:	60ca      	str	r2, [r1, #12]
    4bf6:	6091      	str	r1, [r2, #8]
    4bf8:	f043 0201 	orr.w	r2, r3, #1
    4bfc:	606a      	str	r2, [r5, #4]
    4bfe:	4630      	mov	r0, r6
    4c00:	50eb      	str	r3, [r5, r3]
    4c02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4c06:	f7ff b8c5 	b.w	3d94 <__malloc_unlock>
    4c0a:	440b      	add	r3, r1
    4c0c:	07d1      	lsls	r1, r2, #31
    4c0e:	d407      	bmi.n	4c20 <_free_r+0x15c>
    4c10:	f854 2c08 	ldr.w	r2, [r4, #-8]
    4c14:	1aad      	subs	r5, r5, r2
    4c16:	4413      	add	r3, r2
    4c18:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    4c1c:	60ca      	str	r2, [r1, #12]
    4c1e:	6091      	str	r1, [r2, #8]
    4c20:	f043 0201 	orr.w	r2, r3, #1
    4c24:	606a      	str	r2, [r5, #4]
    4c26:	4a28      	ldr	r2, [pc, #160]	; (4cc8 <_free_r+0x204>)
    4c28:	60bd      	str	r5, [r7, #8]
    4c2a:	6812      	ldr	r2, [r2, #0]
    4c2c:	429a      	cmp	r2, r3
    4c2e:	d893      	bhi.n	4b58 <_free_r+0x94>
    4c30:	4b26      	ldr	r3, [pc, #152]	; (4ccc <_free_r+0x208>)
    4c32:	4630      	mov	r0, r6
    4c34:	6819      	ldr	r1, [r3, #0]
    4c36:	f7ff fef5 	bl	4a24 <_malloc_trim_r>
    4c3a:	e78d      	b.n	4b58 <_free_r+0x94>
    4c3c:	2b14      	cmp	r3, #20
    4c3e:	d90a      	bls.n	4c56 <_free_r+0x192>
    4c40:	2b54      	cmp	r3, #84	; 0x54
    4c42:	d81f      	bhi.n	4c84 <_free_r+0x1c0>
    4c44:	0b0b      	lsrs	r3, r1, #12
    4c46:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    4c4a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    4c4e:	00c3      	lsls	r3, r0, #3
    4c50:	e7b1      	b.n	4bb6 <_free_r+0xf2>
    4c52:	4419      	add	r1, r3
    4c54:	e78d      	b.n	4b72 <_free_r+0xae>
    4c56:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    4c5a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    4c5e:	00c3      	lsls	r3, r0, #3
    4c60:	e7a9      	b.n	4bb6 <_free_r+0xf2>
    4c62:	f041 0301 	orr.w	r3, r1, #1
    4c66:	e9c7 5504 	strd	r5, r5, [r7, #16]
    4c6a:	e9c5 0002 	strd	r0, r0, [r5, #8]
    4c6e:	606b      	str	r3, [r5, #4]
    4c70:	5069      	str	r1, [r5, r1]
    4c72:	e771      	b.n	4b58 <_free_r+0x94>
    4c74:	6879      	ldr	r1, [r7, #4]
    4c76:	1092      	asrs	r2, r2, #2
    4c78:	2401      	movs	r4, #1
    4c7a:	fa04 f202 	lsl.w	r2, r4, r2
    4c7e:	430a      	orrs	r2, r1
    4c80:	607a      	str	r2, [r7, #4]
    4c82:	e7a6      	b.n	4bd2 <_free_r+0x10e>
    4c84:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    4c88:	d806      	bhi.n	4c98 <_free_r+0x1d4>
    4c8a:	0bcb      	lsrs	r3, r1, #15
    4c8c:	f103 0078 	add.w	r0, r3, #120	; 0x78
    4c90:	f103 0277 	add.w	r2, r3, #119	; 0x77
    4c94:	00c3      	lsls	r3, r0, #3
    4c96:	e78e      	b.n	4bb6 <_free_r+0xf2>
    4c98:	f240 5254 	movw	r2, #1364	; 0x554
    4c9c:	4293      	cmp	r3, r2
    4c9e:	d806      	bhi.n	4cae <_free_r+0x1ea>
    4ca0:	0c8b      	lsrs	r3, r1, #18
    4ca2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    4ca6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    4caa:	00c3      	lsls	r3, r0, #3
    4cac:	e783      	b.n	4bb6 <_free_r+0xf2>
    4cae:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    4cb2:	227e      	movs	r2, #126	; 0x7e
    4cb4:	e77f      	b.n	4bb6 <_free_r+0xf2>
    4cb6:	f041 0301 	orr.w	r3, r1, #1
    4cba:	606b      	str	r3, [r5, #4]
    4cbc:	f8cc 1000 	str.w	r1, [ip]
    4cc0:	e74a      	b.n	4b58 <_free_r+0x94>
    4cc2:	bf00      	nop
    4cc4:	200012b0 	.word	0x200012b0
    4cc8:	200016bc 	.word	0x200016bc
    4ccc:	2000245c 	.word	0x2000245c

00004cd0 <__ascii_mbtowc>:
    4cd0:	b082      	sub	sp, #8
    4cd2:	b149      	cbz	r1, 4ce8 <__ascii_mbtowc+0x18>
    4cd4:	b15a      	cbz	r2, 4cee <__ascii_mbtowc+0x1e>
    4cd6:	b16b      	cbz	r3, 4cf4 <__ascii_mbtowc+0x24>
    4cd8:	7813      	ldrb	r3, [r2, #0]
    4cda:	600b      	str	r3, [r1, #0]
    4cdc:	7812      	ldrb	r2, [r2, #0]
    4cde:	1e10      	subs	r0, r2, #0
    4ce0:	bf18      	it	ne
    4ce2:	2001      	movne	r0, #1
    4ce4:	b002      	add	sp, #8
    4ce6:	4770      	bx	lr
    4ce8:	a901      	add	r1, sp, #4
    4cea:	2a00      	cmp	r2, #0
    4cec:	d1f3      	bne.n	4cd6 <__ascii_mbtowc+0x6>
    4cee:	4610      	mov	r0, r2
    4cf0:	b002      	add	sp, #8
    4cf2:	4770      	bx	lr
    4cf4:	f06f 0001 	mvn.w	r0, #1
    4cf8:	e7f4      	b.n	4ce4 <__ascii_mbtowc+0x14>
    4cfa:	bf00      	nop

00004cfc <_Balloc>:
    4cfc:	6c43      	ldr	r3, [r0, #68]	; 0x44
    4cfe:	b570      	push	{r4, r5, r6, lr}
    4d00:	4605      	mov	r5, r0
    4d02:	460c      	mov	r4, r1
    4d04:	b14b      	cbz	r3, 4d1a <_Balloc+0x1e>
    4d06:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    4d0a:	b180      	cbz	r0, 4d2e <_Balloc+0x32>
    4d0c:	6802      	ldr	r2, [r0, #0]
    4d0e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    4d12:	2300      	movs	r3, #0
    4d14:	e9c0 3303 	strd	r3, r3, [r0, #12]
    4d18:	bd70      	pop	{r4, r5, r6, pc}
    4d1a:	2221      	movs	r2, #33	; 0x21
    4d1c:	2104      	movs	r1, #4
    4d1e:	f002 fb33 	bl	7388 <_calloc_r>
    4d22:	4603      	mov	r3, r0
    4d24:	6468      	str	r0, [r5, #68]	; 0x44
    4d26:	2800      	cmp	r0, #0
    4d28:	d1ed      	bne.n	4d06 <_Balloc+0xa>
    4d2a:	2000      	movs	r0, #0
    4d2c:	bd70      	pop	{r4, r5, r6, pc}
    4d2e:	2101      	movs	r1, #1
    4d30:	fa01 f604 	lsl.w	r6, r1, r4
    4d34:	1d72      	adds	r2, r6, #5
    4d36:	0092      	lsls	r2, r2, #2
    4d38:	4628      	mov	r0, r5
    4d3a:	f002 fb25 	bl	7388 <_calloc_r>
    4d3e:	2800      	cmp	r0, #0
    4d40:	d0f3      	beq.n	4d2a <_Balloc+0x2e>
    4d42:	e9c0 4601 	strd	r4, r6, [r0, #4]
    4d46:	e7e4      	b.n	4d12 <_Balloc+0x16>

00004d48 <_Bfree>:
    4d48:	b131      	cbz	r1, 4d58 <_Bfree+0x10>
    4d4a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    4d4c:	684a      	ldr	r2, [r1, #4]
    4d4e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    4d52:	6008      	str	r0, [r1, #0]
    4d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    4d58:	4770      	bx	lr
    4d5a:	bf00      	nop

00004d5c <__multadd>:
    4d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d60:	690e      	ldr	r6, [r1, #16]
    4d62:	4680      	mov	r8, r0
    4d64:	460f      	mov	r7, r1
    4d66:	461d      	mov	r5, r3
    4d68:	f101 0e14 	add.w	lr, r1, #20
    4d6c:	2000      	movs	r0, #0
    4d6e:	f8de 1000 	ldr.w	r1, [lr]
    4d72:	b28c      	uxth	r4, r1
    4d74:	fb02 5304 	mla	r3, r2, r4, r5
    4d78:	0c09      	lsrs	r1, r1, #16
    4d7a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    4d7e:	fb02 cc01 	mla	ip, r2, r1, ip
    4d82:	3001      	adds	r0, #1
    4d84:	b29c      	uxth	r4, r3
    4d86:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    4d8a:	4286      	cmp	r6, r0
    4d8c:	f84e 4b04 	str.w	r4, [lr], #4
    4d90:	ea4f 451c 	mov.w	r5, ip, lsr #16
    4d94:	dceb      	bgt.n	4d6e <__multadd+0x12>
    4d96:	b13d      	cbz	r5, 4da8 <__multadd+0x4c>
    4d98:	68bb      	ldr	r3, [r7, #8]
    4d9a:	42b3      	cmp	r3, r6
    4d9c:	dd07      	ble.n	4dae <__multadd+0x52>
    4d9e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    4da2:	3601      	adds	r6, #1
    4da4:	615d      	str	r5, [r3, #20]
    4da6:	613e      	str	r6, [r7, #16]
    4da8:	4638      	mov	r0, r7
    4daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4dae:	6879      	ldr	r1, [r7, #4]
    4db0:	4640      	mov	r0, r8
    4db2:	3101      	adds	r1, #1
    4db4:	f7ff ffa2 	bl	4cfc <_Balloc>
    4db8:	4604      	mov	r4, r0
    4dba:	b1b0      	cbz	r0, 4dea <__multadd+0x8e>
    4dbc:	693a      	ldr	r2, [r7, #16]
    4dbe:	3202      	adds	r2, #2
    4dc0:	f107 010c 	add.w	r1, r7, #12
    4dc4:	0092      	lsls	r2, r2, #2
    4dc6:	300c      	adds	r0, #12
    4dc8:	f7fd f890 	bl	1eec <memcpy>
    4dcc:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    4dd0:	687a      	ldr	r2, [r7, #4]
    4dd2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    4dd6:	6039      	str	r1, [r7, #0]
    4dd8:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    4ddc:	4627      	mov	r7, r4
    4dde:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    4de2:	3601      	adds	r6, #1
    4de4:	615d      	str	r5, [r3, #20]
    4de6:	613e      	str	r6, [r7, #16]
    4de8:	e7de      	b.n	4da8 <__multadd+0x4c>
    4dea:	4b03      	ldr	r3, [pc, #12]	; (4df8 <__multadd+0x9c>)
    4dec:	4803      	ldr	r0, [pc, #12]	; (4dfc <__multadd+0xa0>)
    4dee:	4622      	mov	r2, r4
    4df0:	21ba      	movs	r1, #186	; 0xba
    4df2:	f002 faa9 	bl	7348 <__assert_func>
    4df6:	bf00      	nop
    4df8:	200005cc 	.word	0x200005cc
    4dfc:	200005e0 	.word	0x200005e0

00004e00 <__hi0bits>:
    4e00:	0c03      	lsrs	r3, r0, #16
    4e02:	041b      	lsls	r3, r3, #16
    4e04:	b9d3      	cbnz	r3, 4e3c <__hi0bits+0x3c>
    4e06:	0400      	lsls	r0, r0, #16
    4e08:	2310      	movs	r3, #16
    4e0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    4e0e:	bf04      	itt	eq
    4e10:	0200      	lsleq	r0, r0, #8
    4e12:	3308      	addeq	r3, #8
    4e14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    4e18:	bf04      	itt	eq
    4e1a:	0100      	lsleq	r0, r0, #4
    4e1c:	3304      	addeq	r3, #4
    4e1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    4e22:	bf04      	itt	eq
    4e24:	0080      	lsleq	r0, r0, #2
    4e26:	3302      	addeq	r3, #2
    4e28:	2800      	cmp	r0, #0
    4e2a:	db05      	blt.n	4e38 <__hi0bits+0x38>
    4e2c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    4e30:	f103 0301 	add.w	r3, r3, #1
    4e34:	bf08      	it	eq
    4e36:	2320      	moveq	r3, #32
    4e38:	4618      	mov	r0, r3
    4e3a:	4770      	bx	lr
    4e3c:	2300      	movs	r3, #0
    4e3e:	e7e4      	b.n	4e0a <__hi0bits+0xa>

00004e40 <__lo0bits>:
    4e40:	6803      	ldr	r3, [r0, #0]
    4e42:	f013 0207 	ands.w	r2, r3, #7
    4e46:	d008      	beq.n	4e5a <__lo0bits+0x1a>
    4e48:	07d9      	lsls	r1, r3, #31
    4e4a:	d41f      	bmi.n	4e8c <__lo0bits+0x4c>
    4e4c:	079a      	lsls	r2, r3, #30
    4e4e:	d522      	bpl.n	4e96 <__lo0bits+0x56>
    4e50:	085b      	lsrs	r3, r3, #1
    4e52:	6003      	str	r3, [r0, #0]
    4e54:	2201      	movs	r2, #1
    4e56:	4610      	mov	r0, r2
    4e58:	4770      	bx	lr
    4e5a:	b299      	uxth	r1, r3
    4e5c:	b909      	cbnz	r1, 4e62 <__lo0bits+0x22>
    4e5e:	0c1b      	lsrs	r3, r3, #16
    4e60:	2210      	movs	r2, #16
    4e62:	b2d9      	uxtb	r1, r3
    4e64:	b909      	cbnz	r1, 4e6a <__lo0bits+0x2a>
    4e66:	3208      	adds	r2, #8
    4e68:	0a1b      	lsrs	r3, r3, #8
    4e6a:	0719      	lsls	r1, r3, #28
    4e6c:	bf04      	itt	eq
    4e6e:	091b      	lsreq	r3, r3, #4
    4e70:	3204      	addeq	r2, #4
    4e72:	0799      	lsls	r1, r3, #30
    4e74:	bf04      	itt	eq
    4e76:	089b      	lsreq	r3, r3, #2
    4e78:	3202      	addeq	r2, #2
    4e7a:	07d9      	lsls	r1, r3, #31
    4e7c:	d403      	bmi.n	4e86 <__lo0bits+0x46>
    4e7e:	085b      	lsrs	r3, r3, #1
    4e80:	f102 0201 	add.w	r2, r2, #1
    4e84:	d005      	beq.n	4e92 <__lo0bits+0x52>
    4e86:	6003      	str	r3, [r0, #0]
    4e88:	4610      	mov	r0, r2
    4e8a:	4770      	bx	lr
    4e8c:	2200      	movs	r2, #0
    4e8e:	4610      	mov	r0, r2
    4e90:	4770      	bx	lr
    4e92:	2220      	movs	r2, #32
    4e94:	e7df      	b.n	4e56 <__lo0bits+0x16>
    4e96:	089b      	lsrs	r3, r3, #2
    4e98:	2202      	movs	r2, #2
    4e9a:	6003      	str	r3, [r0, #0]
    4e9c:	4610      	mov	r0, r2
    4e9e:	4770      	bx	lr

00004ea0 <__i2b>:
    4ea0:	b538      	push	{r3, r4, r5, lr}
    4ea2:	6c43      	ldr	r3, [r0, #68]	; 0x44
    4ea4:	4604      	mov	r4, r0
    4ea6:	460d      	mov	r5, r1
    4ea8:	b14b      	cbz	r3, 4ebe <__i2b+0x1e>
    4eaa:	6858      	ldr	r0, [r3, #4]
    4eac:	b1b0      	cbz	r0, 4edc <__i2b+0x3c>
    4eae:	6802      	ldr	r2, [r0, #0]
    4eb0:	605a      	str	r2, [r3, #4]
    4eb2:	2200      	movs	r2, #0
    4eb4:	2301      	movs	r3, #1
    4eb6:	e9c0 3504 	strd	r3, r5, [r0, #16]
    4eba:	60c2      	str	r2, [r0, #12]
    4ebc:	bd38      	pop	{r3, r4, r5, pc}
    4ebe:	2221      	movs	r2, #33	; 0x21
    4ec0:	2104      	movs	r1, #4
    4ec2:	f002 fa61 	bl	7388 <_calloc_r>
    4ec6:	4603      	mov	r3, r0
    4ec8:	6460      	str	r0, [r4, #68]	; 0x44
    4eca:	2800      	cmp	r0, #0
    4ecc:	d1ed      	bne.n	4eaa <__i2b+0xa>
    4ece:	4b09      	ldr	r3, [pc, #36]	; (4ef4 <__i2b+0x54>)
    4ed0:	4809      	ldr	r0, [pc, #36]	; (4ef8 <__i2b+0x58>)
    4ed2:	2200      	movs	r2, #0
    4ed4:	f240 1145 	movw	r1, #325	; 0x145
    4ed8:	f002 fa36 	bl	7348 <__assert_func>
    4edc:	221c      	movs	r2, #28
    4ede:	2101      	movs	r1, #1
    4ee0:	4620      	mov	r0, r4
    4ee2:	f002 fa51 	bl	7388 <_calloc_r>
    4ee6:	2800      	cmp	r0, #0
    4ee8:	d0f1      	beq.n	4ece <__i2b+0x2e>
    4eea:	2201      	movs	r2, #1
    4eec:	2302      	movs	r3, #2
    4eee:	e9c0 2301 	strd	r2, r3, [r0, #4]
    4ef2:	e7de      	b.n	4eb2 <__i2b+0x12>
    4ef4:	200005cc 	.word	0x200005cc
    4ef8:	200005e0 	.word	0x200005e0

00004efc <__multiply>:
    4efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f00:	690e      	ldr	r6, [r1, #16]
    4f02:	6915      	ldr	r5, [r2, #16]
    4f04:	42ae      	cmp	r6, r5
    4f06:	b085      	sub	sp, #20
    4f08:	4688      	mov	r8, r1
    4f0a:	4614      	mov	r4, r2
    4f0c:	db05      	blt.n	4f1a <__multiply+0x1e>
    4f0e:	462a      	mov	r2, r5
    4f10:	4623      	mov	r3, r4
    4f12:	4635      	mov	r5, r6
    4f14:	460c      	mov	r4, r1
    4f16:	4616      	mov	r6, r2
    4f18:	4698      	mov	r8, r3
    4f1a:	68a3      	ldr	r3, [r4, #8]
    4f1c:	6861      	ldr	r1, [r4, #4]
    4f1e:	19af      	adds	r7, r5, r6
    4f20:	42bb      	cmp	r3, r7
    4f22:	bfb8      	it	lt
    4f24:	3101      	addlt	r1, #1
    4f26:	f7ff fee9 	bl	4cfc <_Balloc>
    4f2a:	9001      	str	r0, [sp, #4]
    4f2c:	2800      	cmp	r0, #0
    4f2e:	f000 8087 	beq.w	5040 <__multiply+0x144>
    4f32:	9b01      	ldr	r3, [sp, #4]
    4f34:	f103 0914 	add.w	r9, r3, #20
    4f38:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    4f3c:	45d1      	cmp	r9, sl
    4f3e:	d205      	bcs.n	4f4c <__multiply+0x50>
    4f40:	464b      	mov	r3, r9
    4f42:	2200      	movs	r2, #0
    4f44:	f843 2b04 	str.w	r2, [r3], #4
    4f48:	459a      	cmp	sl, r3
    4f4a:	d8fb      	bhi.n	4f44 <__multiply+0x48>
    4f4c:	f108 0814 	add.w	r8, r8, #20
    4f50:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    4f54:	f104 0314 	add.w	r3, r4, #20
    4f58:	45d8      	cmp	r8, fp
    4f5a:	461a      	mov	r2, r3
    4f5c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    4f60:	d25f      	bcs.n	5022 <__multiply+0x126>
    4f62:	1b2b      	subs	r3, r5, r4
    4f64:	3b15      	subs	r3, #21
    4f66:	f023 0303 	bic.w	r3, r3, #3
    4f6a:	3304      	adds	r3, #4
    4f6c:	3415      	adds	r4, #21
    4f6e:	42a5      	cmp	r5, r4
    4f70:	bf38      	it	cc
    4f72:	2304      	movcc	r3, #4
    4f74:	e9cd a702 	strd	sl, r7, [sp, #8]
    4f78:	46ac      	mov	ip, r5
    4f7a:	461f      	mov	r7, r3
    4f7c:	4692      	mov	sl, r2
    4f7e:	e005      	b.n	4f8c <__multiply+0x90>
    4f80:	0c09      	lsrs	r1, r1, #16
    4f82:	d129      	bne.n	4fd8 <__multiply+0xdc>
    4f84:	45c3      	cmp	fp, r8
    4f86:	f109 0904 	add.w	r9, r9, #4
    4f8a:	d948      	bls.n	501e <__multiply+0x122>
    4f8c:	f858 1b04 	ldr.w	r1, [r8], #4
    4f90:	b28d      	uxth	r5, r1
    4f92:	2d00      	cmp	r5, #0
    4f94:	d0f4      	beq.n	4f80 <__multiply+0x84>
    4f96:	4656      	mov	r6, sl
    4f98:	464c      	mov	r4, r9
    4f9a:	2300      	movs	r3, #0
    4f9c:	f856 1b04 	ldr.w	r1, [r6], #4
    4fa0:	6822      	ldr	r2, [r4, #0]
    4fa2:	fa1f fe81 	uxth.w	lr, r1
    4fa6:	b290      	uxth	r0, r2
    4fa8:	0c09      	lsrs	r1, r1, #16
    4faa:	fb05 000e 	mla	r0, r5, lr, r0
    4fae:	0c12      	lsrs	r2, r2, #16
    4fb0:	4403      	add	r3, r0
    4fb2:	fb05 2201 	mla	r2, r5, r1, r2
    4fb6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    4fba:	b29b      	uxth	r3, r3
    4fbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    4fc0:	45b4      	cmp	ip, r6
    4fc2:	f844 3b04 	str.w	r3, [r4], #4
    4fc6:	ea4f 4312 	mov.w	r3, r2, lsr #16
    4fca:	d8e7      	bhi.n	4f9c <__multiply+0xa0>
    4fcc:	f849 3007 	str.w	r3, [r9, r7]
    4fd0:	f858 1c04 	ldr.w	r1, [r8, #-4]
    4fd4:	0c09      	lsrs	r1, r1, #16
    4fd6:	d0d5      	beq.n	4f84 <__multiply+0x88>
    4fd8:	f8d9 3000 	ldr.w	r3, [r9]
    4fdc:	4650      	mov	r0, sl
    4fde:	461a      	mov	r2, r3
    4fe0:	464c      	mov	r4, r9
    4fe2:	2600      	movs	r6, #0
    4fe4:	8805      	ldrh	r5, [r0, #0]
    4fe6:	0c12      	lsrs	r2, r2, #16
    4fe8:	fb01 2205 	mla	r2, r1, r5, r2
    4fec:	4416      	add	r6, r2
    4fee:	b29b      	uxth	r3, r3
    4ff0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    4ff4:	f844 3b04 	str.w	r3, [r4], #4
    4ff8:	f850 5b04 	ldr.w	r5, [r0], #4
    4ffc:	6822      	ldr	r2, [r4, #0]
    4ffe:	0c2d      	lsrs	r5, r5, #16
    5000:	b293      	uxth	r3, r2
    5002:	fb01 3305 	mla	r3, r1, r5, r3
    5006:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    500a:	4584      	cmp	ip, r0
    500c:	ea4f 4613 	mov.w	r6, r3, lsr #16
    5010:	d8e8      	bhi.n	4fe4 <__multiply+0xe8>
    5012:	45c3      	cmp	fp, r8
    5014:	f849 3007 	str.w	r3, [r9, r7]
    5018:	f109 0904 	add.w	r9, r9, #4
    501c:	d8b6      	bhi.n	4f8c <__multiply+0x90>
    501e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    5022:	2f00      	cmp	r7, #0
    5024:	dc02      	bgt.n	502c <__multiply+0x130>
    5026:	e005      	b.n	5034 <__multiply+0x138>
    5028:	3f01      	subs	r7, #1
    502a:	d003      	beq.n	5034 <__multiply+0x138>
    502c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    5030:	2b00      	cmp	r3, #0
    5032:	d0f9      	beq.n	5028 <__multiply+0x12c>
    5034:	9b01      	ldr	r3, [sp, #4]
    5036:	4618      	mov	r0, r3
    5038:	611f      	str	r7, [r3, #16]
    503a:	b005      	add	sp, #20
    503c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5040:	4b03      	ldr	r3, [pc, #12]	; (5050 <__multiply+0x154>)
    5042:	4804      	ldr	r0, [pc, #16]	; (5054 <__multiply+0x158>)
    5044:	9a01      	ldr	r2, [sp, #4]
    5046:	f44f 71b1 	mov.w	r1, #354	; 0x162
    504a:	f002 f97d 	bl	7348 <__assert_func>
    504e:	bf00      	nop
    5050:	200005cc 	.word	0x200005cc
    5054:	200005e0 	.word	0x200005e0

00005058 <__pow5mult>:
    5058:	f012 0303 	ands.w	r3, r2, #3
    505c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5060:	4614      	mov	r4, r2
    5062:	4606      	mov	r6, r0
    5064:	d132      	bne.n	50cc <__pow5mult+0x74>
    5066:	460d      	mov	r5, r1
    5068:	10a4      	asrs	r4, r4, #2
    506a:	d020      	beq.n	50ae <__pow5mult+0x56>
    506c:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    5070:	f1b8 0f00 	cmp.w	r8, #0
    5074:	d033      	beq.n	50de <__pow5mult+0x86>
    5076:	07e3      	lsls	r3, r4, #31
    5078:	f04f 0700 	mov.w	r7, #0
    507c:	d407      	bmi.n	508e <__pow5mult+0x36>
    507e:	1064      	asrs	r4, r4, #1
    5080:	d015      	beq.n	50ae <__pow5mult+0x56>
    5082:	f8d8 0000 	ldr.w	r0, [r8]
    5086:	b1a8      	cbz	r0, 50b4 <__pow5mult+0x5c>
    5088:	4680      	mov	r8, r0
    508a:	07e3      	lsls	r3, r4, #31
    508c:	d5f7      	bpl.n	507e <__pow5mult+0x26>
    508e:	4642      	mov	r2, r8
    5090:	4629      	mov	r1, r5
    5092:	4630      	mov	r0, r6
    5094:	f7ff ff32 	bl	4efc <__multiply>
    5098:	b1b5      	cbz	r5, 50c8 <__pow5mult+0x70>
    509a:	6869      	ldr	r1, [r5, #4]
    509c:	6c73      	ldr	r3, [r6, #68]	; 0x44
    509e:	1064      	asrs	r4, r4, #1
    50a0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    50a4:	602a      	str	r2, [r5, #0]
    50a6:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    50aa:	4605      	mov	r5, r0
    50ac:	d1e9      	bne.n	5082 <__pow5mult+0x2a>
    50ae:	4628      	mov	r0, r5
    50b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    50b4:	4642      	mov	r2, r8
    50b6:	4641      	mov	r1, r8
    50b8:	4630      	mov	r0, r6
    50ba:	f7ff ff1f 	bl	4efc <__multiply>
    50be:	f8c8 0000 	str.w	r0, [r8]
    50c2:	6007      	str	r7, [r0, #0]
    50c4:	4680      	mov	r8, r0
    50c6:	e7e0      	b.n	508a <__pow5mult+0x32>
    50c8:	4605      	mov	r5, r0
    50ca:	e7d8      	b.n	507e <__pow5mult+0x26>
    50cc:	3b01      	subs	r3, #1
    50ce:	4a0f      	ldr	r2, [pc, #60]	; (510c <__pow5mult+0xb4>)
    50d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    50d4:	2300      	movs	r3, #0
    50d6:	f7ff fe41 	bl	4d5c <__multadd>
    50da:	4605      	mov	r5, r0
    50dc:	e7c4      	b.n	5068 <__pow5mult+0x10>
    50de:	2101      	movs	r1, #1
    50e0:	4630      	mov	r0, r6
    50e2:	f7ff fe0b 	bl	4cfc <_Balloc>
    50e6:	4680      	mov	r8, r0
    50e8:	b140      	cbz	r0, 50fc <__pow5mult+0xa4>
    50ea:	2301      	movs	r3, #1
    50ec:	f240 2271 	movw	r2, #625	; 0x271
    50f0:	e9c0 3204 	strd	r3, r2, [r0, #16]
    50f4:	2300      	movs	r3, #0
    50f6:	6430      	str	r0, [r6, #64]	; 0x40
    50f8:	6003      	str	r3, [r0, #0]
    50fa:	e7bc      	b.n	5076 <__pow5mult+0x1e>
    50fc:	4b04      	ldr	r3, [pc, #16]	; (5110 <__pow5mult+0xb8>)
    50fe:	4805      	ldr	r0, [pc, #20]	; (5114 <__pow5mult+0xbc>)
    5100:	4642      	mov	r2, r8
    5102:	f240 1145 	movw	r1, #325	; 0x145
    5106:	f002 f91f 	bl	7348 <__assert_func>
    510a:	bf00      	nop
    510c:	20000bf4 	.word	0x20000bf4
    5110:	200005cc 	.word	0x200005cc
    5114:	200005e0 	.word	0x200005e0

00005118 <__lshift>:
    5118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    511c:	460d      	mov	r5, r1
    511e:	4614      	mov	r4, r2
    5120:	692f      	ldr	r7, [r5, #16]
    5122:	68ab      	ldr	r3, [r5, #8]
    5124:	6849      	ldr	r1, [r1, #4]
    5126:	eb07 1762 	add.w	r7, r7, r2, asr #5
    512a:	1c7e      	adds	r6, r7, #1
    512c:	429e      	cmp	r6, r3
    512e:	4680      	mov	r8, r0
    5130:	ea4f 1962 	mov.w	r9, r2, asr #5
    5134:	dd04      	ble.n	5140 <__lshift+0x28>
    5136:	005b      	lsls	r3, r3, #1
    5138:	429e      	cmp	r6, r3
    513a:	f101 0101 	add.w	r1, r1, #1
    513e:	dcfa      	bgt.n	5136 <__lshift+0x1e>
    5140:	4640      	mov	r0, r8
    5142:	f7ff fddb 	bl	4cfc <_Balloc>
    5146:	4684      	mov	ip, r0
    5148:	2800      	cmp	r0, #0
    514a:	d052      	beq.n	51f2 <__lshift+0xda>
    514c:	f1b9 0f00 	cmp.w	r9, #0
    5150:	f100 0214 	add.w	r2, r0, #20
    5154:	dd0e      	ble.n	5174 <__lshift+0x5c>
    5156:	f109 0105 	add.w	r1, r9, #5
    515a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    515e:	4613      	mov	r3, r2
    5160:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    5164:	2000      	movs	r0, #0
    5166:	f843 0b04 	str.w	r0, [r3], #4
    516a:	428b      	cmp	r3, r1
    516c:	d1fb      	bne.n	5166 <__lshift+0x4e>
    516e:	f1ae 0314 	sub.w	r3, lr, #20
    5172:	441a      	add	r2, r3
    5174:	6929      	ldr	r1, [r5, #16]
    5176:	f105 0314 	add.w	r3, r5, #20
    517a:	f014 0e1f 	ands.w	lr, r4, #31
    517e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    5182:	d02e      	beq.n	51e2 <__lshift+0xca>
    5184:	f1ce 0920 	rsb	r9, lr, #32
    5188:	4610      	mov	r0, r2
    518a:	f04f 0a00 	mov.w	sl, #0
    518e:	681c      	ldr	r4, [r3, #0]
    5190:	fa04 f40e 	lsl.w	r4, r4, lr
    5194:	ea44 040a 	orr.w	r4, r4, sl
    5198:	f840 4b04 	str.w	r4, [r0], #4
    519c:	f853 4b04 	ldr.w	r4, [r3], #4
    51a0:	4299      	cmp	r1, r3
    51a2:	fa24 fa09 	lsr.w	sl, r4, r9
    51a6:	d8f2      	bhi.n	518e <__lshift+0x76>
    51a8:	1b4b      	subs	r3, r1, r5
    51aa:	3b15      	subs	r3, #21
    51ac:	f023 0303 	bic.w	r3, r3, #3
    51b0:	3304      	adds	r3, #4
    51b2:	f105 0015 	add.w	r0, r5, #21
    51b6:	4281      	cmp	r1, r0
    51b8:	bf38      	it	cc
    51ba:	2304      	movcc	r3, #4
    51bc:	f1ba 0f00 	cmp.w	sl, #0
    51c0:	bf18      	it	ne
    51c2:	4637      	movne	r7, r6
    51c4:	f842 a003 	str.w	sl, [r2, r3]
    51c8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    51cc:	686a      	ldr	r2, [r5, #4]
    51ce:	f8cc 7010 	str.w	r7, [ip, #16]
    51d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    51d6:	6029      	str	r1, [r5, #0]
    51d8:	4660      	mov	r0, ip
    51da:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    51de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    51e2:	3a04      	subs	r2, #4
    51e4:	f853 0b04 	ldr.w	r0, [r3], #4
    51e8:	f842 0f04 	str.w	r0, [r2, #4]!
    51ec:	4299      	cmp	r1, r3
    51ee:	d8f9      	bhi.n	51e4 <__lshift+0xcc>
    51f0:	e7ea      	b.n	51c8 <__lshift+0xb0>
    51f2:	4b03      	ldr	r3, [pc, #12]	; (5200 <__lshift+0xe8>)
    51f4:	4803      	ldr	r0, [pc, #12]	; (5204 <__lshift+0xec>)
    51f6:	4662      	mov	r2, ip
    51f8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    51fc:	f002 f8a4 	bl	7348 <__assert_func>
    5200:	200005cc 	.word	0x200005cc
    5204:	200005e0 	.word	0x200005e0

00005208 <__mcmp>:
    5208:	690b      	ldr	r3, [r1, #16]
    520a:	4684      	mov	ip, r0
    520c:	6900      	ldr	r0, [r0, #16]
    520e:	1ac0      	subs	r0, r0, r3
    5210:	d116      	bne.n	5240 <__mcmp+0x38>
    5212:	f10c 0c14 	add.w	ip, ip, #20
    5216:	3114      	adds	r1, #20
    5218:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    521c:	b410      	push	{r4}
    521e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    5222:	e001      	b.n	5228 <__mcmp+0x20>
    5224:	4594      	cmp	ip, r2
    5226:	d208      	bcs.n	523a <__mcmp+0x32>
    5228:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    522c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    5230:	428c      	cmp	r4, r1
    5232:	d0f7      	beq.n	5224 <__mcmp+0x1c>
    5234:	d205      	bcs.n	5242 <__mcmp+0x3a>
    5236:	f04f 30ff 	mov.w	r0, #4294967295
    523a:	f85d 4b04 	ldr.w	r4, [sp], #4
    523e:	4770      	bx	lr
    5240:	4770      	bx	lr
    5242:	2001      	movs	r0, #1
    5244:	f85d 4b04 	ldr.w	r4, [sp], #4
    5248:	4770      	bx	lr
    524a:	bf00      	nop

0000524c <__mdiff>:
    524c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5250:	690f      	ldr	r7, [r1, #16]
    5252:	6913      	ldr	r3, [r2, #16]
    5254:	1aff      	subs	r7, r7, r3
    5256:	2f00      	cmp	r7, #0
    5258:	460e      	mov	r6, r1
    525a:	4690      	mov	r8, r2
    525c:	d17f      	bne.n	535e <__mdiff+0x112>
    525e:	f101 0514 	add.w	r5, r1, #20
    5262:	3214      	adds	r2, #20
    5264:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    5268:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    526c:	e001      	b.n	5272 <__mdiff+0x26>
    526e:	429d      	cmp	r5, r3
    5270:	d278      	bcs.n	5364 <__mdiff+0x118>
    5272:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    5276:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    527a:	42a1      	cmp	r1, r4
    527c:	d0f7      	beq.n	526e <__mdiff+0x22>
    527e:	d369      	bcc.n	5354 <__mdiff+0x108>
    5280:	6871      	ldr	r1, [r6, #4]
    5282:	f7ff fd3b 	bl	4cfc <_Balloc>
    5286:	4681      	mov	r9, r0
    5288:	2800      	cmp	r0, #0
    528a:	d077      	beq.n	537c <__mdiff+0x130>
    528c:	6935      	ldr	r5, [r6, #16]
    528e:	f8d8 2010 	ldr.w	r2, [r8, #16]
    5292:	60c7      	str	r7, [r0, #12]
    5294:	f108 0e14 	add.w	lr, r8, #20
    5298:	f106 0014 	add.w	r0, r6, #20
    529c:	f109 0a14 	add.w	sl, r9, #20
    52a0:	f106 0110 	add.w	r1, r6, #16
    52a4:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    52a8:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    52ac:	4656      	mov	r6, sl
    52ae:	f04f 0c00 	mov.w	ip, #0
    52b2:	f85e 4b04 	ldr.w	r4, [lr], #4
    52b6:	f851 bf04 	ldr.w	fp, [r1, #4]!
    52ba:	b2a3      	uxth	r3, r4
    52bc:	fa1c fc8b 	uxtah	ip, ip, fp
    52c0:	ebac 0303 	sub.w	r3, ip, r3
    52c4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    52c8:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    52cc:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    52d0:	b29b      	uxth	r3, r3
    52d2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    52d6:	4572      	cmp	r2, lr
    52d8:	f846 3b04 	str.w	r3, [r6], #4
    52dc:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    52e0:	d8e7      	bhi.n	52b2 <__mdiff+0x66>
    52e2:	eba2 0108 	sub.w	r1, r2, r8
    52e6:	3915      	subs	r1, #21
    52e8:	f108 0815 	add.w	r8, r8, #21
    52ec:	4542      	cmp	r2, r8
    52ee:	f021 0403 	bic.w	r4, r1, #3
    52f2:	f104 0404 	add.w	r4, r4, #4
    52f6:	bf38      	it	cc
    52f8:	2404      	movcc	r4, #4
    52fa:	4420      	add	r0, r4
    52fc:	f021 0203 	bic.w	r2, r1, #3
    5300:	bf38      	it	cc
    5302:	2200      	movcc	r2, #0
    5304:	4287      	cmp	r7, r0
    5306:	4452      	add	r2, sl
    5308:	4454      	add	r4, sl
    530a:	d918      	bls.n	533e <__mdiff+0xf2>
    530c:	4626      	mov	r6, r4
    530e:	4601      	mov	r1, r0
    5310:	f851 3b04 	ldr.w	r3, [r1], #4
    5314:	fa1c fc83 	uxtah	ip, ip, r3
    5318:	ea4f 422c 	mov.w	r2, ip, asr #16
    531c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    5320:	fa1f fc8c 	uxth.w	ip, ip
    5324:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    5328:	428f      	cmp	r7, r1
    532a:	f846 3b04 	str.w	r3, [r6], #4
    532e:	ea4f 4c22 	mov.w	ip, r2, asr #16
    5332:	d8ed      	bhi.n	5310 <__mdiff+0xc4>
    5334:	3f01      	subs	r7, #1
    5336:	1a3f      	subs	r7, r7, r0
    5338:	f027 0703 	bic.w	r7, r7, #3
    533c:	19e2      	adds	r2, r4, r7
    533e:	b923      	cbnz	r3, 534a <__mdiff+0xfe>
    5340:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    5344:	3d01      	subs	r5, #1
    5346:	2b00      	cmp	r3, #0
    5348:	d0fa      	beq.n	5340 <__mdiff+0xf4>
    534a:	f8c9 5010 	str.w	r5, [r9, #16]
    534e:	4648      	mov	r0, r9
    5350:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5354:	4633      	mov	r3, r6
    5356:	2701      	movs	r7, #1
    5358:	4646      	mov	r6, r8
    535a:	4698      	mov	r8, r3
    535c:	e790      	b.n	5280 <__mdiff+0x34>
    535e:	dbf9      	blt.n	5354 <__mdiff+0x108>
    5360:	2700      	movs	r7, #0
    5362:	e78d      	b.n	5280 <__mdiff+0x34>
    5364:	2100      	movs	r1, #0
    5366:	f7ff fcc9 	bl	4cfc <_Balloc>
    536a:	4681      	mov	r9, r0
    536c:	b168      	cbz	r0, 538a <__mdiff+0x13e>
    536e:	2201      	movs	r2, #1
    5370:	2300      	movs	r3, #0
    5372:	e9c9 2304 	strd	r2, r3, [r9, #16]
    5376:	4648      	mov	r0, r9
    5378:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    537c:	4b06      	ldr	r3, [pc, #24]	; (5398 <__mdiff+0x14c>)
    537e:	4807      	ldr	r0, [pc, #28]	; (539c <__mdiff+0x150>)
    5380:	464a      	mov	r2, r9
    5382:	f240 2145 	movw	r1, #581	; 0x245
    5386:	f001 ffdf 	bl	7348 <__assert_func>
    538a:	4b03      	ldr	r3, [pc, #12]	; (5398 <__mdiff+0x14c>)
    538c:	4803      	ldr	r0, [pc, #12]	; (539c <__mdiff+0x150>)
    538e:	464a      	mov	r2, r9
    5390:	f240 2137 	movw	r1, #567	; 0x237
    5394:	f001 ffd8 	bl	7348 <__assert_func>
    5398:	200005cc 	.word	0x200005cc
    539c:	200005e0 	.word	0x200005e0

000053a0 <__d2b>:
    53a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    53a4:	4688      	mov	r8, r1
    53a6:	b083      	sub	sp, #12
    53a8:	2101      	movs	r1, #1
    53aa:	ec57 6b10 	vmov	r6, r7, d0
    53ae:	4615      	mov	r5, r2
    53b0:	f7ff fca4 	bl	4cfc <_Balloc>
    53b4:	4604      	mov	r4, r0
    53b6:	2800      	cmp	r0, #0
    53b8:	d051      	beq.n	545e <__d2b+0xbe>
    53ba:	f3c7 590a 	ubfx	r9, r7, #20, #11
    53be:	f3c7 0313 	ubfx	r3, r7, #0, #20
    53c2:	f1b9 0f00 	cmp.w	r9, #0
    53c6:	d001      	beq.n	53cc <__d2b+0x2c>
    53c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    53cc:	2e00      	cmp	r6, #0
    53ce:	9301      	str	r3, [sp, #4]
    53d0:	d118      	bne.n	5404 <__d2b+0x64>
    53d2:	a801      	add	r0, sp, #4
    53d4:	f7ff fd34 	bl	4e40 <__lo0bits>
    53d8:	9a01      	ldr	r2, [sp, #4]
    53da:	6162      	str	r2, [r4, #20]
    53dc:	2201      	movs	r2, #1
    53de:	f100 0320 	add.w	r3, r0, #32
    53e2:	6122      	str	r2, [r4, #16]
    53e4:	f1b9 0f00 	cmp.w	r9, #0
    53e8:	d025      	beq.n	5436 <__d2b+0x96>
    53ea:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    53ee:	eb09 0203 	add.w	r2, r9, r3
    53f2:	4620      	mov	r0, r4
    53f4:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    53f8:	f8c8 2000 	str.w	r2, [r8]
    53fc:	602b      	str	r3, [r5, #0]
    53fe:	b003      	add	sp, #12
    5400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5404:	4668      	mov	r0, sp
    5406:	9600      	str	r6, [sp, #0]
    5408:	f7ff fd1a 	bl	4e40 <__lo0bits>
    540c:	4603      	mov	r3, r0
    540e:	b310      	cbz	r0, 5456 <__d2b+0xb6>
    5410:	e9dd 0200 	ldrd	r0, r2, [sp]
    5414:	f1c3 0120 	rsb	r1, r3, #32
    5418:	fa02 f101 	lsl.w	r1, r2, r1
    541c:	4301      	orrs	r1, r0
    541e:	40da      	lsrs	r2, r3
    5420:	6161      	str	r1, [r4, #20]
    5422:	9201      	str	r2, [sp, #4]
    5424:	2a00      	cmp	r2, #0
    5426:	61a2      	str	r2, [r4, #24]
    5428:	bf14      	ite	ne
    542a:	2202      	movne	r2, #2
    542c:	2201      	moveq	r2, #1
    542e:	6122      	str	r2, [r4, #16]
    5430:	f1b9 0f00 	cmp.w	r9, #0
    5434:	d1d9      	bne.n	53ea <__d2b+0x4a>
    5436:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    543a:	f8c8 3000 	str.w	r3, [r8]
    543e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    5442:	6918      	ldr	r0, [r3, #16]
    5444:	f7ff fcdc 	bl	4e00 <__hi0bits>
    5448:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    544c:	4620      	mov	r0, r4
    544e:	602b      	str	r3, [r5, #0]
    5450:	b003      	add	sp, #12
    5452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5456:	9a00      	ldr	r2, [sp, #0]
    5458:	6162      	str	r2, [r4, #20]
    545a:	9a01      	ldr	r2, [sp, #4]
    545c:	e7e2      	b.n	5424 <__d2b+0x84>
    545e:	4b03      	ldr	r3, [pc, #12]	; (546c <__d2b+0xcc>)
    5460:	4803      	ldr	r0, [pc, #12]	; (5470 <__d2b+0xd0>)
    5462:	4622      	mov	r2, r4
    5464:	f240 310f 	movw	r1, #783	; 0x30f
    5468:	f001 ff6e 	bl	7348 <__assert_func>
    546c:	200005cc 	.word	0x200005cc
    5470:	200005e0 	.word	0x200005e0

00005474 <__ascii_wctomb>:
    5474:	b149      	cbz	r1, 548a <__ascii_wctomb+0x16>
    5476:	2aff      	cmp	r2, #255	; 0xff
    5478:	d802      	bhi.n	5480 <__ascii_wctomb+0xc>
    547a:	700a      	strb	r2, [r1, #0]
    547c:	2001      	movs	r0, #1
    547e:	4770      	bx	lr
    5480:	238a      	movs	r3, #138	; 0x8a
    5482:	6003      	str	r3, [r0, #0]
    5484:	f04f 30ff 	mov.w	r0, #4294967295
    5488:	4770      	bx	lr
    548a:	4608      	mov	r0, r1
    548c:	4770      	bx	lr
    548e:	bf00      	nop

00005490 <_svfprintf_r>:
    5490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5494:	ed2d 8b08 	vpush	{d8-d11}
    5498:	b0d1      	sub	sp, #324	; 0x144
    549a:	460c      	mov	r4, r1
    549c:	ee0b 1a10 	vmov	s22, r1
    54a0:	4690      	mov	r8, r2
    54a2:	9308      	str	r3, [sp, #32]
    54a4:	4683      	mov	fp, r0
    54a6:	f001 febb 	bl	7220 <_localeconv_r>
    54aa:	6803      	ldr	r3, [r0, #0]
    54ac:	9312      	str	r3, [sp, #72]	; 0x48
    54ae:	4618      	mov	r0, r3
    54b0:	f7ff fa06 	bl	48c0 <strlen>
    54b4:	af20      	add	r7, sp, #128	; 0x80
    54b6:	9010      	str	r0, [sp, #64]	; 0x40
    54b8:	2208      	movs	r2, #8
    54ba:	2100      	movs	r1, #0
    54bc:	4638      	mov	r0, r7
    54be:	f7ff f879 	bl	45b4 <memset>
    54c2:	89a3      	ldrh	r3, [r4, #12]
    54c4:	061b      	lsls	r3, r3, #24
    54c6:	d503      	bpl.n	54d0 <_svfprintf_r+0x40>
    54c8:	6923      	ldr	r3, [r4, #16]
    54ca:	2b00      	cmp	r3, #0
    54cc:	f000 8755 	beq.w	637a <_svfprintf_r+0xeea>
    54d0:	2300      	movs	r3, #0
    54d2:	ed9f 8b83 	vldr	d8, [pc, #524]	; 56e0 <_svfprintf_r+0x250>
    54d6:	ed9f 9b84 	vldr	d9, [pc, #528]	; 56e8 <_svfprintf_r+0x258>
    54da:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    54de:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    54e2:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    54e6:	aa27      	add	r2, sp, #156	; 0x9c
    54e8:	930e      	str	r3, [sp, #56]	; 0x38
    54ea:	9224      	str	r2, [sp, #144]	; 0x90
    54ec:	4692      	mov	sl, r2
    54ee:	9311      	str	r3, [sp, #68]	; 0x44
    54f0:	9304      	str	r3, [sp, #16]
    54f2:	4644      	mov	r4, r8
    54f4:	46a1      	mov	r9, r4
    54f6:	4b7e      	ldr	r3, [pc, #504]	; (56f0 <_svfprintf_r+0x260>)
    54f8:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    54fc:	f7ff f8de 	bl	46bc <__locale_mb_cur_max>
    5500:	464a      	mov	r2, r9
    5502:	4603      	mov	r3, r0
    5504:	a91c      	add	r1, sp, #112	; 0x70
    5506:	9700      	str	r7, [sp, #0]
    5508:	4658      	mov	r0, fp
    550a:	47a8      	blx	r5
    550c:	2800      	cmp	r0, #0
    550e:	f000 80b0 	beq.w	5672 <_svfprintf_r+0x1e2>
    5512:	f2c0 80a6 	blt.w	5662 <_svfprintf_r+0x1d2>
    5516:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5518:	2a25      	cmp	r2, #37	; 0x25
    551a:	4603      	mov	r3, r0
    551c:	d001      	beq.n	5522 <_svfprintf_r+0x92>
    551e:	4499      	add	r9, r3
    5520:	e7e9      	b.n	54f6 <_svfprintf_r+0x66>
    5522:	ebb9 0504 	subs.w	r5, r9, r4
    5526:	4606      	mov	r6, r0
    5528:	f040 80a7 	bne.w	567a <_svfprintf_r+0x1ea>
    552c:	2300      	movs	r3, #0
    552e:	f04f 32ff 	mov.w	r2, #4294967295
    5532:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    5536:	4698      	mov	r8, r3
    5538:	9306      	str	r3, [sp, #24]
    553a:	f109 0901 	add.w	r9, r9, #1
    553e:	f899 3000 	ldrb.w	r3, [r9]
    5542:	9203      	str	r2, [sp, #12]
    5544:	252b      	movs	r5, #43	; 0x2b
    5546:	2620      	movs	r6, #32
    5548:	f109 0901 	add.w	r9, r9, #1
    554c:	f1a3 0220 	sub.w	r2, r3, #32
    5550:	2a5a      	cmp	r2, #90	; 0x5a
    5552:	f200 80cf 	bhi.w	56f4 <_svfprintf_r+0x264>
    5556:	e8df f012 	tbh	[pc, r2, lsl #1]
    555a:	02e8      	.short	0x02e8
    555c:	00cd00cd 	.word	0x00cd00cd
    5560:	00cd02e3 	.word	0x00cd02e3
    5564:	00cd00cd 	.word	0x00cd00cd
    5568:	00cd006a 	.word	0x00cd006a
    556c:	020500cd 	.word	0x020500cd
    5570:	00cd0284 	.word	0x00cd0284
    5574:	02c90210 	.word	0x02c90210
    5578:	02bd00cd 	.word	0x02bd00cd
    557c:	005b005b 	.word	0x005b005b
    5580:	005b005b 	.word	0x005b005b
    5584:	005b005b 	.word	0x005b005b
    5588:	005b005b 	.word	0x005b005b
    558c:	00cd005b 	.word	0x00cd005b
    5590:	00cd00cd 	.word	0x00cd00cd
    5594:	00cd00cd 	.word	0x00cd00cd
    5598:	00cd00cd 	.word	0x00cd00cd
    559c:	00cd0153 	.word	0x00cd0153
    55a0:	021a0183 	.word	0x021a0183
    55a4:	01530153 	.word	0x01530153
    55a8:	00cd0153 	.word	0x00cd0153
    55ac:	00cd00cd 	.word	0x00cd00cd
    55b0:	021500cd 	.word	0x021500cd
    55b4:	00cd00cd 	.word	0x00cd00cd
    55b8:	00cd0296 	.word	0x00cd0296
    55bc:	00cd00cd 	.word	0x00cd00cd
    55c0:	00cd01ab 	.word	0x00cd01ab
    55c4:	00cd02aa 	.word	0x00cd02aa
    55c8:	06e300cd 	.word	0x06e300cd
    55cc:	00cd00cd 	.word	0x00cd00cd
    55d0:	00cd00cd 	.word	0x00cd00cd
    55d4:	00cd00cd 	.word	0x00cd00cd
    55d8:	00cd00cd 	.word	0x00cd00cd
    55dc:	00cd0153 	.word	0x00cd0153
    55e0:	01de0183 	.word	0x01de0183
    55e4:	01530153 	.word	0x01530153
    55e8:	02770153 	.word	0x02770153
    55ec:	007f01de 	.word	0x007f01de
    55f0:	028900cd 	.word	0x028900cd
    55f4:	025f00cd 	.word	0x025f00cd
    55f8:	022f06e0 	.word	0x022f06e0
    55fc:	00cd007f 	.word	0x00cd007f
    5600:	007c01ab 	.word	0x007c01ab
    5604:	00cd06b8 	.word	0x00cd06b8
    5608:	06bd00cd 	.word	0x06bd00cd
    560c:	007c00cd 	.word	0x007c00cd
    5610:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    5614:	2100      	movs	r1, #0
    5616:	f819 3b01 	ldrb.w	r3, [r9], #1
    561a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    561e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    5622:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    5626:	2a09      	cmp	r2, #9
    5628:	d9f5      	bls.n	5616 <_svfprintf_r+0x186>
    562a:	9106      	str	r1, [sp, #24]
    562c:	e78e      	b.n	554c <_svfprintf_r+0xbc>
    562e:	4658      	mov	r0, fp
    5630:	f001 fdf6 	bl	7220 <_localeconv_r>
    5634:	6843      	ldr	r3, [r0, #4]
    5636:	9315      	str	r3, [sp, #84]	; 0x54
    5638:	4618      	mov	r0, r3
    563a:	f7ff f941 	bl	48c0 <strlen>
    563e:	9016      	str	r0, [sp, #88]	; 0x58
    5640:	4658      	mov	r0, fp
    5642:	f001 fded 	bl	7220 <_localeconv_r>
    5646:	6883      	ldr	r3, [r0, #8]
    5648:	9313      	str	r3, [sp, #76]	; 0x4c
    564a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    564c:	2b00      	cmp	r3, #0
    564e:	f040 862d 	bne.w	62ac <_svfprintf_r+0xe1c>
    5652:	f899 3000 	ldrb.w	r3, [r9]
    5656:	e777      	b.n	5548 <_svfprintf_r+0xb8>
    5658:	f899 3000 	ldrb.w	r3, [r9]
    565c:	f048 0820 	orr.w	r8, r8, #32
    5660:	e772      	b.n	5548 <_svfprintf_r+0xb8>
    5662:	2208      	movs	r2, #8
    5664:	2100      	movs	r1, #0
    5666:	4638      	mov	r0, r7
    5668:	f7fe ffa4 	bl	45b4 <memset>
    566c:	2301      	movs	r3, #1
    566e:	4499      	add	r9, r3
    5670:	e741      	b.n	54f6 <_svfprintf_r+0x66>
    5672:	ebb9 0504 	subs.w	r5, r9, r4
    5676:	4606      	mov	r6, r0
    5678:	d011      	beq.n	569e <_svfprintf_r+0x20e>
    567a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    567c:	442b      	add	r3, r5
    567e:	9326      	str	r3, [sp, #152]	; 0x98
    5680:	9b25      	ldr	r3, [sp, #148]	; 0x94
    5682:	3301      	adds	r3, #1
    5684:	2b07      	cmp	r3, #7
    5686:	e9ca 4500 	strd	r4, r5, [sl]
    568a:	9325      	str	r3, [sp, #148]	; 0x94
    568c:	dc1c      	bgt.n	56c8 <_svfprintf_r+0x238>
    568e:	f10a 0a08 	add.w	sl, sl, #8
    5692:	9b04      	ldr	r3, [sp, #16]
    5694:	442b      	add	r3, r5
    5696:	9304      	str	r3, [sp, #16]
    5698:	2e00      	cmp	r6, #0
    569a:	f47f af47 	bne.w	552c <_svfprintf_r+0x9c>
    569e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    56a0:	2b00      	cmp	r3, #0
    56a2:	f041 820b 	bne.w	6abc <_svfprintf_r+0x162c>
    56a6:	ee1b 3a10 	vmov	r3, s22
    56aa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    56ae:	f013 0f40 	tst.w	r3, #64	; 0x40
    56b2:	9b04      	ldr	r3, [sp, #16]
    56b4:	bf18      	it	ne
    56b6:	f04f 33ff 	movne.w	r3, #4294967295
    56ba:	9304      	str	r3, [sp, #16]
    56bc:	9804      	ldr	r0, [sp, #16]
    56be:	b051      	add	sp, #324	; 0x144
    56c0:	ecbd 8b08 	vpop	{d8-d11}
    56c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    56c8:	ee1b 1a10 	vmov	r1, s22
    56cc:	aa24      	add	r2, sp, #144	; 0x90
    56ce:	4658      	mov	r0, fp
    56d0:	f002 fde6 	bl	82a0 <__ssprint_r>
    56d4:	2800      	cmp	r0, #0
    56d6:	d1e6      	bne.n	56a6 <_svfprintf_r+0x216>
    56d8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    56dc:	e7d9      	b.n	5692 <_svfprintf_r+0x202>
    56de:	bf00      	nop
	...
    56e8:	ffffffff 	.word	0xffffffff
    56ec:	7fefffff 	.word	0x7fefffff
    56f0:	20001144 	.word	0x20001144
    56f4:	930b      	str	r3, [sp, #44]	; 0x2c
    56f6:	2b00      	cmp	r3, #0
    56f8:	d0d1      	beq.n	569e <_svfprintf_r+0x20e>
    56fa:	2100      	movs	r1, #0
    56fc:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    5700:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    5704:	2301      	movs	r3, #1
    5706:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    570a:	9302      	str	r3, [sp, #8]
    570c:	9107      	str	r1, [sp, #28]
    570e:	9305      	str	r3, [sp, #20]
    5710:	9103      	str	r1, [sp, #12]
    5712:	910f      	str	r1, [sp, #60]	; 0x3c
    5714:	ac37      	add	r4, sp, #220	; 0xdc
    5716:	f018 0302 	ands.w	r3, r8, #2
    571a:	9309      	str	r3, [sp, #36]	; 0x24
    571c:	d002      	beq.n	5724 <_svfprintf_r+0x294>
    571e:	9b02      	ldr	r3, [sp, #8]
    5720:	3302      	adds	r3, #2
    5722:	9302      	str	r3, [sp, #8]
    5724:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    5728:	930a      	str	r3, [sp, #40]	; 0x28
    572a:	d105      	bne.n	5738 <_svfprintf_r+0x2a8>
    572c:	9b06      	ldr	r3, [sp, #24]
    572e:	9a02      	ldr	r2, [sp, #8]
    5730:	1a9d      	subs	r5, r3, r2
    5732:	2d00      	cmp	r5, #0
    5734:	f300 8369 	bgt.w	5e0a <_svfprintf_r+0x97a>
    5738:	9a26      	ldr	r2, [sp, #152]	; 0x98
    573a:	b189      	cbz	r1, 5760 <_svfprintf_r+0x2d0>
    573c:	9925      	ldr	r1, [sp, #148]	; 0x94
    573e:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    5742:	3101      	adds	r1, #1
    5744:	3201      	adds	r2, #1
    5746:	f8ca 0000 	str.w	r0, [sl]
    574a:	2907      	cmp	r1, #7
    574c:	f04f 0001 	mov.w	r0, #1
    5750:	9226      	str	r2, [sp, #152]	; 0x98
    5752:	9125      	str	r1, [sp, #148]	; 0x94
    5754:	f8ca 0004 	str.w	r0, [sl, #4]
    5758:	f300 83a2 	bgt.w	5ea0 <_svfprintf_r+0xa10>
    575c:	f10a 0a08 	add.w	sl, sl, #8
    5760:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5762:	b183      	cbz	r3, 5786 <_svfprintf_r+0x2f6>
    5764:	9b25      	ldr	r3, [sp, #148]	; 0x94
    5766:	a91a      	add	r1, sp, #104	; 0x68
    5768:	3301      	adds	r3, #1
    576a:	3202      	adds	r2, #2
    576c:	f8ca 1000 	str.w	r1, [sl]
    5770:	2b07      	cmp	r3, #7
    5772:	f04f 0102 	mov.w	r1, #2
    5776:	9226      	str	r2, [sp, #152]	; 0x98
    5778:	9325      	str	r3, [sp, #148]	; 0x94
    577a:	f8ca 1004 	str.w	r1, [sl, #4]
    577e:	f300 83a3 	bgt.w	5ec8 <_svfprintf_r+0xa38>
    5782:	f10a 0a08 	add.w	sl, sl, #8
    5786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5788:	2b80      	cmp	r3, #128	; 0x80
    578a:	f000 826c 	beq.w	5c66 <_svfprintf_r+0x7d6>
    578e:	9b03      	ldr	r3, [sp, #12]
    5790:	9905      	ldr	r1, [sp, #20]
    5792:	1a5d      	subs	r5, r3, r1
    5794:	2d00      	cmp	r5, #0
    5796:	f300 82a5 	bgt.w	5ce4 <_svfprintf_r+0x854>
    579a:	f418 7f80 	tst.w	r8, #256	; 0x100
    579e:	f040 820d 	bne.w	5bbc <_svfprintf_r+0x72c>
    57a2:	9b05      	ldr	r3, [sp, #20]
    57a4:	f8ca 3004 	str.w	r3, [sl, #4]
    57a8:	441a      	add	r2, r3
    57aa:	9b25      	ldr	r3, [sp, #148]	; 0x94
    57ac:	f8ca 4000 	str.w	r4, [sl]
    57b0:	3301      	adds	r3, #1
    57b2:	2b07      	cmp	r3, #7
    57b4:	9226      	str	r2, [sp, #152]	; 0x98
    57b6:	9325      	str	r3, [sp, #148]	; 0x94
    57b8:	f300 831b 	bgt.w	5df2 <_svfprintf_r+0x962>
    57bc:	f10a 0a08 	add.w	sl, sl, #8
    57c0:	f018 0f04 	tst.w	r8, #4
    57c4:	d005      	beq.n	57d2 <_svfprintf_r+0x342>
    57c6:	9b06      	ldr	r3, [sp, #24]
    57c8:	9902      	ldr	r1, [sp, #8]
    57ca:	1a5c      	subs	r4, r3, r1
    57cc:	2c00      	cmp	r4, #0
    57ce:	f300 8388 	bgt.w	5ee2 <_svfprintf_r+0xa52>
    57d2:	9b04      	ldr	r3, [sp, #16]
    57d4:	9906      	ldr	r1, [sp, #24]
    57d6:	9802      	ldr	r0, [sp, #8]
    57d8:	4281      	cmp	r1, r0
    57da:	bfac      	ite	ge
    57dc:	185b      	addge	r3, r3, r1
    57de:	181b      	addlt	r3, r3, r0
    57e0:	9304      	str	r3, [sp, #16]
    57e2:	2a00      	cmp	r2, #0
    57e4:	f040 82b0 	bne.w	5d48 <_svfprintf_r+0x8b8>
    57e8:	2300      	movs	r3, #0
    57ea:	9325      	str	r3, [sp, #148]	; 0x94
    57ec:	9b07      	ldr	r3, [sp, #28]
    57ee:	b11b      	cbz	r3, 57f8 <_svfprintf_r+0x368>
    57f0:	9907      	ldr	r1, [sp, #28]
    57f2:	4658      	mov	r0, fp
    57f4:	f7ff f966 	bl	4ac4 <_free_r>
    57f8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    57fc:	464c      	mov	r4, r9
    57fe:	e679      	b.n	54f4 <_svfprintf_r+0x64>
    5800:	930b      	str	r3, [sp, #44]	; 0x2c
    5802:	9b08      	ldr	r3, [sp, #32]
    5804:	3307      	adds	r3, #7
    5806:	f023 0307 	bic.w	r3, r3, #7
    580a:	ecb3 8b02 	vldmia	r3!, {d8}
    580e:	eeb0 7bc8 	vabs.f64	d7, d8
    5812:	eeb4 7b49 	vcmp.f64	d7, d9
    5816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    581a:	9308      	str	r3, [sp, #32]
    581c:	f340 84e9 	ble.w	61f2 <_svfprintf_r+0xd62>
    5820:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    5824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5828:	f101 8059 	bmi.w	68de <_svfprintf_r+0x144e>
    582c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    5830:	4cab      	ldr	r4, [pc, #684]	; (5ae0 <_svfprintf_r+0x650>)
    5832:	4bac      	ldr	r3, [pc, #688]	; (5ae4 <_svfprintf_r+0x654>)
    5834:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    5838:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    583a:	2a47      	cmp	r2, #71	; 0x47
    583c:	bfc8      	it	gt
    583e:	461c      	movgt	r4, r3
    5840:	2300      	movs	r3, #0
    5842:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    5846:	2203      	movs	r2, #3
    5848:	9307      	str	r3, [sp, #28]
    584a:	9202      	str	r2, [sp, #8]
    584c:	9205      	str	r2, [sp, #20]
    584e:	9303      	str	r3, [sp, #12]
    5850:	930f      	str	r3, [sp, #60]	; 0x3c
    5852:	2900      	cmp	r1, #0
    5854:	f43f af5f 	beq.w	5716 <_svfprintf_r+0x286>
    5858:	9b02      	ldr	r3, [sp, #8]
    585a:	3301      	adds	r3, #1
    585c:	9302      	str	r3, [sp, #8]
    585e:	e75a      	b.n	5716 <_svfprintf_r+0x286>
    5860:	2b43      	cmp	r3, #67	; 0x43
    5862:	930b      	str	r3, [sp, #44]	; 0x2c
    5864:	d003      	beq.n	586e <_svfprintf_r+0x3de>
    5866:	f018 0f10 	tst.w	r8, #16
    586a:	f000 855d 	beq.w	6328 <_svfprintf_r+0xe98>
    586e:	9d08      	ldr	r5, [sp, #32]
    5870:	2208      	movs	r2, #8
    5872:	2100      	movs	r1, #0
    5874:	a822      	add	r0, sp, #136	; 0x88
    5876:	ac37      	add	r4, sp, #220	; 0xdc
    5878:	f7fe fe9c 	bl	45b4 <memset>
    587c:	ab22      	add	r3, sp, #136	; 0x88
    587e:	f855 2b04 	ldr.w	r2, [r5], #4
    5882:	4621      	mov	r1, r4
    5884:	4658      	mov	r0, fp
    5886:	f002 fcc5 	bl	8214 <_wcrtomb_r>
    588a:	4603      	mov	r3, r0
    588c:	3301      	adds	r3, #1
    588e:	9005      	str	r0, [sp, #20]
    5890:	f001 82ee 	beq.w	6e70 <_svfprintf_r+0x19e0>
    5894:	9b05      	ldr	r3, [sp, #20]
    5896:	9508      	str	r5, [sp, #32]
    5898:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    589c:	9302      	str	r3, [sp, #8]
    589e:	2100      	movs	r1, #0
    58a0:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    58a4:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    58a8:	9107      	str	r1, [sp, #28]
    58aa:	9103      	str	r1, [sp, #12]
    58ac:	910f      	str	r1, [sp, #60]	; 0x3c
    58ae:	e732      	b.n	5716 <_svfprintf_r+0x286>
    58b0:	930b      	str	r3, [sp, #44]	; 0x2c
    58b2:	9b08      	ldr	r3, [sp, #32]
    58b4:	461a      	mov	r2, r3
    58b6:	2300      	movs	r3, #0
    58b8:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    58bc:	4613      	mov	r3, r2
    58be:	f853 4b04 	ldr.w	r4, [r3], #4
    58c2:	9308      	str	r3, [sp, #32]
    58c4:	2c00      	cmp	r4, #0
    58c6:	f000 8548 	beq.w	635a <_svfprintf_r+0xeca>
    58ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    58cc:	2b53      	cmp	r3, #83	; 0x53
    58ce:	f000 86ec 	beq.w	66aa <_svfprintf_r+0x121a>
    58d2:	f018 0310 	ands.w	r3, r8, #16
    58d6:	930c      	str	r3, [sp, #48]	; 0x30
    58d8:	f040 86e7 	bne.w	66aa <_svfprintf_r+0x121a>
    58dc:	9b03      	ldr	r3, [sp, #12]
    58de:	1c5d      	adds	r5, r3, #1
    58e0:	f001 80e5 	beq.w	6aae <_svfprintf_r+0x161e>
    58e4:	990c      	ldr	r1, [sp, #48]	; 0x30
    58e6:	461a      	mov	r2, r3
    58e8:	4620      	mov	r0, r4
    58ea:	f001 fca1 	bl	7230 <memchr>
    58ee:	9007      	str	r0, [sp, #28]
    58f0:	2800      	cmp	r0, #0
    58f2:	f001 8328 	beq.w	6f46 <_svfprintf_r+0x1ab6>
    58f6:	9b07      	ldr	r3, [sp, #28]
    58f8:	1b1a      	subs	r2, r3, r4
    58fa:	9205      	str	r2, [sp, #20]
    58fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    58fe:	9303      	str	r3, [sp, #12]
    5900:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    5904:	930f      	str	r3, [sp, #60]	; 0x3c
    5906:	930d      	str	r3, [sp, #52]	; 0x34
    5908:	9307      	str	r3, [sp, #28]
    590a:	2373      	movs	r3, #115	; 0x73
    590c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    5910:	9202      	str	r2, [sp, #8]
    5912:	930b      	str	r3, [sp, #44]	; 0x2c
    5914:	e79d      	b.n	5852 <_svfprintf_r+0x3c2>
    5916:	f018 0f20 	tst.w	r8, #32
    591a:	930b      	str	r3, [sp, #44]	; 0x2c
    591c:	9b08      	ldr	r3, [sp, #32]
    591e:	d03d      	beq.n	599c <_svfprintf_r+0x50c>
    5920:	3307      	adds	r3, #7
    5922:	f023 0307 	bic.w	r3, r3, #7
    5926:	461a      	mov	r2, r3
    5928:	4611      	mov	r1, r2
    592a:	685b      	ldr	r3, [r3, #4]
    592c:	f851 2b08 	ldr.w	r2, [r1], #8
    5930:	9108      	str	r1, [sp, #32]
    5932:	4619      	mov	r1, r3
    5934:	2b00      	cmp	r3, #0
    5936:	f2c0 840c 	blt.w	6152 <_svfprintf_r+0xcc2>
    593a:	9b03      	ldr	r3, [sp, #12]
    593c:	3301      	adds	r3, #1
    593e:	f000 829e 	beq.w	5e7e <_svfprintf_r+0x9ee>
    5942:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    5946:	ea52 0301 	orrs.w	r3, r2, r1
    594a:	9002      	str	r0, [sp, #8]
    594c:	f040 8299 	bne.w	5e82 <_svfprintf_r+0x9f2>
    5950:	9b03      	ldr	r3, [sp, #12]
    5952:	2b00      	cmp	r3, #0
    5954:	f040 829a 	bne.w	5e8c <_svfprintf_r+0x9fc>
    5958:	4680      	mov	r8, r0
    595a:	2300      	movs	r3, #0
    595c:	9303      	str	r3, [sp, #12]
    595e:	9305      	str	r3, [sp, #20]
    5960:	ac50      	add	r4, sp, #320	; 0x140
    5962:	e106      	b.n	5b72 <_svfprintf_r+0x6e2>
    5964:	9b08      	ldr	r3, [sp, #32]
    5966:	f853 2b04 	ldr.w	r2, [r3], #4
    596a:	9206      	str	r2, [sp, #24]
    596c:	2a00      	cmp	r2, #0
    596e:	f280 8419 	bge.w	61a4 <_svfprintf_r+0xd14>
    5972:	9a06      	ldr	r2, [sp, #24]
    5974:	9308      	str	r3, [sp, #32]
    5976:	4252      	negs	r2, r2
    5978:	9206      	str	r2, [sp, #24]
    597a:	f899 3000 	ldrb.w	r3, [r9]
    597e:	f048 0804 	orr.w	r8, r8, #4
    5982:	e5e1      	b.n	5548 <_svfprintf_r+0xb8>
    5984:	f899 3000 	ldrb.w	r3, [r9]
    5988:	f048 0808 	orr.w	r8, r8, #8
    598c:	e5dc      	b.n	5548 <_svfprintf_r+0xb8>
    598e:	f048 0810 	orr.w	r8, r8, #16
    5992:	f018 0f20 	tst.w	r8, #32
    5996:	930b      	str	r3, [sp, #44]	; 0x2c
    5998:	9b08      	ldr	r3, [sp, #32]
    599a:	d1c1      	bne.n	5920 <_svfprintf_r+0x490>
    599c:	f018 0f10 	tst.w	r8, #16
    59a0:	f040 840b 	bne.w	61ba <_svfprintf_r+0xd2a>
    59a4:	f018 0f40 	tst.w	r8, #64	; 0x40
    59a8:	f000 8403 	beq.w	61b2 <_svfprintf_r+0xd22>
    59ac:	f933 2b04 	ldrsh.w	r2, [r3], #4
    59b0:	9308      	str	r3, [sp, #32]
    59b2:	17d1      	asrs	r1, r2, #31
    59b4:	460b      	mov	r3, r1
    59b6:	e7bd      	b.n	5934 <_svfprintf_r+0x4a4>
    59b8:	9b08      	ldr	r3, [sp, #32]
    59ba:	f048 0202 	orr.w	r2, r8, #2
    59be:	9202      	str	r2, [sp, #8]
    59c0:	f853 2b04 	ldr.w	r2, [r3], #4
    59c4:	9308      	str	r3, [sp, #32]
    59c6:	f647 0330 	movw	r3, #30768	; 0x7830
    59ca:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    59ce:	2078      	movs	r0, #120	; 0x78
    59d0:	4b45      	ldr	r3, [pc, #276]	; (5ae8 <_svfprintf_r+0x658>)
    59d2:	9311      	str	r3, [sp, #68]	; 0x44
    59d4:	2100      	movs	r1, #0
    59d6:	2302      	movs	r3, #2
    59d8:	900b      	str	r0, [sp, #44]	; 0x2c
    59da:	2000      	movs	r0, #0
    59dc:	9c03      	ldr	r4, [sp, #12]
    59de:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    59e2:	1c60      	adds	r0, r4, #1
    59e4:	f000 80ad 	beq.w	5b42 <_svfprintf_r+0x6b2>
    59e8:	9802      	ldr	r0, [sp, #8]
    59ea:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    59ee:	ea52 0001 	orrs.w	r0, r2, r1
    59f2:	f040 80a4 	bne.w	5b3e <_svfprintf_r+0x6ae>
    59f6:	2c00      	cmp	r4, #0
    59f8:	f040 86ae 	bne.w	6758 <_svfprintf_r+0x12c8>
    59fc:	2b00      	cmp	r3, #0
    59fe:	d1ac      	bne.n	595a <_svfprintf_r+0x4ca>
    5a00:	9b02      	ldr	r3, [sp, #8]
    5a02:	f013 0301 	ands.w	r3, r3, #1
    5a06:	9305      	str	r3, [sp, #20]
    5a08:	f000 83d1 	beq.w	61ae <_svfprintf_r+0xd1e>
    5a0c:	2330      	movs	r3, #48	; 0x30
    5a0e:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    5a12:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    5a16:	e0ac      	b.n	5b72 <_svfprintf_r+0x6e2>
    5a18:	f018 0f20 	tst.w	r8, #32
    5a1c:	f040 83d4 	bne.w	61c8 <_svfprintf_r+0xd38>
    5a20:	f018 0f10 	tst.w	r8, #16
    5a24:	f040 869f 	bne.w	6766 <_svfprintf_r+0x12d6>
    5a28:	f018 0f40 	tst.w	r8, #64	; 0x40
    5a2c:	f040 8797 	bne.w	695e <_svfprintf_r+0x14ce>
    5a30:	f418 7f00 	tst.w	r8, #512	; 0x200
    5a34:	f000 8697 	beq.w	6766 <_svfprintf_r+0x12d6>
    5a38:	9b08      	ldr	r3, [sp, #32]
    5a3a:	9904      	ldr	r1, [sp, #16]
    5a3c:	f853 2b04 	ldr.w	r2, [r3], #4
    5a40:	9308      	str	r3, [sp, #32]
    5a42:	7011      	strb	r1, [r2, #0]
    5a44:	464c      	mov	r4, r9
    5a46:	e555      	b.n	54f4 <_svfprintf_r+0x64>
    5a48:	f899 3000 	ldrb.w	r3, [r9]
    5a4c:	2b68      	cmp	r3, #104	; 0x68
    5a4e:	bf03      	ittte	eq
    5a50:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    5a54:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    5a58:	f109 0901 	addeq.w	r9, r9, #1
    5a5c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    5a60:	e572      	b.n	5548 <_svfprintf_r+0xb8>
    5a62:	f899 3000 	ldrb.w	r3, [r9]
    5a66:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    5a6a:	e56d      	b.n	5548 <_svfprintf_r+0xb8>
    5a6c:	f899 3000 	ldrb.w	r3, [r9]
    5a70:	2b6c      	cmp	r3, #108	; 0x6c
    5a72:	bf03      	ittte	eq
    5a74:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    5a78:	f048 0820 	orreq.w	r8, r8, #32
    5a7c:	f109 0901 	addeq.w	r9, r9, #1
    5a80:	f048 0810 	orrne.w	r8, r8, #16
    5a84:	e560      	b.n	5548 <_svfprintf_r+0xb8>
    5a86:	930b      	str	r3, [sp, #44]	; 0x2c
    5a88:	f048 0810 	orr.w	r8, r8, #16
    5a8c:	f018 0120 	ands.w	r1, r8, #32
    5a90:	f000 8351 	beq.w	6136 <_svfprintf_r+0xca6>
    5a94:	9b08      	ldr	r3, [sp, #32]
    5a96:	3307      	adds	r3, #7
    5a98:	f023 0307 	bic.w	r3, r3, #7
    5a9c:	6859      	ldr	r1, [r3, #4]
    5a9e:	f853 2b08 	ldr.w	r2, [r3], #8
    5aa2:	9308      	str	r3, [sp, #32]
    5aa4:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    5aa8:	9302      	str	r3, [sp, #8]
    5aaa:	2300      	movs	r3, #0
    5aac:	e795      	b.n	59da <_svfprintf_r+0x54a>
    5aae:	930b      	str	r3, [sp, #44]	; 0x2c
    5ab0:	f048 0310 	orr.w	r3, r8, #16
    5ab4:	9302      	str	r3, [sp, #8]
    5ab6:	9b02      	ldr	r3, [sp, #8]
    5ab8:	f013 0120 	ands.w	r1, r3, #32
    5abc:	f000 8329 	beq.w	6112 <_svfprintf_r+0xc82>
    5ac0:	9b08      	ldr	r3, [sp, #32]
    5ac2:	3307      	adds	r3, #7
    5ac4:	f023 0307 	bic.w	r3, r3, #7
    5ac8:	6859      	ldr	r1, [r3, #4]
    5aca:	f853 2b08 	ldr.w	r2, [r3], #8
    5ace:	9308      	str	r3, [sp, #32]
    5ad0:	2301      	movs	r3, #1
    5ad2:	e782      	b.n	59da <_svfprintf_r+0x54a>
    5ad4:	f899 3000 	ldrb.w	r3, [r9]
    5ad8:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    5adc:	e534      	b.n	5548 <_svfprintf_r+0xb8>
    5ade:	bf00      	nop
    5ae0:	200007ac 	.word	0x200007ac
    5ae4:	200007b0 	.word	0x200007b0
    5ae8:	200007bc 	.word	0x200007bc
    5aec:	4649      	mov	r1, r9
    5aee:	f811 3b01 	ldrb.w	r3, [r1], #1
    5af2:	2b2a      	cmp	r3, #42	; 0x2a
    5af4:	f001 8249 	beq.w	6f8a <_svfprintf_r+0x1afa>
    5af8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    5afc:	2a09      	cmp	r2, #9
    5afe:	4689      	mov	r9, r1
    5b00:	bf98      	it	ls
    5b02:	2100      	movls	r1, #0
    5b04:	f201 8144 	bhi.w	6d90 <_svfprintf_r+0x1900>
    5b08:	f819 3b01 	ldrb.w	r3, [r9], #1
    5b0c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    5b10:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    5b14:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    5b18:	2a09      	cmp	r2, #9
    5b1a:	d9f5      	bls.n	5b08 <_svfprintf_r+0x678>
    5b1c:	9103      	str	r1, [sp, #12]
    5b1e:	e515      	b.n	554c <_svfprintf_r+0xbc>
    5b20:	f899 3000 	ldrb.w	r3, [r9]
    5b24:	f048 0801 	orr.w	r8, r8, #1
    5b28:	e50e      	b.n	5548 <_svfprintf_r+0xb8>
    5b2a:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    5b2e:	2b00      	cmp	r3, #0
    5b30:	f47f ad8f 	bne.w	5652 <_svfprintf_r+0x1c2>
    5b34:	f899 3000 	ldrb.w	r3, [r9]
    5b38:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    5b3c:	e504      	b.n	5548 <_svfprintf_r+0xb8>
    5b3e:	f8cd 8008 	str.w	r8, [sp, #8]
    5b42:	2b01      	cmp	r3, #1
    5b44:	f000 819d 	beq.w	5e82 <_svfprintf_r+0x9f2>
    5b48:	2b02      	cmp	r3, #2
    5b4a:	ac50      	add	r4, sp, #320	; 0x140
    5b4c:	d120      	bne.n	5b90 <_svfprintf_r+0x700>
    5b4e:	9811      	ldr	r0, [sp, #68]	; 0x44
    5b50:	f002 030f 	and.w	r3, r2, #15
    5b54:	0912      	lsrs	r2, r2, #4
    5b56:	5cc3      	ldrb	r3, [r0, r3]
    5b58:	f804 3d01 	strb.w	r3, [r4, #-1]!
    5b5c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    5b60:	0909      	lsrs	r1, r1, #4
    5b62:	ea52 0301 	orrs.w	r3, r2, r1
    5b66:	d1f3      	bne.n	5b50 <_svfprintf_r+0x6c0>
    5b68:	ab50      	add	r3, sp, #320	; 0x140
    5b6a:	1b1b      	subs	r3, r3, r4
    5b6c:	f8dd 8008 	ldr.w	r8, [sp, #8]
    5b70:	9305      	str	r3, [sp, #20]
    5b72:	9a05      	ldr	r2, [sp, #20]
    5b74:	9803      	ldr	r0, [sp, #12]
    5b76:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    5b7a:	4282      	cmp	r2, r0
    5b7c:	f04f 0300 	mov.w	r3, #0
    5b80:	bfb8      	it	lt
    5b82:	4602      	movlt	r2, r0
    5b84:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    5b88:	9307      	str	r3, [sp, #28]
    5b8a:	9202      	str	r2, [sp, #8]
    5b8c:	930f      	str	r3, [sp, #60]	; 0x3c
    5b8e:	e660      	b.n	5852 <_svfprintf_r+0x3c2>
    5b90:	f002 0307 	and.w	r3, r2, #7
    5b94:	08d2      	lsrs	r2, r2, #3
    5b96:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    5b9a:	08c9      	lsrs	r1, r1, #3
    5b9c:	3330      	adds	r3, #48	; 0x30
    5b9e:	ea52 0501 	orrs.w	r5, r2, r1
    5ba2:	4620      	mov	r0, r4
    5ba4:	f804 3d01 	strb.w	r3, [r4, #-1]!
    5ba8:	d1f2      	bne.n	5b90 <_svfprintf_r+0x700>
    5baa:	9a02      	ldr	r2, [sp, #8]
    5bac:	07d1      	lsls	r1, r2, #31
    5bae:	f100 824d 	bmi.w	604c <_svfprintf_r+0xbbc>
    5bb2:	ab50      	add	r3, sp, #320	; 0x140
    5bb4:	1b1b      	subs	r3, r3, r4
    5bb6:	4690      	mov	r8, r2
    5bb8:	9305      	str	r3, [sp, #20]
    5bba:	e7da      	b.n	5b72 <_svfprintf_r+0x6e2>
    5bbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5bbe:	2b65      	cmp	r3, #101	; 0x65
    5bc0:	f340 80d4 	ble.w	5d6c <_svfprintf_r+0x8dc>
    5bc4:	eeb5 8b40 	vcmp.f64	d8, #0.0
    5bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5bcc:	f040 81c1 	bne.w	5f52 <_svfprintf_r+0xac2>
    5bd0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    5bd2:	49ba      	ldr	r1, [pc, #744]	; (5ebc <_svfprintf_r+0xa2c>)
    5bd4:	f8ca 1000 	str.w	r1, [sl]
    5bd8:	3301      	adds	r3, #1
    5bda:	3201      	adds	r2, #1
    5bdc:	2101      	movs	r1, #1
    5bde:	2b07      	cmp	r3, #7
    5be0:	9226      	str	r2, [sp, #152]	; 0x98
    5be2:	9325      	str	r3, [sp, #148]	; 0x94
    5be4:	f8ca 1004 	str.w	r1, [sl, #4]
    5be8:	f300 8551 	bgt.w	668e <_svfprintf_r+0x11fe>
    5bec:	f10a 0a08 	add.w	sl, sl, #8
    5bf0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    5bf2:	990e      	ldr	r1, [sp, #56]	; 0x38
    5bf4:	428b      	cmp	r3, r1
    5bf6:	f280 82d0 	bge.w	619a <_svfprintf_r+0xd0a>
    5bfa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5bfc:	9912      	ldr	r1, [sp, #72]	; 0x48
    5bfe:	441a      	add	r2, r3
    5c00:	e9ca 1300 	strd	r1, r3, [sl]
    5c04:	9b25      	ldr	r3, [sp, #148]	; 0x94
    5c06:	9226      	str	r2, [sp, #152]	; 0x98
    5c08:	3301      	adds	r3, #1
    5c0a:	2b07      	cmp	r3, #7
    5c0c:	9325      	str	r3, [sp, #148]	; 0x94
    5c0e:	f300 8397 	bgt.w	6340 <_svfprintf_r+0xeb0>
    5c12:	f10a 0a08 	add.w	sl, sl, #8
    5c16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5c18:	1e5c      	subs	r4, r3, #1
    5c1a:	2c00      	cmp	r4, #0
    5c1c:	f77f add0 	ble.w	57c0 <_svfprintf_r+0x330>
    5c20:	2c10      	cmp	r4, #16
    5c22:	9b25      	ldr	r3, [sp, #148]	; 0x94
    5c24:	f340 856e 	ble.w	6704 <_svfprintf_r+0x1274>
    5c28:	ee1b 6a10 	vmov	r6, s22
    5c2c:	2510      	movs	r5, #16
    5c2e:	e005      	b.n	5c3c <_svfprintf_r+0x7ac>
    5c30:	f10a 0a08 	add.w	sl, sl, #8
    5c34:	3c10      	subs	r4, #16
    5c36:	2c10      	cmp	r4, #16
    5c38:	f340 8564 	ble.w	6704 <_svfprintf_r+0x1274>
    5c3c:	3301      	adds	r3, #1
    5c3e:	49a0      	ldr	r1, [pc, #640]	; (5ec0 <_svfprintf_r+0xa30>)
    5c40:	3210      	adds	r2, #16
    5c42:	2b07      	cmp	r3, #7
    5c44:	e9ca 1500 	strd	r1, r5, [sl]
    5c48:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    5c4c:	ddf0      	ble.n	5c30 <_svfprintf_r+0x7a0>
    5c4e:	aa24      	add	r2, sp, #144	; 0x90
    5c50:	4631      	mov	r1, r6
    5c52:	4658      	mov	r0, fp
    5c54:	f002 fb24 	bl	82a0 <__ssprint_r>
    5c58:	2800      	cmp	r0, #0
    5c5a:	d17e      	bne.n	5d5a <_svfprintf_r+0x8ca>
    5c5c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    5c60:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    5c64:	e7e6      	b.n	5c34 <_svfprintf_r+0x7a4>
    5c66:	9b06      	ldr	r3, [sp, #24]
    5c68:	9902      	ldr	r1, [sp, #8]
    5c6a:	1a5d      	subs	r5, r3, r1
    5c6c:	2d00      	cmp	r5, #0
    5c6e:	f77f ad8e 	ble.w	578e <_svfprintf_r+0x2fe>
    5c72:	2d10      	cmp	r5, #16
    5c74:	9b25      	ldr	r3, [sp, #148]	; 0x94
    5c76:	dd21      	ble.n	5cbc <_svfprintf_r+0x82c>
    5c78:	9409      	str	r4, [sp, #36]	; 0x24
    5c7a:	2610      	movs	r6, #16
    5c7c:	ee1b 4a10 	vmov	r4, s22
    5c80:	e004      	b.n	5c8c <_svfprintf_r+0x7fc>
    5c82:	3d10      	subs	r5, #16
    5c84:	2d10      	cmp	r5, #16
    5c86:	f10a 0a08 	add.w	sl, sl, #8
    5c8a:	dd16      	ble.n	5cba <_svfprintf_r+0x82a>
    5c8c:	3301      	adds	r3, #1
    5c8e:	498c      	ldr	r1, [pc, #560]	; (5ec0 <_svfprintf_r+0xa30>)
    5c90:	3210      	adds	r2, #16
    5c92:	2b07      	cmp	r3, #7
    5c94:	e9ca 1600 	strd	r1, r6, [sl]
    5c98:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    5c9c:	ddf1      	ble.n	5c82 <_svfprintf_r+0x7f2>
    5c9e:	aa24      	add	r2, sp, #144	; 0x90
    5ca0:	4621      	mov	r1, r4
    5ca2:	4658      	mov	r0, fp
    5ca4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    5ca8:	f002 fafa 	bl	82a0 <__ssprint_r>
    5cac:	2800      	cmp	r0, #0
    5cae:	d154      	bne.n	5d5a <_svfprintf_r+0x8ca>
    5cb0:	3d10      	subs	r5, #16
    5cb2:	2d10      	cmp	r5, #16
    5cb4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    5cb8:	dce8      	bgt.n	5c8c <_svfprintf_r+0x7fc>
    5cba:	9c09      	ldr	r4, [sp, #36]	; 0x24
    5cbc:	4980      	ldr	r1, [pc, #512]	; (5ec0 <_svfprintf_r+0xa30>)
    5cbe:	f8ca 5004 	str.w	r5, [sl, #4]
    5cc2:	3301      	adds	r3, #1
    5cc4:	442a      	add	r2, r5
    5cc6:	2b07      	cmp	r3, #7
    5cc8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    5ccc:	f8ca 1000 	str.w	r1, [sl]
    5cd0:	f300 8526 	bgt.w	6720 <_svfprintf_r+0x1290>
    5cd4:	9b03      	ldr	r3, [sp, #12]
    5cd6:	9905      	ldr	r1, [sp, #20]
    5cd8:	1a5d      	subs	r5, r3, r1
    5cda:	2d00      	cmp	r5, #0
    5cdc:	f10a 0a08 	add.w	sl, sl, #8
    5ce0:	f77f ad5b 	ble.w	579a <_svfprintf_r+0x30a>
    5ce4:	2d10      	cmp	r5, #16
    5ce6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    5ce8:	dd1f      	ble.n	5d2a <_svfprintf_r+0x89a>
    5cea:	4651      	mov	r1, sl
    5cec:	2610      	movs	r6, #16
    5cee:	ee1b aa10 	vmov	sl, s22
    5cf2:	e004      	b.n	5cfe <_svfprintf_r+0x86e>
    5cf4:	3d10      	subs	r5, #16
    5cf6:	2d10      	cmp	r5, #16
    5cf8:	f101 0108 	add.w	r1, r1, #8
    5cfc:	dd14      	ble.n	5d28 <_svfprintf_r+0x898>
    5cfe:	3301      	adds	r3, #1
    5d00:	486f      	ldr	r0, [pc, #444]	; (5ec0 <_svfprintf_r+0xa30>)
    5d02:	3210      	adds	r2, #16
    5d04:	2b07      	cmp	r3, #7
    5d06:	e9c1 0600 	strd	r0, r6, [r1]
    5d0a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    5d0e:	ddf1      	ble.n	5cf4 <_svfprintf_r+0x864>
    5d10:	aa24      	add	r2, sp, #144	; 0x90
    5d12:	4651      	mov	r1, sl
    5d14:	4658      	mov	r0, fp
    5d16:	f002 fac3 	bl	82a0 <__ssprint_r>
    5d1a:	b9f0      	cbnz	r0, 5d5a <_svfprintf_r+0x8ca>
    5d1c:	3d10      	subs	r5, #16
    5d1e:	2d10      	cmp	r5, #16
    5d20:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    5d24:	a927      	add	r1, sp, #156	; 0x9c
    5d26:	dcea      	bgt.n	5cfe <_svfprintf_r+0x86e>
    5d28:	468a      	mov	sl, r1
    5d2a:	3301      	adds	r3, #1
    5d2c:	4964      	ldr	r1, [pc, #400]	; (5ec0 <_svfprintf_r+0xa30>)
    5d2e:	f8ca 5004 	str.w	r5, [sl, #4]
    5d32:	442a      	add	r2, r5
    5d34:	2b07      	cmp	r3, #7
    5d36:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    5d3a:	f8ca 1000 	str.w	r1, [sl]
    5d3e:	f300 81da 	bgt.w	60f6 <_svfprintf_r+0xc66>
    5d42:	f10a 0a08 	add.w	sl, sl, #8
    5d46:	e528      	b.n	579a <_svfprintf_r+0x30a>
    5d48:	ee1b 1a10 	vmov	r1, s22
    5d4c:	aa24      	add	r2, sp, #144	; 0x90
    5d4e:	4658      	mov	r0, fp
    5d50:	f002 faa6 	bl	82a0 <__ssprint_r>
    5d54:	2800      	cmp	r0, #0
    5d56:	f43f ad47 	beq.w	57e8 <_svfprintf_r+0x358>
    5d5a:	9b07      	ldr	r3, [sp, #28]
    5d5c:	2b00      	cmp	r3, #0
    5d5e:	f43f aca2 	beq.w	56a6 <_svfprintf_r+0x216>
    5d62:	9907      	ldr	r1, [sp, #28]
    5d64:	4658      	mov	r0, fp
    5d66:	f7fe fead 	bl	4ac4 <_free_r>
    5d6a:	e49c      	b.n	56a6 <_svfprintf_r+0x216>
    5d6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5d6e:	2b01      	cmp	r3, #1
    5d70:	f340 817a 	ble.w	6068 <_svfprintf_r+0xbd8>
    5d74:	9b25      	ldr	r3, [sp, #148]	; 0x94
    5d76:	f8ca 4000 	str.w	r4, [sl]
    5d7a:	3301      	adds	r3, #1
    5d7c:	3201      	adds	r2, #1
    5d7e:	2101      	movs	r1, #1
    5d80:	2b07      	cmp	r3, #7
    5d82:	9226      	str	r2, [sp, #152]	; 0x98
    5d84:	9325      	str	r3, [sp, #148]	; 0x94
    5d86:	f8ca 1004 	str.w	r1, [sl, #4]
    5d8a:	f300 81f8 	bgt.w	617e <_svfprintf_r+0xcee>
    5d8e:	f10a 0a08 	add.w	sl, sl, #8
    5d92:	9910      	ldr	r1, [sp, #64]	; 0x40
    5d94:	9812      	ldr	r0, [sp, #72]	; 0x48
    5d96:	3301      	adds	r3, #1
    5d98:	440a      	add	r2, r1
    5d9a:	2b07      	cmp	r3, #7
    5d9c:	e9ca 0100 	strd	r0, r1, [sl]
    5da0:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    5da4:	f300 81dd 	bgt.w	6162 <_svfprintf_r+0xcd2>
    5da8:	f10a 0a08 	add.w	sl, sl, #8
    5dac:	eeb5 8b40 	vcmp.f64	d8, #0.0
    5db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5db4:	f000 8177 	beq.w	60a6 <_svfprintf_r+0xc16>
    5db8:	990e      	ldr	r1, [sp, #56]	; 0x38
    5dba:	3301      	adds	r3, #1
    5dbc:	3901      	subs	r1, #1
    5dbe:	3401      	adds	r4, #1
    5dc0:	440a      	add	r2, r1
    5dc2:	2b07      	cmp	r3, #7
    5dc4:	f8ca 4000 	str.w	r4, [sl]
    5dc8:	9325      	str	r3, [sp, #148]	; 0x94
    5dca:	f8ca 1004 	str.w	r1, [sl, #4]
    5dce:	9226      	str	r2, [sp, #152]	; 0x98
    5dd0:	f300 815b 	bgt.w	608a <_svfprintf_r+0xbfa>
    5dd4:	f10a 0a08 	add.w	sl, sl, #8
    5dd8:	9914      	ldr	r1, [sp, #80]	; 0x50
    5dda:	f8ca 1004 	str.w	r1, [sl, #4]
    5dde:	3301      	adds	r3, #1
    5de0:	440a      	add	r2, r1
    5de2:	2b07      	cmp	r3, #7
    5de4:	a91e      	add	r1, sp, #120	; 0x78
    5de6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    5dea:	f8ca 1000 	str.w	r1, [sl]
    5dee:	f77f ace5 	ble.w	57bc <_svfprintf_r+0x32c>
    5df2:	ee1b 1a10 	vmov	r1, s22
    5df6:	aa24      	add	r2, sp, #144	; 0x90
    5df8:	4658      	mov	r0, fp
    5dfa:	f002 fa51 	bl	82a0 <__ssprint_r>
    5dfe:	2800      	cmp	r0, #0
    5e00:	d1ab      	bne.n	5d5a <_svfprintf_r+0x8ca>
    5e02:	9a26      	ldr	r2, [sp, #152]	; 0x98
    5e04:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    5e08:	e4da      	b.n	57c0 <_svfprintf_r+0x330>
    5e0a:	2d10      	cmp	r5, #16
    5e0c:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    5e10:	4e2c      	ldr	r6, [pc, #176]	; (5ec4 <_svfprintf_r+0xa34>)
    5e12:	dd24      	ble.n	5e5e <_svfprintf_r+0x9ce>
    5e14:	9417      	str	r4, [sp, #92]	; 0x5c
    5e16:	2310      	movs	r3, #16
    5e18:	ee1b 4a10 	vmov	r4, s22
    5e1c:	4608      	mov	r0, r1
    5e1e:	e004      	b.n	5e2a <_svfprintf_r+0x99a>
    5e20:	3d10      	subs	r5, #16
    5e22:	2d10      	cmp	r5, #16
    5e24:	f10a 0a08 	add.w	sl, sl, #8
    5e28:	dd17      	ble.n	5e5a <_svfprintf_r+0x9ca>
    5e2a:	3001      	adds	r0, #1
    5e2c:	3210      	adds	r2, #16
    5e2e:	2807      	cmp	r0, #7
    5e30:	e9ca 6300 	strd	r6, r3, [sl]
    5e34:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    5e38:	ddf2      	ble.n	5e20 <_svfprintf_r+0x990>
    5e3a:	aa24      	add	r2, sp, #144	; 0x90
    5e3c:	4621      	mov	r1, r4
    5e3e:	4658      	mov	r0, fp
    5e40:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    5e44:	f002 fa2c 	bl	82a0 <__ssprint_r>
    5e48:	2800      	cmp	r0, #0
    5e4a:	d186      	bne.n	5d5a <_svfprintf_r+0x8ca>
    5e4c:	3d10      	subs	r5, #16
    5e4e:	2d10      	cmp	r5, #16
    5e50:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    5e54:	f04f 0310 	mov.w	r3, #16
    5e58:	dce7      	bgt.n	5e2a <_svfprintf_r+0x99a>
    5e5a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    5e5c:	4601      	mov	r1, r0
    5e5e:	3101      	adds	r1, #1
    5e60:	442a      	add	r2, r5
    5e62:	2907      	cmp	r1, #7
    5e64:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    5e68:	f8ca 6000 	str.w	r6, [sl]
    5e6c:	f8ca 5004 	str.w	r5, [sl, #4]
    5e70:	f300 83bd 	bgt.w	65ee <_svfprintf_r+0x115e>
    5e74:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    5e78:	f10a 0a08 	add.w	sl, sl, #8
    5e7c:	e45d      	b.n	573a <_svfprintf_r+0x2aa>
    5e7e:	f8cd 8008 	str.w	r8, [sp, #8]
    5e82:	2a0a      	cmp	r2, #10
    5e84:	f171 0300 	sbcs.w	r3, r1, #0
    5e88:	f080 8345 	bcs.w	6516 <_svfprintf_r+0x1086>
    5e8c:	3230      	adds	r2, #48	; 0x30
    5e8e:	2301      	movs	r3, #1
    5e90:	f8dd 8008 	ldr.w	r8, [sp, #8]
    5e94:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    5e98:	9305      	str	r3, [sp, #20]
    5e9a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    5e9e:	e668      	b.n	5b72 <_svfprintf_r+0x6e2>
    5ea0:	ee1b 1a10 	vmov	r1, s22
    5ea4:	aa24      	add	r2, sp, #144	; 0x90
    5ea6:	4658      	mov	r0, fp
    5ea8:	f002 f9fa 	bl	82a0 <__ssprint_r>
    5eac:	2800      	cmp	r0, #0
    5eae:	f47f af54 	bne.w	5d5a <_svfprintf_r+0x8ca>
    5eb2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    5eb4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    5eb8:	e452      	b.n	5760 <_svfprintf_r+0x2d0>
    5eba:	bf00      	nop
    5ebc:	200007ec 	.word	0x200007ec
    5ec0:	20000d88 	.word	0x20000d88
    5ec4:	200007f0 	.word	0x200007f0
    5ec8:	ee1b 1a10 	vmov	r1, s22
    5ecc:	aa24      	add	r2, sp, #144	; 0x90
    5ece:	4658      	mov	r0, fp
    5ed0:	f002 f9e6 	bl	82a0 <__ssprint_r>
    5ed4:	2800      	cmp	r0, #0
    5ed6:	f47f af40 	bne.w	5d5a <_svfprintf_r+0x8ca>
    5eda:	9a26      	ldr	r2, [sp, #152]	; 0x98
    5edc:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    5ee0:	e451      	b.n	5786 <_svfprintf_r+0x2f6>
    5ee2:	2c10      	cmp	r4, #16
    5ee4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    5ee6:	4ebe      	ldr	r6, [pc, #760]	; (61e0 <_svfprintf_r+0xd50>)
    5ee8:	dd1f      	ble.n	5f2a <_svfprintf_r+0xa9a>
    5eea:	ee1b 8a10 	vmov	r8, s22
    5eee:	2510      	movs	r5, #16
    5ef0:	e004      	b.n	5efc <_svfprintf_r+0xa6c>
    5ef2:	3c10      	subs	r4, #16
    5ef4:	2c10      	cmp	r4, #16
    5ef6:	f10a 0a08 	add.w	sl, sl, #8
    5efa:	dd16      	ble.n	5f2a <_svfprintf_r+0xa9a>
    5efc:	3301      	adds	r3, #1
    5efe:	3210      	adds	r2, #16
    5f00:	2b07      	cmp	r3, #7
    5f02:	e9ca 6500 	strd	r6, r5, [sl]
    5f06:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    5f0a:	ddf2      	ble.n	5ef2 <_svfprintf_r+0xa62>
    5f0c:	aa24      	add	r2, sp, #144	; 0x90
    5f0e:	4641      	mov	r1, r8
    5f10:	4658      	mov	r0, fp
    5f12:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    5f16:	f002 f9c3 	bl	82a0 <__ssprint_r>
    5f1a:	2800      	cmp	r0, #0
    5f1c:	f47f af1d 	bne.w	5d5a <_svfprintf_r+0x8ca>
    5f20:	3c10      	subs	r4, #16
    5f22:	2c10      	cmp	r4, #16
    5f24:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    5f28:	dce8      	bgt.n	5efc <_svfprintf_r+0xa6c>
    5f2a:	3301      	adds	r3, #1
    5f2c:	4422      	add	r2, r4
    5f2e:	2b07      	cmp	r3, #7
    5f30:	e9ca 6400 	strd	r6, r4, [sl]
    5f34:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    5f38:	f77f ac4b 	ble.w	57d2 <_svfprintf_r+0x342>
    5f3c:	ee1b 1a10 	vmov	r1, s22
    5f40:	aa24      	add	r2, sp, #144	; 0x90
    5f42:	4658      	mov	r0, fp
    5f44:	f002 f9ac 	bl	82a0 <__ssprint_r>
    5f48:	2800      	cmp	r0, #0
    5f4a:	f47f af06 	bne.w	5d5a <_svfprintf_r+0x8ca>
    5f4e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    5f50:	e43f      	b.n	57d2 <_svfprintf_r+0x342>
    5f52:	991b      	ldr	r1, [sp, #108]	; 0x6c
    5f54:	2900      	cmp	r1, #0
    5f56:	f340 835a 	ble.w	660e <_svfprintf_r+0x117e>
    5f5a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    5f5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5f5e:	429e      	cmp	r6, r3
    5f60:	bfa8      	it	ge
    5f62:	461e      	movge	r6, r3
    5f64:	2e00      	cmp	r6, #0
    5f66:	dd0b      	ble.n	5f80 <_svfprintf_r+0xaf0>
    5f68:	9b25      	ldr	r3, [sp, #148]	; 0x94
    5f6a:	3301      	adds	r3, #1
    5f6c:	4432      	add	r2, r6
    5f6e:	2b07      	cmp	r3, #7
    5f70:	e9ca 4600 	strd	r4, r6, [sl]
    5f74:	9226      	str	r2, [sp, #152]	; 0x98
    5f76:	9325      	str	r3, [sp, #148]	; 0x94
    5f78:	f300 8689 	bgt.w	6c8e <_svfprintf_r+0x17fe>
    5f7c:	f10a 0a08 	add.w	sl, sl, #8
    5f80:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    5f82:	2e00      	cmp	r6, #0
    5f84:	bfa8      	it	ge
    5f86:	1bad      	subge	r5, r5, r6
    5f88:	2d00      	cmp	r5, #0
    5f8a:	f300 8203 	bgt.w	6394 <_svfprintf_r+0xf04>
    5f8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5f90:	f418 6f80 	tst.w	r8, #1024	; 0x400
    5f94:	4423      	add	r3, r4
    5f96:	9305      	str	r3, [sp, #20]
    5f98:	f040 821f 	bne.w	63da <_svfprintf_r+0xf4a>
    5f9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    5f9e:	990e      	ldr	r1, [sp, #56]	; 0x38
    5fa0:	428b      	cmp	r3, r1
    5fa2:	db03      	blt.n	5fac <_svfprintf_r+0xb1c>
    5fa4:	f018 0f01 	tst.w	r8, #1
    5fa8:	f000 84cf 	beq.w	694a <_svfprintf_r+0x14ba>
    5fac:	9910      	ldr	r1, [sp, #64]	; 0x40
    5fae:	9812      	ldr	r0, [sp, #72]	; 0x48
    5fb0:	440a      	add	r2, r1
    5fb2:	e9ca 0100 	strd	r0, r1, [sl]
    5fb6:	9925      	ldr	r1, [sp, #148]	; 0x94
    5fb8:	9226      	str	r2, [sp, #152]	; 0x98
    5fba:	3101      	adds	r1, #1
    5fbc:	2907      	cmp	r1, #7
    5fbe:	9125      	str	r1, [sp, #148]	; 0x94
    5fc0:	f300 86a5 	bgt.w	6d0e <_svfprintf_r+0x187e>
    5fc4:	f10a 0a08 	add.w	sl, sl, #8
    5fc8:	990e      	ldr	r1, [sp, #56]	; 0x38
    5fca:	1865      	adds	r5, r4, r1
    5fcc:	1acc      	subs	r4, r1, r3
    5fce:	9b05      	ldr	r3, [sp, #20]
    5fd0:	1aed      	subs	r5, r5, r3
    5fd2:	42a5      	cmp	r5, r4
    5fd4:	bfa8      	it	ge
    5fd6:	4625      	movge	r5, r4
    5fd8:	2d00      	cmp	r5, #0
    5fda:	dd0d      	ble.n	5ff8 <_svfprintf_r+0xb68>
    5fdc:	f8ca 3000 	str.w	r3, [sl]
    5fe0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    5fe2:	f8ca 5004 	str.w	r5, [sl, #4]
    5fe6:	3301      	adds	r3, #1
    5fe8:	442a      	add	r2, r5
    5fea:	2b07      	cmp	r3, #7
    5fec:	9226      	str	r2, [sp, #152]	; 0x98
    5fee:	9325      	str	r3, [sp, #148]	; 0x94
    5ff0:	f300 86bb 	bgt.w	6d6a <_svfprintf_r+0x18da>
    5ff4:	f10a 0a08 	add.w	sl, sl, #8
    5ff8:	2d00      	cmp	r5, #0
    5ffa:	bfa8      	it	ge
    5ffc:	1b64      	subge	r4, r4, r5
    5ffe:	2c00      	cmp	r4, #0
    6000:	f77f abde 	ble.w	57c0 <_svfprintf_r+0x330>
    6004:	2c10      	cmp	r4, #16
    6006:	9b25      	ldr	r3, [sp, #148]	; 0x94
    6008:	f340 837c 	ble.w	6704 <_svfprintf_r+0x1274>
    600c:	ee1b 6a10 	vmov	r6, s22
    6010:	2510      	movs	r5, #16
    6012:	e005      	b.n	6020 <_svfprintf_r+0xb90>
    6014:	f10a 0a08 	add.w	sl, sl, #8
    6018:	3c10      	subs	r4, #16
    601a:	2c10      	cmp	r4, #16
    601c:	f340 8372 	ble.w	6704 <_svfprintf_r+0x1274>
    6020:	3301      	adds	r3, #1
    6022:	4970      	ldr	r1, [pc, #448]	; (61e4 <_svfprintf_r+0xd54>)
    6024:	3210      	adds	r2, #16
    6026:	2b07      	cmp	r3, #7
    6028:	e9ca 1500 	strd	r1, r5, [sl]
    602c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    6030:	ddf0      	ble.n	6014 <_svfprintf_r+0xb84>
    6032:	aa24      	add	r2, sp, #144	; 0x90
    6034:	4631      	mov	r1, r6
    6036:	4658      	mov	r0, fp
    6038:	f002 f932 	bl	82a0 <__ssprint_r>
    603c:	2800      	cmp	r0, #0
    603e:	f47f ae8c 	bne.w	5d5a <_svfprintf_r+0x8ca>
    6042:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    6046:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    604a:	e7e5      	b.n	6018 <_svfprintf_r+0xb88>
    604c:	2b30      	cmp	r3, #48	; 0x30
    604e:	f43f ad8b 	beq.w	5b68 <_svfprintf_r+0x6d8>
    6052:	2330      	movs	r3, #48	; 0x30
    6054:	3802      	subs	r0, #2
    6056:	f804 3c01 	strb.w	r3, [r4, #-1]
    605a:	ab50      	add	r3, sp, #320	; 0x140
    605c:	1a1b      	subs	r3, r3, r0
    605e:	f8dd 8008 	ldr.w	r8, [sp, #8]
    6062:	9305      	str	r3, [sp, #20]
    6064:	4604      	mov	r4, r0
    6066:	e584      	b.n	5b72 <_svfprintf_r+0x6e2>
    6068:	f018 0f01 	tst.w	r8, #1
    606c:	f47f ae82 	bne.w	5d74 <_svfprintf_r+0x8e4>
    6070:	9b25      	ldr	r3, [sp, #148]	; 0x94
    6072:	f8ca 4000 	str.w	r4, [sl]
    6076:	3301      	adds	r3, #1
    6078:	3201      	adds	r2, #1
    607a:	2101      	movs	r1, #1
    607c:	2b07      	cmp	r3, #7
    607e:	9226      	str	r2, [sp, #152]	; 0x98
    6080:	9325      	str	r3, [sp, #148]	; 0x94
    6082:	f8ca 1004 	str.w	r1, [sl, #4]
    6086:	f77f aea5 	ble.w	5dd4 <_svfprintf_r+0x944>
    608a:	ee1b 1a10 	vmov	r1, s22
    608e:	aa24      	add	r2, sp, #144	; 0x90
    6090:	4658      	mov	r0, fp
    6092:	f002 f905 	bl	82a0 <__ssprint_r>
    6096:	2800      	cmp	r0, #0
    6098:	f47f ae5f 	bne.w	5d5a <_svfprintf_r+0x8ca>
    609c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    60a0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    60a4:	e698      	b.n	5dd8 <_svfprintf_r+0x948>
    60a6:	990e      	ldr	r1, [sp, #56]	; 0x38
    60a8:	1e4c      	subs	r4, r1, #1
    60aa:	2c00      	cmp	r4, #0
    60ac:	f77f ae94 	ble.w	5dd8 <_svfprintf_r+0x948>
    60b0:	2c10      	cmp	r4, #16
    60b2:	f340 8361 	ble.w	6778 <_svfprintf_r+0x12e8>
    60b6:	ee1b 6a10 	vmov	r6, s22
    60ba:	2510      	movs	r5, #16
    60bc:	e005      	b.n	60ca <_svfprintf_r+0xc3a>
    60be:	f10a 0a08 	add.w	sl, sl, #8
    60c2:	3c10      	subs	r4, #16
    60c4:	2c10      	cmp	r4, #16
    60c6:	f340 8357 	ble.w	6778 <_svfprintf_r+0x12e8>
    60ca:	3301      	adds	r3, #1
    60cc:	4945      	ldr	r1, [pc, #276]	; (61e4 <_svfprintf_r+0xd54>)
    60ce:	3210      	adds	r2, #16
    60d0:	2b07      	cmp	r3, #7
    60d2:	e9ca 1500 	strd	r1, r5, [sl]
    60d6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    60da:	ddf0      	ble.n	60be <_svfprintf_r+0xc2e>
    60dc:	aa24      	add	r2, sp, #144	; 0x90
    60de:	4631      	mov	r1, r6
    60e0:	4658      	mov	r0, fp
    60e2:	f002 f8dd 	bl	82a0 <__ssprint_r>
    60e6:	2800      	cmp	r0, #0
    60e8:	f47f ae37 	bne.w	5d5a <_svfprintf_r+0x8ca>
    60ec:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    60f0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    60f4:	e7e5      	b.n	60c2 <_svfprintf_r+0xc32>
    60f6:	ee1b 1a10 	vmov	r1, s22
    60fa:	aa24      	add	r2, sp, #144	; 0x90
    60fc:	4658      	mov	r0, fp
    60fe:	f002 f8cf 	bl	82a0 <__ssprint_r>
    6102:	2800      	cmp	r0, #0
    6104:	f47f ae29 	bne.w	5d5a <_svfprintf_r+0x8ca>
    6108:	9a26      	ldr	r2, [sp, #152]	; 0x98
    610a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    610e:	f7ff bb44 	b.w	579a <_svfprintf_r+0x30a>
    6112:	9b02      	ldr	r3, [sp, #8]
    6114:	f013 0310 	ands.w	r3, r3, #16
    6118:	f040 80c1 	bne.w	629e <_svfprintf_r+0xe0e>
    611c:	9a02      	ldr	r2, [sp, #8]
    611e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    6122:	f000 837a 	beq.w	681a <_svfprintf_r+0x138a>
    6126:	9808      	ldr	r0, [sp, #32]
    6128:	f850 2b04 	ldr.w	r2, [r0], #4
    612c:	9008      	str	r0, [sp, #32]
    612e:	4619      	mov	r1, r3
    6130:	b292      	uxth	r2, r2
    6132:	2301      	movs	r3, #1
    6134:	e451      	b.n	59da <_svfprintf_r+0x54a>
    6136:	f018 0310 	ands.w	r3, r8, #16
    613a:	d155      	bne.n	61e8 <_svfprintf_r+0xd58>
    613c:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    6140:	f000 835d 	beq.w	67fe <_svfprintf_r+0x136e>
    6144:	9808      	ldr	r0, [sp, #32]
    6146:	f850 2b04 	ldr.w	r2, [r0], #4
    614a:	9008      	str	r0, [sp, #32]
    614c:	4619      	mov	r1, r3
    614e:	b292      	uxth	r2, r2
    6150:	e4a8      	b.n	5aa4 <_svfprintf_r+0x614>
    6152:	4252      	negs	r2, r2
    6154:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6158:	f8cd 8008 	str.w	r8, [sp, #8]
    615c:	202d      	movs	r0, #45	; 0x2d
    615e:	2301      	movs	r3, #1
    6160:	e43c      	b.n	59dc <_svfprintf_r+0x54c>
    6162:	ee1b 1a10 	vmov	r1, s22
    6166:	aa24      	add	r2, sp, #144	; 0x90
    6168:	4658      	mov	r0, fp
    616a:	f002 f899 	bl	82a0 <__ssprint_r>
    616e:	2800      	cmp	r0, #0
    6170:	f47f adf3 	bne.w	5d5a <_svfprintf_r+0x8ca>
    6174:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    6178:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    617c:	e616      	b.n	5dac <_svfprintf_r+0x91c>
    617e:	ee1b 1a10 	vmov	r1, s22
    6182:	aa24      	add	r2, sp, #144	; 0x90
    6184:	4658      	mov	r0, fp
    6186:	f002 f88b 	bl	82a0 <__ssprint_r>
    618a:	2800      	cmp	r0, #0
    618c:	f47f ade5 	bne.w	5d5a <_svfprintf_r+0x8ca>
    6190:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    6194:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6198:	e5fb      	b.n	5d92 <_svfprintf_r+0x902>
    619a:	f018 0f01 	tst.w	r8, #1
    619e:	f43f ab0f 	beq.w	57c0 <_svfprintf_r+0x330>
    61a2:	e52a      	b.n	5bfa <_svfprintf_r+0x76a>
    61a4:	9308      	str	r3, [sp, #32]
    61a6:	f899 3000 	ldrb.w	r3, [r9]
    61aa:	f7ff b9cd 	b.w	5548 <_svfprintf_r+0xb8>
    61ae:	ac50      	add	r4, sp, #320	; 0x140
    61b0:	e4df      	b.n	5b72 <_svfprintf_r+0x6e2>
    61b2:	f418 7f00 	tst.w	r8, #512	; 0x200
    61b6:	f040 83db 	bne.w	6970 <_svfprintf_r+0x14e0>
    61ba:	f853 2b04 	ldr.w	r2, [r3], #4
    61be:	9308      	str	r3, [sp, #32]
    61c0:	17d1      	asrs	r1, r2, #31
    61c2:	460b      	mov	r3, r1
    61c4:	f7ff bbb6 	b.w	5934 <_svfprintf_r+0x4a4>
    61c8:	9b08      	ldr	r3, [sp, #32]
    61ca:	9804      	ldr	r0, [sp, #16]
    61cc:	f853 1b04 	ldr.w	r1, [r3], #4
    61d0:	9308      	str	r3, [sp, #32]
    61d2:	17c2      	asrs	r2, r0, #31
    61d4:	e9c1 0200 	strd	r0, r2, [r1]
    61d8:	464c      	mov	r4, r9
    61da:	f7ff b98b 	b.w	54f4 <_svfprintf_r+0x64>
    61de:	bf00      	nop
    61e0:	200007f0 	.word	0x200007f0
    61e4:	20000d88 	.word	0x20000d88
    61e8:	9b08      	ldr	r3, [sp, #32]
    61ea:	f853 2b04 	ldr.w	r2, [r3], #4
    61ee:	9308      	str	r3, [sp, #32]
    61f0:	e458      	b.n	5aa4 <_svfprintf_r+0x614>
    61f2:	eeb4 8b48 	vcmp.f64	d8, d8
    61f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    61fa:	f180 8694 	bvs.w	6f26 <_svfprintf_r+0x1a96>
    61fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6200:	2b61      	cmp	r3, #97	; 0x61
    6202:	f000 8552 	beq.w	6caa <_svfprintf_r+0x181a>
    6206:	2b41      	cmp	r3, #65	; 0x41
    6208:	f000 85c0 	beq.w	6d8c <_svfprintf_r+0x18fc>
    620c:	9b03      	ldr	r3, [sp, #12]
    620e:	3301      	adds	r3, #1
    6210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6212:	f023 0520 	bic.w	r5, r3, #32
    6216:	f000 8480 	beq.w	6b1a <_svfprintf_r+0x168a>
    621a:	2d47      	cmp	r5, #71	; 0x47
    621c:	d104      	bne.n	6228 <_svfprintf_r+0xd98>
    621e:	9b03      	ldr	r3, [sp, #12]
    6220:	2b00      	cmp	r3, #0
    6222:	bf08      	it	eq
    6224:	2301      	moveq	r3, #1
    6226:	9303      	str	r3, [sp, #12]
    6228:	ee18 3a90 	vmov	r3, s17
    622c:	2b00      	cmp	r3, #0
    622e:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    6232:	4646      	mov	r6, r8
    6234:	f2c0 8618 	blt.w	6e68 <_svfprintf_r+0x19d8>
    6238:	eeb0 ab48 	vmov.f64	d10, d8
    623c:	2300      	movs	r3, #0
    623e:	4690      	mov	r8, r2
    6240:	9309      	str	r3, [sp, #36]	; 0x24
    6242:	9307      	str	r3, [sp, #28]
    6244:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6246:	3b41      	subs	r3, #65	; 0x41
    6248:	2b25      	cmp	r3, #37	; 0x25
    624a:	f200 8398 	bhi.w	697e <_svfprintf_r+0x14ee>
    624e:	e8df f013 	tbh	[pc, r3, lsl #1]
    6252:	046f      	.short	0x046f
    6254:	03960396 	.word	0x03960396
    6258:	04680396 	.word	0x04680396
    625c:	0396046c 	.word	0x0396046c
    6260:	03960396 	.word	0x03960396
    6264:	03960396 	.word	0x03960396
    6268:	03960396 	.word	0x03960396
    626c:	03960396 	.word	0x03960396
    6270:	03960396 	.word	0x03960396
    6274:	03960396 	.word	0x03960396
    6278:	03960396 	.word	0x03960396
    627c:	03960396 	.word	0x03960396
    6280:	03960396 	.word	0x03960396
    6284:	03960396 	.word	0x03960396
    6288:	03960396 	.word	0x03960396
    628c:	03960396 	.word	0x03960396
    6290:	03960396 	.word	0x03960396
    6294:	03960396 	.word	0x03960396
    6298:	04680396 	.word	0x04680396
    629c:	046c      	.short	0x046c
    629e:	9b08      	ldr	r3, [sp, #32]
    62a0:	f853 2b04 	ldr.w	r2, [r3], #4
    62a4:	9308      	str	r3, [sp, #32]
    62a6:	2301      	movs	r3, #1
    62a8:	f7ff bb97 	b.w	59da <_svfprintf_r+0x54a>
    62ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    62ae:	2b00      	cmp	r3, #0
    62b0:	f43f a9cf 	beq.w	5652 <_svfprintf_r+0x1c2>
    62b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    62b6:	781b      	ldrb	r3, [r3, #0]
    62b8:	2b00      	cmp	r3, #0
    62ba:	f43f a9ca 	beq.w	5652 <_svfprintf_r+0x1c2>
    62be:	f899 3000 	ldrb.w	r3, [r9]
    62c2:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    62c6:	f7ff b93f 	b.w	5548 <_svfprintf_r+0xb8>
    62ca:	930b      	str	r3, [sp, #44]	; 0x2c
    62cc:	f8cd 8008 	str.w	r8, [sp, #8]
    62d0:	f7ff bbf1 	b.w	5ab6 <_svfprintf_r+0x626>
    62d4:	930b      	str	r3, [sp, #44]	; 0x2c
    62d6:	4b9a      	ldr	r3, [pc, #616]	; (6540 <_svfprintf_r+0x10b0>)
    62d8:	9311      	str	r3, [sp, #68]	; 0x44
    62da:	f018 0120 	ands.w	r1, r8, #32
    62de:	f000 8105 	beq.w	64ec <_svfprintf_r+0x105c>
    62e2:	9b08      	ldr	r3, [sp, #32]
    62e4:	3307      	adds	r3, #7
    62e6:	f023 0307 	bic.w	r3, r3, #7
    62ea:	6859      	ldr	r1, [r3, #4]
    62ec:	f853 2b08 	ldr.w	r2, [r3], #8
    62f0:	9308      	str	r3, [sp, #32]
    62f2:	f018 0f01 	tst.w	r8, #1
    62f6:	d00a      	beq.n	630e <_svfprintf_r+0xe7e>
    62f8:	ea52 0301 	orrs.w	r3, r2, r1
    62fc:	d007      	beq.n	630e <_svfprintf_r+0xe7e>
    62fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6300:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    6304:	2330      	movs	r3, #48	; 0x30
    6306:	f048 0802 	orr.w	r8, r8, #2
    630a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    630e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    6312:	9302      	str	r3, [sp, #8]
    6314:	2302      	movs	r3, #2
    6316:	f7ff bb60 	b.w	59da <_svfprintf_r+0x54a>
    631a:	930b      	str	r3, [sp, #44]	; 0x2c
    631c:	f7ff bbb6 	b.w	5a8c <_svfprintf_r+0x5fc>
    6320:	930b      	str	r3, [sp, #44]	; 0x2c
    6322:	4b88      	ldr	r3, [pc, #544]	; (6544 <_svfprintf_r+0x10b4>)
    6324:	9311      	str	r3, [sp, #68]	; 0x44
    6326:	e7d8      	b.n	62da <_svfprintf_r+0xe4a>
    6328:	9b08      	ldr	r3, [sp, #32]
    632a:	2101      	movs	r1, #1
    632c:	f853 2b04 	ldr.w	r2, [r3], #4
    6330:	9102      	str	r1, [sp, #8]
    6332:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
    6336:	9308      	str	r3, [sp, #32]
    6338:	9105      	str	r1, [sp, #20]
    633a:	ac37      	add	r4, sp, #220	; 0xdc
    633c:	f7ff baaf 	b.w	589e <_svfprintf_r+0x40e>
    6340:	ee1b 1a10 	vmov	r1, s22
    6344:	aa24      	add	r2, sp, #144	; 0x90
    6346:	4658      	mov	r0, fp
    6348:	f001 ffaa 	bl	82a0 <__ssprint_r>
    634c:	2800      	cmp	r0, #0
    634e:	f47f ad04 	bne.w	5d5a <_svfprintf_r+0x8ca>
    6352:	9a26      	ldr	r2, [sp, #152]	; 0x98
    6354:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6358:	e45d      	b.n	5c16 <_svfprintf_r+0x786>
    635a:	9b03      	ldr	r3, [sp, #12]
    635c:	9407      	str	r4, [sp, #28]
    635e:	2b06      	cmp	r3, #6
    6360:	4622      	mov	r2, r4
    6362:	bf28      	it	cs
    6364:	2306      	movcs	r3, #6
    6366:	9403      	str	r4, [sp, #12]
    6368:	4621      	mov	r1, r4
    636a:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
    636e:	4c76      	ldr	r4, [pc, #472]	; (6548 <_svfprintf_r+0x10b8>)
    6370:	9302      	str	r3, [sp, #8]
    6372:	9305      	str	r3, [sp, #20]
    6374:	920f      	str	r2, [sp, #60]	; 0x3c
    6376:	f7ff ba6c 	b.w	5852 <_svfprintf_r+0x3c2>
    637a:	2140      	movs	r1, #64	; 0x40
    637c:	4658      	mov	r0, fp
    637e:	f7fd fa53 	bl	3828 <_malloc_r>
    6382:	6020      	str	r0, [r4, #0]
    6384:	6120      	str	r0, [r4, #16]
    6386:	2800      	cmp	r0, #0
    6388:	f000 860f 	beq.w	6faa <_svfprintf_r+0x1b1a>
    638c:	2340      	movs	r3, #64	; 0x40
    638e:	6163      	str	r3, [r4, #20]
    6390:	f7ff b89e 	b.w	54d0 <_svfprintf_r+0x40>
    6394:	2d10      	cmp	r5, #16
    6396:	9b25      	ldr	r3, [sp, #148]	; 0x94
    6398:	f340 825d 	ble.w	6856 <_svfprintf_r+0x13c6>
    639c:	4651      	mov	r1, sl
    639e:	2610      	movs	r6, #16
    63a0:	ee1b aa10 	vmov	sl, s22
    63a4:	e004      	b.n	63b0 <_svfprintf_r+0xf20>
    63a6:	3108      	adds	r1, #8
    63a8:	3d10      	subs	r5, #16
    63aa:	2d10      	cmp	r5, #16
    63ac:	f340 8252 	ble.w	6854 <_svfprintf_r+0x13c4>
    63b0:	3301      	adds	r3, #1
    63b2:	4866      	ldr	r0, [pc, #408]	; (654c <_svfprintf_r+0x10bc>)
    63b4:	3210      	adds	r2, #16
    63b6:	2b07      	cmp	r3, #7
    63b8:	e9c1 0600 	strd	r0, r6, [r1]
    63bc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    63c0:	ddf1      	ble.n	63a6 <_svfprintf_r+0xf16>
    63c2:	aa24      	add	r2, sp, #144	; 0x90
    63c4:	4651      	mov	r1, sl
    63c6:	4658      	mov	r0, fp
    63c8:	f001 ff6a 	bl	82a0 <__ssprint_r>
    63cc:	2800      	cmp	r0, #0
    63ce:	f47f acc4 	bne.w	5d5a <_svfprintf_r+0x8ca>
    63d2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    63d6:	a927      	add	r1, sp, #156	; 0x9c
    63d8:	e7e6      	b.n	63a8 <_svfprintf_r+0xf18>
    63da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    63dc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    63e0:	18e3      	adds	r3, r4, r3
    63e2:	9303      	str	r3, [sp, #12]
    63e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    63e6:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    63ea:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    63ec:	9d05      	ldr	r5, [sp, #20]
    63ee:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    63f2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    63f6:	940b      	str	r4, [sp, #44]	; 0x2c
    63f8:	ee1b 1a10 	vmov	r1, s22
    63fc:	4650      	mov	r0, sl
    63fe:	2b00      	cmp	r3, #0
    6400:	d034      	beq.n	646c <_svfprintf_r+0xfdc>
    6402:	f1b8 0f00 	cmp.w	r8, #0
    6406:	d135      	bne.n	6474 <_svfprintf_r+0xfe4>
    6408:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    640a:	3b01      	subs	r3, #1
    640c:	3e01      	subs	r6, #1
    640e:	930d      	str	r3, [sp, #52]	; 0x34
    6410:	9b15      	ldr	r3, [sp, #84]	; 0x54
    6412:	e9c0 3900 	strd	r3, r9, [r0]
    6416:	9b25      	ldr	r3, [sp, #148]	; 0x94
    6418:	3301      	adds	r3, #1
    641a:	444a      	add	r2, r9
    641c:	2b07      	cmp	r3, #7
    641e:	9226      	str	r2, [sp, #152]	; 0x98
    6420:	9325      	str	r3, [sp, #148]	; 0x94
    6422:	dc6c      	bgt.n	64fe <_svfprintf_r+0x106e>
    6424:	3008      	adds	r0, #8
    6426:	9b03      	ldr	r3, [sp, #12]
    6428:	f896 c000 	ldrb.w	ip, [r6]
    642c:	1b5b      	subs	r3, r3, r5
    642e:	4563      	cmp	r3, ip
    6430:	bfa8      	it	ge
    6432:	4663      	movge	r3, ip
    6434:	2b00      	cmp	r3, #0
    6436:	469a      	mov	sl, r3
    6438:	dd0c      	ble.n	6454 <_svfprintf_r+0xfc4>
    643a:	9c25      	ldr	r4, [sp, #148]	; 0x94
    643c:	3401      	adds	r4, #1
    643e:	441a      	add	r2, r3
    6440:	2c07      	cmp	r4, #7
    6442:	e9c0 5300 	strd	r5, r3, [r0]
    6446:	9226      	str	r2, [sp, #152]	; 0x98
    6448:	9425      	str	r4, [sp, #148]	; 0x94
    644a:	f300 8177 	bgt.w	673c <_svfprintf_r+0x12ac>
    644e:	f896 c000 	ldrb.w	ip, [r6]
    6452:	3008      	adds	r0, #8
    6454:	f1ba 0f00 	cmp.w	sl, #0
    6458:	bfac      	ite	ge
    645a:	ebac 040a 	subge.w	r4, ip, sl
    645e:	4664      	movlt	r4, ip
    6460:	2c00      	cmp	r4, #0
    6462:	dc0a      	bgt.n	647a <_svfprintf_r+0xfea>
    6464:	4465      	add	r5, ip
    6466:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6468:	2b00      	cmp	r3, #0
    646a:	d1ca      	bne.n	6402 <_svfprintf_r+0xf72>
    646c:	f1b8 0f00 	cmp.w	r8, #0
    6470:	f000 83ac 	beq.w	6bcc <_svfprintf_r+0x173c>
    6474:	f108 38ff 	add.w	r8, r8, #4294967295
    6478:	e7ca      	b.n	6410 <_svfprintf_r+0xf80>
    647a:	2c10      	cmp	r4, #16
    647c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
    6480:	dd24      	ble.n	64cc <_svfprintf_r+0x103c>
    6482:	9505      	str	r5, [sp, #20]
    6484:	f04f 0a10 	mov.w	sl, #16
    6488:	4663      	mov	r3, ip
    648a:	460d      	mov	r5, r1
    648c:	e004      	b.n	6498 <_svfprintf_r+0x1008>
    648e:	3c10      	subs	r4, #16
    6490:	2c10      	cmp	r4, #16
    6492:	f100 0008 	add.w	r0, r0, #8
    6496:	dd16      	ble.n	64c6 <_svfprintf_r+0x1036>
    6498:	3301      	adds	r3, #1
    649a:	492c      	ldr	r1, [pc, #176]	; (654c <_svfprintf_r+0x10bc>)
    649c:	3210      	adds	r2, #16
    649e:	2b07      	cmp	r3, #7
    64a0:	e9c0 1a00 	strd	r1, sl, [r0]
    64a4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    64a8:	ddf1      	ble.n	648e <_svfprintf_r+0xffe>
    64aa:	aa24      	add	r2, sp, #144	; 0x90
    64ac:	4629      	mov	r1, r5
    64ae:	4658      	mov	r0, fp
    64b0:	f001 fef6 	bl	82a0 <__ssprint_r>
    64b4:	2800      	cmp	r0, #0
    64b6:	f47f ac50 	bne.w	5d5a <_svfprintf_r+0x8ca>
    64ba:	3c10      	subs	r4, #16
    64bc:	2c10      	cmp	r4, #16
    64be:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    64c2:	a827      	add	r0, sp, #156	; 0x9c
    64c4:	dce8      	bgt.n	6498 <_svfprintf_r+0x1008>
    64c6:	4629      	mov	r1, r5
    64c8:	9d05      	ldr	r5, [sp, #20]
    64ca:	469c      	mov	ip, r3
    64cc:	f10c 0301 	add.w	r3, ip, #1
    64d0:	4422      	add	r2, r4
    64d2:	6044      	str	r4, [r0, #4]
    64d4:	2b07      	cmp	r3, #7
    64d6:	4c1d      	ldr	r4, [pc, #116]	; (654c <_svfprintf_r+0x10bc>)
    64d8:	6004      	str	r4, [r0, #0]
    64da:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    64de:	f300 83c6 	bgt.w	6c6e <_svfprintf_r+0x17de>
    64e2:	f896 c000 	ldrb.w	ip, [r6]
    64e6:	3008      	adds	r0, #8
    64e8:	4465      	add	r5, ip
    64ea:	e7bc      	b.n	6466 <_svfprintf_r+0xfd6>
    64ec:	f018 0310 	ands.w	r3, r8, #16
    64f0:	f000 80c2 	beq.w	6678 <_svfprintf_r+0x11e8>
    64f4:	9b08      	ldr	r3, [sp, #32]
    64f6:	f853 2b04 	ldr.w	r2, [r3], #4
    64fa:	9308      	str	r3, [sp, #32]
    64fc:	e6f9      	b.n	62f2 <_svfprintf_r+0xe62>
    64fe:	aa24      	add	r2, sp, #144	; 0x90
    6500:	4658      	mov	r0, fp
    6502:	9105      	str	r1, [sp, #20]
    6504:	f001 fecc 	bl	82a0 <__ssprint_r>
    6508:	2800      	cmp	r0, #0
    650a:	f47f ac26 	bne.w	5d5a <_svfprintf_r+0x8ca>
    650e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    6510:	9905      	ldr	r1, [sp, #20]
    6512:	a827      	add	r0, sp, #156	; 0x9c
    6514:	e787      	b.n	6426 <_svfprintf_r+0xf96>
    6516:	9802      	ldr	r0, [sp, #8]
    6518:	f8cd a01c 	str.w	sl, [sp, #28]
    651c:	ac50      	add	r4, sp, #320	; 0x140
    651e:	f400 6080 	and.w	r0, r0, #1024	; 0x400
    6522:	2500      	movs	r5, #0
    6524:	ee0a ba10 	vmov	s20, fp
    6528:	4b09      	ldr	r3, [pc, #36]	; (6550 <_svfprintf_r+0x10c0>)
    652a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    652e:	f8cd 9014 	str.w	r9, [sp, #20]
    6532:	46a3      	mov	fp, r4
    6534:	f04f 0805 	mov.w	r8, #5
    6538:	46ac      	mov	ip, r5
    653a:	4604      	mov	r4, r0
    653c:	e010      	b.n	6560 <_svfprintf_r+0x10d0>
    653e:	bf00      	nop
    6540:	200007bc 	.word	0x200007bc
    6544:	200007d0 	.word	0x200007d0
    6548:	200007e4 	.word	0x200007e4
    654c:	20000d88 	.word	0x20000d88
    6550:	cccccccd 	.word	0xcccccccd
    6554:	2a0a      	cmp	r2, #10
    6556:	f171 0100 	sbcs.w	r1, r1, #0
    655a:	d336      	bcc.n	65ca <_svfprintf_r+0x113a>
    655c:	464a      	mov	r2, r9
    655e:	4631      	mov	r1, r6
    6560:	1850      	adds	r0, r2, r1
    6562:	f140 0000 	adc.w	r0, r0, #0
    6566:	fba3 5600 	umull	r5, r6, r3, r0
    656a:	f026 0503 	bic.w	r5, r6, #3
    656e:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    6572:	1b40      	subs	r0, r0, r5
    6574:	1a15      	subs	r5, r2, r0
    6576:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
    657a:	f161 0e00 	sbc.w	lr, r1, #0
    657e:	fb06 f605 	mul.w	r6, r6, r5
    6582:	fba5 9503 	umull	r9, r5, r5, r3
    6586:	fb03 660e 	mla	r6, r3, lr, r6
    658a:	f009 0e01 	and.w	lr, r9, #1
    658e:	442e      	add	r6, r5
    6590:	fbae 5e08 	umull	r5, lr, lr, r8
    6594:	182d      	adds	r5, r5, r0
    6596:	ea4f 0959 	mov.w	r9, r9, lsr #1
    659a:	3530      	adds	r5, #48	; 0x30
    659c:	f80b 5c01 	strb.w	r5, [fp, #-1]
    65a0:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
    65a4:	f10c 0c01 	add.w	ip, ip, #1
    65a8:	f10b 3bff 	add.w	fp, fp, #4294967295
    65ac:	0876      	lsrs	r6, r6, #1
    65ae:	2c00      	cmp	r4, #0
    65b0:	d0d0      	beq.n	6554 <_svfprintf_r+0x10c4>
    65b2:	f89a 0000 	ldrb.w	r0, [sl]
    65b6:	4584      	cmp	ip, r0
    65b8:	d1cc      	bne.n	6554 <_svfprintf_r+0x10c4>
    65ba:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    65be:	d0c9      	beq.n	6554 <_svfprintf_r+0x10c4>
    65c0:	2a0a      	cmp	r2, #10
    65c2:	f171 0100 	sbcs.w	r1, r1, #0
    65c6:	f080 818f 	bcs.w	68e8 <_svfprintf_r+0x1458>
    65ca:	465c      	mov	r4, fp
    65cc:	ab50      	add	r3, sp, #320	; 0x140
    65ce:	1b1b      	subs	r3, r3, r4
    65d0:	f8dd 9014 	ldr.w	r9, [sp, #20]
    65d4:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    65d8:	ee1a ba10 	vmov	fp, s20
    65dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
    65e0:	f8dd 8008 	ldr.w	r8, [sp, #8]
    65e4:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    65e8:	9305      	str	r3, [sp, #20]
    65ea:	f7ff bac2 	b.w	5b72 <_svfprintf_r+0x6e2>
    65ee:	ee1b 1a10 	vmov	r1, s22
    65f2:	aa24      	add	r2, sp, #144	; 0x90
    65f4:	4658      	mov	r0, fp
    65f6:	f001 fe53 	bl	82a0 <__ssprint_r>
    65fa:	2800      	cmp	r0, #0
    65fc:	f47f abad 	bne.w	5d5a <_svfprintf_r+0x8ca>
    6600:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    6604:	9a26      	ldr	r2, [sp, #152]	; 0x98
    6606:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    660a:	f7ff b896 	b.w	573a <_svfprintf_r+0x2aa>
    660e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    6610:	48be      	ldr	r0, [pc, #760]	; (690c <_svfprintf_r+0x147c>)
    6612:	f8ca 0000 	str.w	r0, [sl]
    6616:	3301      	adds	r3, #1
    6618:	3201      	adds	r2, #1
    661a:	2001      	movs	r0, #1
    661c:	2b07      	cmp	r3, #7
    661e:	9226      	str	r2, [sp, #152]	; 0x98
    6620:	9325      	str	r3, [sp, #148]	; 0x94
    6622:	f8ca 0004 	str.w	r0, [sl, #4]
    6626:	f300 8177 	bgt.w	6918 <_svfprintf_r+0x1488>
    662a:	f10a 0a08 	add.w	sl, sl, #8
    662e:	2900      	cmp	r1, #0
    6630:	f040 80af 	bne.w	6792 <_svfprintf_r+0x1302>
    6634:	990e      	ldr	r1, [sp, #56]	; 0x38
    6636:	f008 0301 	and.w	r3, r8, #1
    663a:	430b      	orrs	r3, r1
    663c:	f43f a8c0 	beq.w	57c0 <_svfprintf_r+0x330>
    6640:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6642:	9912      	ldr	r1, [sp, #72]	; 0x48
    6644:	441a      	add	r2, r3
    6646:	e9ca 1300 	strd	r1, r3, [sl]
    664a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    664c:	9226      	str	r2, [sp, #152]	; 0x98
    664e:	3301      	adds	r3, #1
    6650:	2b07      	cmp	r3, #7
    6652:	9325      	str	r3, [sp, #148]	; 0x94
    6654:	f300 8252 	bgt.w	6afc <_svfprintf_r+0x166c>
    6658:	f10a 0a08 	add.w	sl, sl, #8
    665c:	990e      	ldr	r1, [sp, #56]	; 0x38
    665e:	f8ca 4000 	str.w	r4, [sl]
    6662:	3301      	adds	r3, #1
    6664:	440a      	add	r2, r1
    6666:	2b07      	cmp	r3, #7
    6668:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    666c:	f8ca 1004 	str.w	r1, [sl, #4]
    6670:	f77f a8a4 	ble.w	57bc <_svfprintf_r+0x32c>
    6674:	f7ff bbbd 	b.w	5df2 <_svfprintf_r+0x962>
    6678:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    667c:	f000 80dd 	beq.w	683a <_svfprintf_r+0x13aa>
    6680:	9808      	ldr	r0, [sp, #32]
    6682:	f850 2b04 	ldr.w	r2, [r0], #4
    6686:	9008      	str	r0, [sp, #32]
    6688:	4619      	mov	r1, r3
    668a:	b292      	uxth	r2, r2
    668c:	e631      	b.n	62f2 <_svfprintf_r+0xe62>
    668e:	ee1b 1a10 	vmov	r1, s22
    6692:	aa24      	add	r2, sp, #144	; 0x90
    6694:	4658      	mov	r0, fp
    6696:	f001 fe03 	bl	82a0 <__ssprint_r>
    669a:	2800      	cmp	r0, #0
    669c:	f47f ab5d 	bne.w	5d5a <_svfprintf_r+0x8ca>
    66a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    66a2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    66a6:	f7ff baa3 	b.w	5bf0 <_svfprintf_r+0x760>
    66aa:	ae22      	add	r6, sp, #136	; 0x88
    66ac:	2208      	movs	r2, #8
    66ae:	2100      	movs	r1, #0
    66b0:	4630      	mov	r0, r6
    66b2:	941d      	str	r4, [sp, #116]	; 0x74
    66b4:	f7fd ff7e 	bl	45b4 <memset>
    66b8:	9b03      	ldr	r3, [sp, #12]
    66ba:	1c5a      	adds	r2, r3, #1
    66bc:	f000 80db 	beq.w	6876 <_svfprintf_r+0x13e6>
    66c0:	2500      	movs	r5, #0
    66c2:	f8cd 9008 	str.w	r9, [sp, #8]
    66c6:	f8cd 801c 	str.w	r8, [sp, #28]
    66ca:	4699      	mov	r9, r3
    66cc:	46a8      	mov	r8, r5
    66ce:	e00c      	b.n	66ea <_svfprintf_r+0x125a>
    66d0:	a937      	add	r1, sp, #220	; 0xdc
    66d2:	4658      	mov	r0, fp
    66d4:	f001 fd9e 	bl	8214 <_wcrtomb_r>
    66d8:	1c43      	adds	r3, r0, #1
    66da:	4440      	add	r0, r8
    66dc:	f000 83c8 	beq.w	6e70 <_svfprintf_r+0x19e0>
    66e0:	4548      	cmp	r0, r9
    66e2:	dc08      	bgt.n	66f6 <_svfprintf_r+0x1266>
    66e4:	f000 8418 	beq.w	6f18 <_svfprintf_r+0x1a88>
    66e8:	4680      	mov	r8, r0
    66ea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    66ec:	5952      	ldr	r2, [r2, r5]
    66ee:	4633      	mov	r3, r6
    66f0:	3504      	adds	r5, #4
    66f2:	2a00      	cmp	r2, #0
    66f4:	d1ec      	bne.n	66d0 <_svfprintf_r+0x1240>
    66f6:	f8cd 8014 	str.w	r8, [sp, #20]
    66fa:	f8dd 9008 	ldr.w	r9, [sp, #8]
    66fe:	f8dd 801c 	ldr.w	r8, [sp, #28]
    6702:	e0c5      	b.n	6890 <_svfprintf_r+0x1400>
    6704:	3301      	adds	r3, #1
    6706:	4982      	ldr	r1, [pc, #520]	; (6910 <_svfprintf_r+0x1480>)
    6708:	f8ca 4004 	str.w	r4, [sl, #4]
    670c:	4422      	add	r2, r4
    670e:	2b07      	cmp	r3, #7
    6710:	f8ca 1000 	str.w	r1, [sl]
    6714:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    6718:	f77f a850 	ble.w	57bc <_svfprintf_r+0x32c>
    671c:	f7ff bb69 	b.w	5df2 <_svfprintf_r+0x962>
    6720:	ee1b 1a10 	vmov	r1, s22
    6724:	aa24      	add	r2, sp, #144	; 0x90
    6726:	4658      	mov	r0, fp
    6728:	f001 fdba 	bl	82a0 <__ssprint_r>
    672c:	2800      	cmp	r0, #0
    672e:	f47f ab14 	bne.w	5d5a <_svfprintf_r+0x8ca>
    6732:	9a26      	ldr	r2, [sp, #152]	; 0x98
    6734:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6738:	f7ff b829 	b.w	578e <_svfprintf_r+0x2fe>
    673c:	aa24      	add	r2, sp, #144	; 0x90
    673e:	4658      	mov	r0, fp
    6740:	9105      	str	r1, [sp, #20]
    6742:	f001 fdad 	bl	82a0 <__ssprint_r>
    6746:	2800      	cmp	r0, #0
    6748:	f47f ab07 	bne.w	5d5a <_svfprintf_r+0x8ca>
    674c:	f896 c000 	ldrb.w	ip, [r6]
    6750:	9a26      	ldr	r2, [sp, #152]	; 0x98
    6752:	9905      	ldr	r1, [sp, #20]
    6754:	a827      	add	r0, sp, #156	; 0x9c
    6756:	e67d      	b.n	6454 <_svfprintf_r+0xfc4>
    6758:	2b01      	cmp	r3, #1
    675a:	f8cd 8008 	str.w	r8, [sp, #8]
    675e:	f47f a9f3 	bne.w	5b48 <_svfprintf_r+0x6b8>
    6762:	f7ff bb93 	b.w	5e8c <_svfprintf_r+0x9fc>
    6766:	9b08      	ldr	r3, [sp, #32]
    6768:	9904      	ldr	r1, [sp, #16]
    676a:	f853 2b04 	ldr.w	r2, [r3], #4
    676e:	464c      	mov	r4, r9
    6770:	6011      	str	r1, [r2, #0]
    6772:	9308      	str	r3, [sp, #32]
    6774:	f7fe bebe 	b.w	54f4 <_svfprintf_r+0x64>
    6778:	3301      	adds	r3, #1
    677a:	4965      	ldr	r1, [pc, #404]	; (6910 <_svfprintf_r+0x1480>)
    677c:	f8ca 4004 	str.w	r4, [sl, #4]
    6780:	4422      	add	r2, r4
    6782:	2b07      	cmp	r3, #7
    6784:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    6788:	f8ca 1000 	str.w	r1, [sl]
    678c:	f77f ab22 	ble.w	5dd4 <_svfprintf_r+0x944>
    6790:	e47b      	b.n	608a <_svfprintf_r+0xbfa>
    6792:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6794:	9812      	ldr	r0, [sp, #72]	; 0x48
    6796:	441a      	add	r2, r3
    6798:	e9ca 0300 	strd	r0, r3, [sl]
    679c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    679e:	9226      	str	r2, [sp, #152]	; 0x98
    67a0:	3301      	adds	r3, #1
    67a2:	2b07      	cmp	r3, #7
    67a4:	9325      	str	r3, [sp, #148]	; 0x94
    67a6:	f300 81a9 	bgt.w	6afc <_svfprintf_r+0x166c>
    67aa:	f10a 0a08 	add.w	sl, sl, #8
    67ae:	2900      	cmp	r1, #0
    67b0:	f6bf af54 	bge.w	665c <_svfprintf_r+0x11cc>
    67b4:	424d      	negs	r5, r1
    67b6:	3110      	adds	r1, #16
    67b8:	f280 830f 	bge.w	6dda <_svfprintf_r+0x194a>
    67bc:	ee1b 1a10 	vmov	r1, s22
    67c0:	2610      	movs	r6, #16
    67c2:	e005      	b.n	67d0 <_svfprintf_r+0x1340>
    67c4:	f10a 0a08 	add.w	sl, sl, #8
    67c8:	3d10      	subs	r5, #16
    67ca:	2d10      	cmp	r5, #16
    67cc:	f340 8305 	ble.w	6dda <_svfprintf_r+0x194a>
    67d0:	3301      	adds	r3, #1
    67d2:	484f      	ldr	r0, [pc, #316]	; (6910 <_svfprintf_r+0x1480>)
    67d4:	3210      	adds	r2, #16
    67d6:	2b07      	cmp	r3, #7
    67d8:	e9ca 0600 	strd	r0, r6, [sl]
    67dc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    67e0:	ddf0      	ble.n	67c4 <_svfprintf_r+0x1334>
    67e2:	aa24      	add	r2, sp, #144	; 0x90
    67e4:	4658      	mov	r0, fp
    67e6:	9103      	str	r1, [sp, #12]
    67e8:	f001 fd5a 	bl	82a0 <__ssprint_r>
    67ec:	2800      	cmp	r0, #0
    67ee:	f47f aab4 	bne.w	5d5a <_svfprintf_r+0x8ca>
    67f2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    67f6:	9903      	ldr	r1, [sp, #12]
    67f8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    67fc:	e7e4      	b.n	67c8 <_svfprintf_r+0x1338>
    67fe:	9b08      	ldr	r3, [sp, #32]
    6800:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    6804:	bf1a      	itte	ne
    6806:	4611      	movne	r1, r2
    6808:	f853 2b04 	ldrne.w	r2, [r3], #4
    680c:	f853 2b04 	ldreq.w	r2, [r3], #4
    6810:	9308      	str	r3, [sp, #32]
    6812:	bf18      	it	ne
    6814:	b2d2      	uxtbne	r2, r2
    6816:	f7ff b945 	b.w	5aa4 <_svfprintf_r+0x614>
    681a:	9b02      	ldr	r3, [sp, #8]
    681c:	f413 7100 	ands.w	r1, r3, #512	; 0x200
    6820:	9b08      	ldr	r3, [sp, #32]
    6822:	bf1a      	itte	ne
    6824:	4611      	movne	r1, r2
    6826:	f853 2b04 	ldrne.w	r2, [r3], #4
    682a:	f853 2b04 	ldreq.w	r2, [r3], #4
    682e:	9308      	str	r3, [sp, #32]
    6830:	bf18      	it	ne
    6832:	b2d2      	uxtbne	r2, r2
    6834:	2301      	movs	r3, #1
    6836:	f7ff b8d0 	b.w	59da <_svfprintf_r+0x54a>
    683a:	9b08      	ldr	r3, [sp, #32]
    683c:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    6840:	bf1a      	itte	ne
    6842:	4611      	movne	r1, r2
    6844:	f853 2b04 	ldrne.w	r2, [r3], #4
    6848:	f853 2b04 	ldreq.w	r2, [r3], #4
    684c:	9308      	str	r3, [sp, #32]
    684e:	bf18      	it	ne
    6850:	b2d2      	uxtbne	r2, r2
    6852:	e54e      	b.n	62f2 <_svfprintf_r+0xe62>
    6854:	468a      	mov	sl, r1
    6856:	3301      	adds	r3, #1
    6858:	492d      	ldr	r1, [pc, #180]	; (6910 <_svfprintf_r+0x1480>)
    685a:	f8ca 5004 	str.w	r5, [sl, #4]
    685e:	442a      	add	r2, r5
    6860:	2b07      	cmp	r3, #7
    6862:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    6866:	f8ca 1000 	str.w	r1, [sl]
    686a:	f300 8139 	bgt.w	6ae0 <_svfprintf_r+0x1650>
    686e:	f10a 0a08 	add.w	sl, sl, #8
    6872:	f7ff bb8c 	b.w	5f8e <_svfprintf_r+0xafe>
    6876:	2300      	movs	r3, #0
    6878:	4619      	mov	r1, r3
    687a:	9600      	str	r6, [sp, #0]
    687c:	aa1d      	add	r2, sp, #116	; 0x74
    687e:	4658      	mov	r0, fp
    6880:	f001 fcee 	bl	8260 <_wcsrtombs_r>
    6884:	4603      	mov	r3, r0
    6886:	3301      	adds	r3, #1
    6888:	9005      	str	r0, [sp, #20]
    688a:	f000 82f1 	beq.w	6e70 <_svfprintf_r+0x19e0>
    688e:	941d      	str	r4, [sp, #116]	; 0x74
    6890:	9b05      	ldr	r3, [sp, #20]
    6892:	2b00      	cmp	r3, #0
    6894:	d04e      	beq.n	6934 <_svfprintf_r+0x14a4>
    6896:	2b63      	cmp	r3, #99	; 0x63
    6898:	f300 8118 	bgt.w	6acc <_svfprintf_r+0x163c>
    689c:	2300      	movs	r3, #0
    689e:	9307      	str	r3, [sp, #28]
    68a0:	ac37      	add	r4, sp, #220	; 0xdc
    68a2:	2208      	movs	r2, #8
    68a4:	2100      	movs	r1, #0
    68a6:	4630      	mov	r0, r6
    68a8:	f7fd fe84 	bl	45b4 <memset>
    68ac:	9d05      	ldr	r5, [sp, #20]
    68ae:	9600      	str	r6, [sp, #0]
    68b0:	462b      	mov	r3, r5
    68b2:	aa1d      	add	r2, sp, #116	; 0x74
    68b4:	4621      	mov	r1, r4
    68b6:	4658      	mov	r0, fp
    68b8:	f001 fcd2 	bl	8260 <_wcsrtombs_r>
    68bc:	4285      	cmp	r5, r0
    68be:	f040 837c 	bne.w	6fba <_svfprintf_r+0x1b2a>
    68c2:	9a05      	ldr	r2, [sp, #20]
    68c4:	2300      	movs	r3, #0
    68c6:	54a3      	strb	r3, [r4, r2]
    68c8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    68cc:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    68d0:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    68d4:	9303      	str	r3, [sp, #12]
    68d6:	9202      	str	r2, [sp, #8]
    68d8:	930f      	str	r3, [sp, #60]	; 0x3c
    68da:	f7fe bfba 	b.w	5852 <_svfprintf_r+0x3c2>
    68de:	212d      	movs	r1, #45	; 0x2d
    68e0:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    68e4:	f7fe bfa4 	b.w	5830 <_svfprintf_r+0x3a0>
    68e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    68ea:	9915      	ldr	r1, [sp, #84]	; 0x54
    68ec:	ebab 0b03 	sub.w	fp, fp, r3
    68f0:	461a      	mov	r2, r3
    68f2:	4658      	mov	r0, fp
    68f4:	f7fd feb0 	bl	4658 <strncpy>
    68f8:	f89a 2001 	ldrb.w	r2, [sl, #1]
    68fc:	4b05      	ldr	r3, [pc, #20]	; (6914 <_svfprintf_r+0x1484>)
    68fe:	b10a      	cbz	r2, 6904 <_svfprintf_r+0x1474>
    6900:	f10a 0a01 	add.w	sl, sl, #1
    6904:	f04f 0c00 	mov.w	ip, #0
    6908:	e628      	b.n	655c <_svfprintf_r+0x10cc>
    690a:	bf00      	nop
    690c:	200007ec 	.word	0x200007ec
    6910:	20000d88 	.word	0x20000d88
    6914:	cccccccd 	.word	0xcccccccd
    6918:	ee1b 1a10 	vmov	r1, s22
    691c:	aa24      	add	r2, sp, #144	; 0x90
    691e:	4658      	mov	r0, fp
    6920:	f001 fcbe 	bl	82a0 <__ssprint_r>
    6924:	2800      	cmp	r0, #0
    6926:	f47f aa18 	bne.w	5d5a <_svfprintf_r+0x8ca>
    692a:	991b      	ldr	r1, [sp, #108]	; 0x6c
    692c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    692e:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6932:	e67c      	b.n	662e <_svfprintf_r+0x119e>
    6934:	9b05      	ldr	r3, [sp, #20]
    6936:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    693a:	930f      	str	r3, [sp, #60]	; 0x3c
    693c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    6940:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    6944:	9307      	str	r3, [sp, #28]
    6946:	f7fe bf84 	b.w	5852 <_svfprintf_r+0x3c2>
    694a:	990e      	ldr	r1, [sp, #56]	; 0x38
    694c:	9805      	ldr	r0, [sp, #20]
    694e:	1865      	adds	r5, r4, r1
    6950:	1a2d      	subs	r5, r5, r0
    6952:	1acc      	subs	r4, r1, r3
    6954:	42a5      	cmp	r5, r4
    6956:	bfa8      	it	ge
    6958:	4625      	movge	r5, r4
    695a:	f7ff bb4d 	b.w	5ff8 <_svfprintf_r+0xb68>
    695e:	9b08      	ldr	r3, [sp, #32]
    6960:	9904      	ldr	r1, [sp, #16]
    6962:	f853 2b04 	ldr.w	r2, [r3], #4
    6966:	9308      	str	r3, [sp, #32]
    6968:	8011      	strh	r1, [r2, #0]
    696a:	464c      	mov	r4, r9
    696c:	f7fe bdc2 	b.w	54f4 <_svfprintf_r+0x64>
    6970:	f913 2b04 	ldrsb.w	r2, [r3], #4
    6974:	9308      	str	r3, [sp, #32]
    6976:	17d1      	asrs	r1, r2, #31
    6978:	460b      	mov	r3, r1
    697a:	f7fe bfdb 	b.w	5934 <_svfprintf_r+0x4a4>
    697e:	9a03      	ldr	r2, [sp, #12]
    6980:	2102      	movs	r1, #2
    6982:	ab22      	add	r3, sp, #136	; 0x88
    6984:	9301      	str	r3, [sp, #4]
    6986:	ab1d      	add	r3, sp, #116	; 0x74
    6988:	9300      	str	r3, [sp, #0]
    698a:	4658      	mov	r0, fp
    698c:	ab1b      	add	r3, sp, #108	; 0x6c
    698e:	eeb0 0b4a 	vmov.f64	d0, d10
    6992:	9202      	str	r2, [sp, #8]
    6994:	f000 fdc8 	bl	7528 <_dtoa_r>
    6998:	2d47      	cmp	r5, #71	; 0x47
    699a:	9a02      	ldr	r2, [sp, #8]
    699c:	4604      	mov	r4, r0
    699e:	f000 8161 	beq.w	6c64 <_svfprintf_r+0x17d4>
    69a2:	2d46      	cmp	r5, #70	; 0x46
    69a4:	4410      	add	r0, r2
    69a6:	d105      	bne.n	69b4 <_svfprintf_r+0x1524>
    69a8:	7823      	ldrb	r3, [r4, #0]
    69aa:	2b30      	cmp	r3, #48	; 0x30
    69ac:	f000 826f 	beq.w	6e8e <_svfprintf_r+0x19fe>
    69b0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    69b2:	4410      	add	r0, r2
    69b4:	eeb5 ab40 	vcmp.f64	d10, #0.0
    69b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    69bc:	f040 8146 	bne.w	6c4c <_svfprintf_r+0x17bc>
    69c0:	4603      	mov	r3, r0
    69c2:	1b1b      	subs	r3, r3, r4
    69c4:	930e      	str	r3, [sp, #56]	; 0x38
    69c6:	2d47      	cmp	r5, #71	; 0x47
    69c8:	f000 8110 	beq.w	6bec <_svfprintf_r+0x175c>
    69cc:	2d46      	cmp	r5, #70	; 0x46
    69ce:	f000 81b5 	beq.w	6d3c <_svfprintf_r+0x18ac>
    69d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    69d4:	930c      	str	r3, [sp, #48]	; 0x30
    69d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    69d8:	2d41      	cmp	r5, #65	; 0x41
    69da:	f103 33ff 	add.w	r3, r3, #4294967295
    69de:	931b      	str	r3, [sp, #108]	; 0x6c
    69e0:	f000 81e5 	beq.w	6dae <_svfprintf_r+0x191e>
    69e4:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    69e8:	2100      	movs	r1, #0
    69ea:	2b00      	cmp	r3, #0
    69ec:	bfb8      	it	lt
    69ee:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    69f0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    69f4:	bfba      	itte	lt
    69f6:	f1c3 0301 	rsblt	r3, r3, #1
    69fa:	222d      	movlt	r2, #45	; 0x2d
    69fc:	222b      	movge	r2, #43	; 0x2b
    69fe:	2b09      	cmp	r3, #9
    6a00:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    6a04:	f340 81da 	ble.w	6dbc <_svfprintf_r+0x192c>
    6a08:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
    6a0c:	f8df c41c 	ldr.w	ip, [pc, #1052]	; 6e2c <_svfprintf_r+0x199c>
    6a10:	462a      	mov	r2, r5
    6a12:	4610      	mov	r0, r2
    6a14:	fb8c 2103 	smull	r2, r1, ip, r3
    6a18:	17da      	asrs	r2, r3, #31
    6a1a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    6a1e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    6a22:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    6a26:	3130      	adds	r1, #48	; 0x30
    6a28:	f800 1c01 	strb.w	r1, [r0, #-1]
    6a2c:	4619      	mov	r1, r3
    6a2e:	2963      	cmp	r1, #99	; 0x63
    6a30:	4613      	mov	r3, r2
    6a32:	f100 32ff 	add.w	r2, r0, #4294967295
    6a36:	dcec      	bgt.n	6a12 <_svfprintf_r+0x1582>
    6a38:	3330      	adds	r3, #48	; 0x30
    6a3a:	b2d9      	uxtb	r1, r3
    6a3c:	1e83      	subs	r3, r0, #2
    6a3e:	429d      	cmp	r5, r3
    6a40:	f802 1c01 	strb.w	r1, [r2, #-1]
    6a44:	f240 828b 	bls.w	6f5e <_svfprintf_r+0x1ace>
    6a48:	4613      	mov	r3, r2
    6a4a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    6a4e:	e001      	b.n	6a54 <_svfprintf_r+0x15c4>
    6a50:	f813 1b01 	ldrb.w	r1, [r3], #1
    6a54:	f802 1b01 	strb.w	r1, [r2], #1
    6a58:	429d      	cmp	r5, r3
    6a5a:	d1f9      	bne.n	6a50 <_svfprintf_r+0x15c0>
    6a5c:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    6a60:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    6a64:	1a1b      	subs	r3, r3, r0
    6a66:	4413      	add	r3, r2
    6a68:	aa1e      	add	r2, sp, #120	; 0x78
    6a6a:	1a9b      	subs	r3, r3, r2
    6a6c:	9314      	str	r3, [sp, #80]	; 0x50
    6a6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6a70:	9a14      	ldr	r2, [sp, #80]	; 0x50
    6a72:	2b01      	cmp	r3, #1
    6a74:	441a      	add	r2, r3
    6a76:	9205      	str	r2, [sp, #20]
    6a78:	f340 8203 	ble.w	6e82 <_svfprintf_r+0x19f2>
    6a7c:	9b05      	ldr	r3, [sp, #20]
    6a7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    6a80:	4413      	add	r3, r2
    6a82:	9305      	str	r3, [sp, #20]
    6a84:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
    6a88:	9a05      	ldr	r2, [sp, #20]
    6a8a:	f443 7880 	orr.w	r8, r3, #256	; 0x100
    6a8e:	2300      	movs	r3, #0
    6a90:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    6a94:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    6a98:	930f      	str	r3, [sp, #60]	; 0x3c
    6a9a:	9202      	str	r2, [sp, #8]
    6a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6a9e:	2b00      	cmp	r3, #0
    6aa0:	f040 80b1 	bne.w	6c06 <_svfprintf_r+0x1776>
    6aa4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    6aa8:	9303      	str	r3, [sp, #12]
    6aaa:	f7fe bed2 	b.w	5852 <_svfprintf_r+0x3c2>
    6aae:	4620      	mov	r0, r4
    6ab0:	f7fd ff06 	bl	48c0 <strlen>
    6ab4:	4602      	mov	r2, r0
    6ab6:	9005      	str	r0, [sp, #20]
    6ab8:	f7fe bf20 	b.w	58fc <_svfprintf_r+0x46c>
    6abc:	ee1b 1a10 	vmov	r1, s22
    6ac0:	aa24      	add	r2, sp, #144	; 0x90
    6ac2:	4658      	mov	r0, fp
    6ac4:	f001 fbec 	bl	82a0 <__ssprint_r>
    6ac8:	f7fe bded 	b.w	56a6 <_svfprintf_r+0x216>
    6acc:	1c59      	adds	r1, r3, #1
    6ace:	4658      	mov	r0, fp
    6ad0:	f7fc feaa 	bl	3828 <_malloc_r>
    6ad4:	4604      	mov	r4, r0
    6ad6:	2800      	cmp	r0, #0
    6ad8:	f000 81ca 	beq.w	6e70 <_svfprintf_r+0x19e0>
    6adc:	9007      	str	r0, [sp, #28]
    6ade:	e6e0      	b.n	68a2 <_svfprintf_r+0x1412>
    6ae0:	ee1b 1a10 	vmov	r1, s22
    6ae4:	aa24      	add	r2, sp, #144	; 0x90
    6ae6:	4658      	mov	r0, fp
    6ae8:	f001 fbda 	bl	82a0 <__ssprint_r>
    6aec:	2800      	cmp	r0, #0
    6aee:	f47f a934 	bne.w	5d5a <_svfprintf_r+0x8ca>
    6af2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    6af4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6af8:	f7ff ba49 	b.w	5f8e <_svfprintf_r+0xafe>
    6afc:	ee1b 1a10 	vmov	r1, s22
    6b00:	aa24      	add	r2, sp, #144	; 0x90
    6b02:	4658      	mov	r0, fp
    6b04:	f001 fbcc 	bl	82a0 <__ssprint_r>
    6b08:	2800      	cmp	r0, #0
    6b0a:	f47f a926 	bne.w	5d5a <_svfprintf_r+0x8ca>
    6b0e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    6b12:	991b      	ldr	r1, [sp, #108]	; 0x6c
    6b14:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6b18:	e649      	b.n	67ae <_svfprintf_r+0x131e>
    6b1a:	2306      	movs	r3, #6
    6b1c:	9303      	str	r3, [sp, #12]
    6b1e:	f7ff bb83 	b.w	6228 <_svfprintf_r+0xd98>
    6b22:	9b03      	ldr	r3, [sp, #12]
    6b24:	2102      	movs	r1, #2
    6b26:	1c5a      	adds	r2, r3, #1
    6b28:	e72b      	b.n	6982 <_svfprintf_r+0x14f2>
    6b2a:	9a03      	ldr	r2, [sp, #12]
    6b2c:	2103      	movs	r1, #3
    6b2e:	e728      	b.n	6982 <_svfprintf_r+0x14f2>
    6b30:	a81b      	add	r0, sp, #108	; 0x6c
    6b32:	eeb0 0b4a 	vmov.f64	d0, d10
    6b36:	f000 fbcb 	bl	72d0 <frexp>
    6b3a:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    6b3e:	ee20 0b07 	vmul.f64	d0, d0, d7
    6b42:	eeb5 0b40 	vcmp.f64	d0, #0.0
    6b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6b4a:	d101      	bne.n	6b50 <_svfprintf_r+0x16c0>
    6b4c:	2301      	movs	r3, #1
    6b4e:	931b      	str	r3, [sp, #108]	; 0x6c
    6b50:	48b3      	ldr	r0, [pc, #716]	; (6e20 <_svfprintf_r+0x1990>)
    6b52:	9b03      	ldr	r3, [sp, #12]
    6b54:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
    6b58:	3b01      	subs	r3, #1
    6b5a:	4622      	mov	r2, r4
    6b5c:	e004      	b.n	6b68 <_svfprintf_r+0x16d8>
    6b5e:	eeb5 0b40 	vcmp.f64	d0, #0.0
    6b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6b66:	d013      	beq.n	6b90 <_svfprintf_r+0x1700>
    6b68:	ee20 0b05 	vmul.f64	d0, d0, d5
    6b6c:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    6b70:	f1b3 3fff 	cmp.w	r3, #4294967295
    6b74:	ee17 1a90 	vmov	r1, s15
    6b78:	5c41      	ldrb	r1, [r0, r1]
    6b7a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    6b7e:	4694      	mov	ip, r2
    6b80:	ee30 0b46 	vsub.f64	d0, d0, d6
    6b84:	f802 1b01 	strb.w	r1, [r2], #1
    6b88:	4619      	mov	r1, r3
    6b8a:	f103 33ff 	add.w	r3, r3, #4294967295
    6b8e:	d1e6      	bne.n	6b5e <_svfprintf_r+0x16ce>
    6b90:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    6b94:	eeb4 0bc6 	vcmpe.f64	d0, d6
    6b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6b9c:	f300 8148 	bgt.w	6e30 <_svfprintf_r+0x19a0>
    6ba0:	eeb4 0b46 	vcmp.f64	d0, d6
    6ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6ba8:	d104      	bne.n	6bb4 <_svfprintf_r+0x1724>
    6baa:	ee17 3a90 	vmov	r3, s15
    6bae:	07db      	lsls	r3, r3, #31
    6bb0:	f100 813e 	bmi.w	6e30 <_svfprintf_r+0x19a0>
    6bb4:	2900      	cmp	r1, #0
    6bb6:	db06      	blt.n	6bc6 <_svfprintf_r+0x1736>
    6bb8:	1c4b      	adds	r3, r1, #1
    6bba:	4413      	add	r3, r2
    6bbc:	2130      	movs	r1, #48	; 0x30
    6bbe:	f802 1b01 	strb.w	r1, [r2], #1
    6bc2:	4293      	cmp	r3, r2
    6bc4:	d1fb      	bne.n	6bbe <_svfprintf_r+0x172e>
    6bc6:	1b13      	subs	r3, r2, r4
    6bc8:	930e      	str	r3, [sp, #56]	; 0x38
    6bca:	e6fc      	b.n	69c6 <_svfprintf_r+0x1536>
    6bcc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    6bce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6bd0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    6bd4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    6bd8:	9613      	str	r6, [sp, #76]	; 0x4c
    6bda:	18e3      	adds	r3, r4, r3
    6bdc:	429d      	cmp	r5, r3
    6bde:	4629      	mov	r1, r5
    6be0:	bf28      	it	cs
    6be2:	4619      	movcs	r1, r3
    6be4:	4682      	mov	sl, r0
    6be6:	9105      	str	r1, [sp, #20]
    6be8:	f7ff b9d8 	b.w	5f9c <_svfprintf_r+0xb0c>
    6bec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    6bee:	930c      	str	r3, [sp, #48]	; 0x30
    6bf0:	1cda      	adds	r2, r3, #3
    6bf2:	db02      	blt.n	6bfa <_svfprintf_r+0x176a>
    6bf4:	9a03      	ldr	r2, [sp, #12]
    6bf6:	4293      	cmp	r3, r2
    6bf8:	dd0c      	ble.n	6c14 <_svfprintf_r+0x1784>
    6bfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6bfc:	3b02      	subs	r3, #2
    6bfe:	930b      	str	r3, [sp, #44]	; 0x2c
    6c00:	f023 0520 	bic.w	r5, r3, #32
    6c04:	e6e7      	b.n	69d6 <_svfprintf_r+0x1546>
    6c06:	212d      	movs	r1, #45	; 0x2d
    6c08:	2300      	movs	r3, #0
    6c0a:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    6c0e:	9303      	str	r3, [sp, #12]
    6c10:	f7fe be22 	b.w	5858 <_svfprintf_r+0x3c8>
    6c14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6c16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    6c18:	4293      	cmp	r3, r2
    6c1a:	f2c0 80bd 	blt.w	6d98 <_svfprintf_r+0x1908>
    6c1e:	07f0      	lsls	r0, r6, #31
    6c20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6c22:	f140 8132 	bpl.w	6e8a <_svfprintf_r+0x19fa>
    6c26:	9a10      	ldr	r2, [sp, #64]	; 0x40
    6c28:	4413      	add	r3, r2
    6c2a:	9305      	str	r3, [sp, #20]
    6c2c:	0571      	lsls	r1, r6, #21
    6c2e:	d503      	bpl.n	6c38 <_svfprintf_r+0x17a8>
    6c30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6c32:	2b00      	cmp	r3, #0
    6c34:	f300 8135 	bgt.w	6ea2 <_svfprintf_r+0x1a12>
    6c38:	9b05      	ldr	r3, [sp, #20]
    6c3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6c3e:	9302      	str	r3, [sp, #8]
    6c40:	2367      	movs	r3, #103	; 0x67
    6c42:	930b      	str	r3, [sp, #44]	; 0x2c
    6c44:	2300      	movs	r3, #0
    6c46:	930f      	str	r3, [sp, #60]	; 0x3c
    6c48:	930d      	str	r3, [sp, #52]	; 0x34
    6c4a:	e727      	b.n	6a9c <_svfprintf_r+0x160c>
    6c4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    6c4e:	4283      	cmp	r3, r0
    6c50:	f4bf aeb7 	bcs.w	69c2 <_svfprintf_r+0x1532>
    6c54:	2130      	movs	r1, #48	; 0x30
    6c56:	1c5a      	adds	r2, r3, #1
    6c58:	9222      	str	r2, [sp, #136]	; 0x88
    6c5a:	7019      	strb	r1, [r3, #0]
    6c5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    6c5e:	4298      	cmp	r0, r3
    6c60:	d8f9      	bhi.n	6c56 <_svfprintf_r+0x17c6>
    6c62:	e6ae      	b.n	69c2 <_svfprintf_r+0x1532>
    6c64:	07f3      	lsls	r3, r6, #31
    6c66:	f100 80a7 	bmi.w	6db8 <_svfprintf_r+0x1928>
    6c6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    6c6c:	e6a9      	b.n	69c2 <_svfprintf_r+0x1532>
    6c6e:	aa24      	add	r2, sp, #144	; 0x90
    6c70:	4658      	mov	r0, fp
    6c72:	9105      	str	r1, [sp, #20]
    6c74:	f001 fb14 	bl	82a0 <__ssprint_r>
    6c78:	2800      	cmp	r0, #0
    6c7a:	f47f a86e 	bne.w	5d5a <_svfprintf_r+0x8ca>
    6c7e:	f896 c000 	ldrb.w	ip, [r6]
    6c82:	9a26      	ldr	r2, [sp, #152]	; 0x98
    6c84:	9905      	ldr	r1, [sp, #20]
    6c86:	a827      	add	r0, sp, #156	; 0x9c
    6c88:	4465      	add	r5, ip
    6c8a:	f7ff bbec 	b.w	6466 <_svfprintf_r+0xfd6>
    6c8e:	ee1b 1a10 	vmov	r1, s22
    6c92:	aa24      	add	r2, sp, #144	; 0x90
    6c94:	4658      	mov	r0, fp
    6c96:	f001 fb03 	bl	82a0 <__ssprint_r>
    6c9a:	2800      	cmp	r0, #0
    6c9c:	f47f a85d 	bne.w	5d5a <_svfprintf_r+0x8ca>
    6ca0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    6ca2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6ca6:	f7ff b96b 	b.w	5f80 <_svfprintf_r+0xaf0>
    6caa:	2378      	movs	r3, #120	; 0x78
    6cac:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    6cb0:	2330      	movs	r3, #48	; 0x30
    6cb2:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    6cb6:	9b03      	ldr	r3, [sp, #12]
    6cb8:	2b63      	cmp	r3, #99	; 0x63
    6cba:	f048 0602 	orr.w	r6, r8, #2
    6cbe:	f300 80a6 	bgt.w	6e0e <_svfprintf_r+0x197e>
    6cc2:	2300      	movs	r3, #0
    6cc4:	9307      	str	r3, [sp, #28]
    6cc6:	ac37      	add	r4, sp, #220	; 0xdc
    6cc8:	ee18 3a90 	vmov	r3, s17
    6ccc:	2b00      	cmp	r3, #0
    6cce:	f448 7881 	orr.w	r8, r8, #258	; 0x102
    6cd2:	db2b      	blt.n	6d2c <_svfprintf_r+0x189c>
    6cd4:	eeb0 ab48 	vmov.f64	d10, d8
    6cd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6cda:	f023 0520 	bic.w	r5, r3, #32
    6cde:	2300      	movs	r3, #0
    6ce0:	9309      	str	r3, [sp, #36]	; 0x24
    6ce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6ce4:	2b61      	cmp	r3, #97	; 0x61
    6ce6:	f47f aaad 	bne.w	6244 <_svfprintf_r+0xdb4>
    6cea:	eeb0 0b4a 	vmov.f64	d0, d10
    6cee:	a81b      	add	r0, sp, #108	; 0x6c
    6cf0:	f000 faee 	bl	72d0 <frexp>
    6cf4:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    6cf8:	ee20 0b07 	vmul.f64	d0, d0, d7
    6cfc:	eeb5 0b40 	vcmp.f64	d0, #0.0
    6d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6d04:	d101      	bne.n	6d0a <_svfprintf_r+0x187a>
    6d06:	2301      	movs	r3, #1
    6d08:	931b      	str	r3, [sp, #108]	; 0x6c
    6d0a:	4846      	ldr	r0, [pc, #280]	; (6e24 <_svfprintf_r+0x1994>)
    6d0c:	e721      	b.n	6b52 <_svfprintf_r+0x16c2>
    6d0e:	ee1b 1a10 	vmov	r1, s22
    6d12:	aa24      	add	r2, sp, #144	; 0x90
    6d14:	4658      	mov	r0, fp
    6d16:	f001 fac3 	bl	82a0 <__ssprint_r>
    6d1a:	2800      	cmp	r0, #0
    6d1c:	f47f a81d 	bne.w	5d5a <_svfprintf_r+0x8ca>
    6d20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    6d22:	9a26      	ldr	r2, [sp, #152]	; 0x98
    6d24:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6d28:	f7ff b94e 	b.w	5fc8 <_svfprintf_r+0xb38>
    6d2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6d2e:	f023 0520 	bic.w	r5, r3, #32
    6d32:	232d      	movs	r3, #45	; 0x2d
    6d34:	9309      	str	r3, [sp, #36]	; 0x24
    6d36:	eeb1 ab48 	vneg.f64	d10, d8
    6d3a:	e7d2      	b.n	6ce2 <_svfprintf_r+0x1852>
    6d3c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    6d3e:	920c      	str	r2, [sp, #48]	; 0x30
    6d40:	2a00      	cmp	r2, #0
    6d42:	f006 0301 	and.w	r3, r6, #1
    6d46:	f340 810d 	ble.w	6f64 <_svfprintf_r+0x1ad4>
    6d4a:	9903      	ldr	r1, [sp, #12]
    6d4c:	430b      	orrs	r3, r1
    6d4e:	f040 80cf 	bne.w	6ef0 <_svfprintf_r+0x1a60>
    6d52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6d54:	9305      	str	r3, [sp, #20]
    6d56:	2366      	movs	r3, #102	; 0x66
    6d58:	930b      	str	r3, [sp, #44]	; 0x2c
    6d5a:	0572      	lsls	r2, r6, #21
    6d5c:	f100 80a3 	bmi.w	6ea6 <_svfprintf_r+0x1a16>
    6d60:	9b05      	ldr	r3, [sp, #20]
    6d62:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6d66:	9302      	str	r3, [sp, #8]
    6d68:	e76c      	b.n	6c44 <_svfprintf_r+0x17b4>
    6d6a:	ee1b 1a10 	vmov	r1, s22
    6d6e:	aa24      	add	r2, sp, #144	; 0x90
    6d70:	4658      	mov	r0, fp
    6d72:	f001 fa95 	bl	82a0 <__ssprint_r>
    6d76:	2800      	cmp	r0, #0
    6d78:	f47e afef 	bne.w	5d5a <_svfprintf_r+0x8ca>
    6d7c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    6d7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6d80:	9a26      	ldr	r2, [sp, #152]	; 0x98
    6d82:	1b1c      	subs	r4, r3, r4
    6d84:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6d88:	f7ff b936 	b.w	5ff8 <_svfprintf_r+0xb68>
    6d8c:	2358      	movs	r3, #88	; 0x58
    6d8e:	e78d      	b.n	6cac <_svfprintf_r+0x181c>
    6d90:	2200      	movs	r2, #0
    6d92:	9203      	str	r2, [sp, #12]
    6d94:	f7fe bbda 	b.w	554c <_svfprintf_r+0xbc>
    6d98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6d9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    6d9c:	189a      	adds	r2, r3, r2
    6d9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6da0:	9205      	str	r2, [sp, #20]
    6da2:	2b00      	cmp	r3, #0
    6da4:	f340 80ab 	ble.w	6efe <_svfprintf_r+0x1a6e>
    6da8:	2367      	movs	r3, #103	; 0x67
    6daa:	930b      	str	r3, [sp, #44]	; 0x2c
    6dac:	e7d5      	b.n	6d5a <_svfprintf_r+0x18ca>
    6dae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6db0:	320f      	adds	r2, #15
    6db2:	b2d2      	uxtb	r2, r2
    6db4:	2101      	movs	r1, #1
    6db6:	e618      	b.n	69ea <_svfprintf_r+0x155a>
    6db8:	18a0      	adds	r0, r4, r2
    6dba:	e5fb      	b.n	69b4 <_svfprintf_r+0x1524>
    6dbc:	2900      	cmp	r1, #0
    6dbe:	f040 80a8 	bne.w	6f12 <_svfprintf_r+0x1a82>
    6dc2:	2230      	movs	r2, #48	; 0x30
    6dc4:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
    6dc8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
    6dcc:	3330      	adds	r3, #48	; 0x30
    6dce:	f802 3b01 	strb.w	r3, [r2], #1
    6dd2:	ab1e      	add	r3, sp, #120	; 0x78
    6dd4:	1ad3      	subs	r3, r2, r3
    6dd6:	9314      	str	r3, [sp, #80]	; 0x50
    6dd8:	e649      	b.n	6a6e <_svfprintf_r+0x15de>
    6dda:	3301      	adds	r3, #1
    6ddc:	4912      	ldr	r1, [pc, #72]	; (6e28 <_svfprintf_r+0x1998>)
    6dde:	f8ca 5004 	str.w	r5, [sl, #4]
    6de2:	442a      	add	r2, r5
    6de4:	2b07      	cmp	r3, #7
    6de6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    6dea:	f8ca 1000 	str.w	r1, [sl]
    6dee:	f77f ac33 	ble.w	6658 <_svfprintf_r+0x11c8>
    6df2:	ee1b 1a10 	vmov	r1, s22
    6df6:	aa24      	add	r2, sp, #144	; 0x90
    6df8:	4658      	mov	r0, fp
    6dfa:	f001 fa51 	bl	82a0 <__ssprint_r>
    6dfe:	2800      	cmp	r0, #0
    6e00:	f47e afab 	bne.w	5d5a <_svfprintf_r+0x8ca>
    6e04:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    6e08:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6e0c:	e426      	b.n	665c <_svfprintf_r+0x11cc>
    6e0e:	1c59      	adds	r1, r3, #1
    6e10:	4658      	mov	r0, fp
    6e12:	f7fc fd09 	bl	3828 <_malloc_r>
    6e16:	4604      	mov	r4, r0
    6e18:	b350      	cbz	r0, 6e70 <_svfprintf_r+0x19e0>
    6e1a:	9007      	str	r0, [sp, #28]
    6e1c:	e754      	b.n	6cc8 <_svfprintf_r+0x1838>
    6e1e:	bf00      	nop
    6e20:	200007d0 	.word	0x200007d0
    6e24:	200007bc 	.word	0x200007bc
    6e28:	20000d88 	.word	0x20000d88
    6e2c:	66666667 	.word	0x66666667
    6e30:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    6e34:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    6e38:	f890 c00f 	ldrb.w	ip, [r0, #15]
    6e3c:	4561      	cmp	r1, ip
    6e3e:	4613      	mov	r3, r2
    6e40:	d10a      	bne.n	6e58 <_svfprintf_r+0x19c8>
    6e42:	f04f 0e30 	mov.w	lr, #48	; 0x30
    6e46:	f803 ec01 	strb.w	lr, [r3, #-1]
    6e4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    6e4c:	1e59      	subs	r1, r3, #1
    6e4e:	9122      	str	r1, [sp, #136]	; 0x88
    6e50:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    6e54:	458c      	cmp	ip, r1
    6e56:	d0f6      	beq.n	6e46 <_svfprintf_r+0x19b6>
    6e58:	2939      	cmp	r1, #57	; 0x39
    6e5a:	bf16      	itet	ne
    6e5c:	3101      	addne	r1, #1
    6e5e:	7a81      	ldrbeq	r1, [r0, #10]
    6e60:	b2c9      	uxtbne	r1, r1
    6e62:	f803 1c01 	strb.w	r1, [r3, #-1]
    6e66:	e6ae      	b.n	6bc6 <_svfprintf_r+0x1736>
    6e68:	2300      	movs	r3, #0
    6e6a:	4690      	mov	r8, r2
    6e6c:	9307      	str	r3, [sp, #28]
    6e6e:	e760      	b.n	6d32 <_svfprintf_r+0x18a2>
    6e70:	ee1b 2a10 	vmov	r2, s22
    6e74:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    6e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6e7c:	8193      	strh	r3, [r2, #12]
    6e7e:	f7fe bc16 	b.w	56ae <_svfprintf_r+0x21e>
    6e82:	07f5      	lsls	r5, r6, #31
    6e84:	f57f adfe 	bpl.w	6a84 <_svfprintf_r+0x15f4>
    6e88:	e5f8      	b.n	6a7c <_svfprintf_r+0x15ec>
    6e8a:	9305      	str	r3, [sp, #20]
    6e8c:	e6ce      	b.n	6c2c <_svfprintf_r+0x179c>
    6e8e:	eeb5 ab40 	vcmp.f64	d10, #0.0
    6e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6e96:	f43f ad8b 	beq.w	69b0 <_svfprintf_r+0x1520>
    6e9a:	f1c2 0201 	rsb	r2, r2, #1
    6e9e:	921b      	str	r2, [sp, #108]	; 0x6c
    6ea0:	e587      	b.n	69b2 <_svfprintf_r+0x1522>
    6ea2:	2367      	movs	r3, #103	; 0x67
    6ea4:	930b      	str	r3, [sp, #44]	; 0x2c
    6ea6:	9913      	ldr	r1, [sp, #76]	; 0x4c
    6ea8:	780b      	ldrb	r3, [r1, #0]
    6eaa:	2bff      	cmp	r3, #255	; 0xff
    6eac:	d079      	beq.n	6fa2 <_svfprintf_r+0x1b12>
    6eae:	2500      	movs	r5, #0
    6eb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6eb2:	4628      	mov	r0, r5
    6eb4:	e003      	b.n	6ebe <_svfprintf_r+0x1a2e>
    6eb6:	3001      	adds	r0, #1
    6eb8:	3101      	adds	r1, #1
    6eba:	2bff      	cmp	r3, #255	; 0xff
    6ebc:	d008      	beq.n	6ed0 <_svfprintf_r+0x1a40>
    6ebe:	4293      	cmp	r3, r2
    6ec0:	da06      	bge.n	6ed0 <_svfprintf_r+0x1a40>
    6ec2:	1ad2      	subs	r2, r2, r3
    6ec4:	784b      	ldrb	r3, [r1, #1]
    6ec6:	2b00      	cmp	r3, #0
    6ec8:	d1f5      	bne.n	6eb6 <_svfprintf_r+0x1a26>
    6eca:	780b      	ldrb	r3, [r1, #0]
    6ecc:	3501      	adds	r5, #1
    6ece:	e7f4      	b.n	6eba <_svfprintf_r+0x1a2a>
    6ed0:	920c      	str	r2, [sp, #48]	; 0x30
    6ed2:	9113      	str	r1, [sp, #76]	; 0x4c
    6ed4:	900d      	str	r0, [sp, #52]	; 0x34
    6ed6:	950f      	str	r5, [sp, #60]	; 0x3c
    6ed8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6eda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6edc:	9916      	ldr	r1, [sp, #88]	; 0x58
    6ede:	4413      	add	r3, r2
    6ee0:	9a05      	ldr	r2, [sp, #20]
    6ee2:	fb01 2303 	mla	r3, r1, r3, r2
    6ee6:	9305      	str	r3, [sp, #20]
    6ee8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6eec:	9302      	str	r3, [sp, #8]
    6eee:	e5d5      	b.n	6a9c <_svfprintf_r+0x160c>
    6ef0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6ef2:	18d3      	adds	r3, r2, r3
    6ef4:	4419      	add	r1, r3
    6ef6:	2366      	movs	r3, #102	; 0x66
    6ef8:	9105      	str	r1, [sp, #20]
    6efa:	930b      	str	r3, [sp, #44]	; 0x2c
    6efc:	e72d      	b.n	6d5a <_svfprintf_r+0x18ca>
    6efe:	f1c3 0301 	rsb	r3, r3, #1
    6f02:	441a      	add	r2, r3
    6f04:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    6f08:	9302      	str	r3, [sp, #8]
    6f0a:	2367      	movs	r3, #103	; 0x67
    6f0c:	9205      	str	r2, [sp, #20]
    6f0e:	930b      	str	r3, [sp, #44]	; 0x2c
    6f10:	e698      	b.n	6c44 <_svfprintf_r+0x17b4>
    6f12:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    6f16:	e759      	b.n	6dcc <_svfprintf_r+0x193c>
    6f18:	9b03      	ldr	r3, [sp, #12]
    6f1a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    6f1e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    6f22:	9305      	str	r3, [sp, #20]
    6f24:	e4b4      	b.n	6890 <_svfprintf_r+0x1400>
    6f26:	ee18 3a90 	vmov	r3, s17
    6f2a:	2b00      	cmp	r3, #0
    6f2c:	bfb4      	ite	lt
    6f2e:	212d      	movlt	r1, #45	; 0x2d
    6f30:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
    6f34:	4c25      	ldr	r4, [pc, #148]	; (6fcc <_svfprintf_r+0x1b3c>)
    6f36:	4b26      	ldr	r3, [pc, #152]	; (6fd0 <_svfprintf_r+0x1b40>)
    6f38:	bfb8      	it	lt
    6f3a:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
    6f3e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    6f42:	f7fe bc79 	b.w	5838 <_svfprintf_r+0x3a8>
    6f46:	9b03      	ldr	r3, [sp, #12]
    6f48:	9302      	str	r3, [sp, #8]
    6f4a:	9305      	str	r3, [sp, #20]
    6f4c:	2373      	movs	r3, #115	; 0x73
    6f4e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    6f52:	9003      	str	r0, [sp, #12]
    6f54:	900f      	str	r0, [sp, #60]	; 0x3c
    6f56:	900d      	str	r0, [sp, #52]	; 0x34
    6f58:	930b      	str	r3, [sp, #44]	; 0x2c
    6f5a:	f7fe bc7a 	b.w	5852 <_svfprintf_r+0x3c2>
    6f5e:	2302      	movs	r3, #2
    6f60:	9314      	str	r3, [sp, #80]	; 0x50
    6f62:	e584      	b.n	6a6e <_svfprintf_r+0x15de>
    6f64:	9a03      	ldr	r2, [sp, #12]
    6f66:	4313      	orrs	r3, r2
    6f68:	d105      	bne.n	6f76 <_svfprintf_r+0x1ae6>
    6f6a:	2301      	movs	r3, #1
    6f6c:	2266      	movs	r2, #102	; 0x66
    6f6e:	9302      	str	r3, [sp, #8]
    6f70:	920b      	str	r2, [sp, #44]	; 0x2c
    6f72:	9305      	str	r3, [sp, #20]
    6f74:	e666      	b.n	6c44 <_svfprintf_r+0x17b4>
    6f76:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6f78:	3301      	adds	r3, #1
    6f7a:	441a      	add	r2, r3
    6f7c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    6f80:	9302      	str	r3, [sp, #8]
    6f82:	2366      	movs	r3, #102	; 0x66
    6f84:	9205      	str	r2, [sp, #20]
    6f86:	930b      	str	r3, [sp, #44]	; 0x2c
    6f88:	e65c      	b.n	6c44 <_svfprintf_r+0x17b4>
    6f8a:	9a08      	ldr	r2, [sp, #32]
    6f8c:	f899 3001 	ldrb.w	r3, [r9, #1]
    6f90:	4689      	mov	r9, r1
    6f92:	f852 1b04 	ldr.w	r1, [r2], #4
    6f96:	9208      	str	r2, [sp, #32]
    6f98:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    6f9c:	9103      	str	r1, [sp, #12]
    6f9e:	f7fe bad3 	b.w	5548 <_svfprintf_r+0xb8>
    6fa2:	2300      	movs	r3, #0
    6fa4:	930f      	str	r3, [sp, #60]	; 0x3c
    6fa6:	930d      	str	r3, [sp, #52]	; 0x34
    6fa8:	e796      	b.n	6ed8 <_svfprintf_r+0x1a48>
    6faa:	230c      	movs	r3, #12
    6fac:	f8cb 3000 	str.w	r3, [fp]
    6fb0:	f04f 33ff 	mov.w	r3, #4294967295
    6fb4:	9304      	str	r3, [sp, #16]
    6fb6:	f7fe bb81 	b.w	56bc <_svfprintf_r+0x22c>
    6fba:	ee1b 2a10 	vmov	r2, s22
    6fbe:	8993      	ldrh	r3, [r2, #12]
    6fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6fc4:	8193      	strh	r3, [r2, #12]
    6fc6:	f7fe bec8 	b.w	5d5a <_svfprintf_r+0x8ca>
    6fca:	bf00      	nop
    6fcc:	200007b4 	.word	0x200007b4
    6fd0:	200007b8 	.word	0x200007b8

00006fd4 <_fclose_r>:
    6fd4:	b570      	push	{r4, r5, r6, lr}
    6fd6:	2900      	cmp	r1, #0
    6fd8:	d04b      	beq.n	7072 <_fclose_r+0x9e>
    6fda:	4606      	mov	r6, r0
    6fdc:	460c      	mov	r4, r1
    6fde:	b110      	cbz	r0, 6fe6 <_fclose_r+0x12>
    6fe0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    6fe2:	2b00      	cmp	r3, #0
    6fe4:	d048      	beq.n	7078 <_fclose_r+0xa4>
    6fe6:	6e63      	ldr	r3, [r4, #100]	; 0x64
    6fe8:	07d8      	lsls	r0, r3, #31
    6fea:	d534      	bpl.n	7056 <_fclose_r+0x82>
    6fec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    6ff0:	2b00      	cmp	r3, #0
    6ff2:	d03e      	beq.n	7072 <_fclose_r+0x9e>
    6ff4:	4621      	mov	r1, r4
    6ff6:	4630      	mov	r0, r6
    6ff8:	f000 f850 	bl	709c <__sflush_r>
    6ffc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6ffe:	4605      	mov	r5, r0
    7000:	b133      	cbz	r3, 7010 <_fclose_r+0x3c>
    7002:	69e1      	ldr	r1, [r4, #28]
    7004:	4630      	mov	r0, r6
    7006:	4798      	blx	r3
    7008:	2800      	cmp	r0, #0
    700a:	bfb8      	it	lt
    700c:	f04f 35ff 	movlt.w	r5, #4294967295
    7010:	89a3      	ldrh	r3, [r4, #12]
    7012:	061a      	lsls	r2, r3, #24
    7014:	d43c      	bmi.n	7090 <_fclose_r+0xbc>
    7016:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7018:	b141      	cbz	r1, 702c <_fclose_r+0x58>
    701a:	f104 0340 	add.w	r3, r4, #64	; 0x40
    701e:	4299      	cmp	r1, r3
    7020:	d002      	beq.n	7028 <_fclose_r+0x54>
    7022:	4630      	mov	r0, r6
    7024:	f7fd fd4e 	bl	4ac4 <_free_r>
    7028:	2300      	movs	r3, #0
    702a:	6323      	str	r3, [r4, #48]	; 0x30
    702c:	6c61      	ldr	r1, [r4, #68]	; 0x44
    702e:	b121      	cbz	r1, 703a <_fclose_r+0x66>
    7030:	4630      	mov	r0, r6
    7032:	f7fd fd47 	bl	4ac4 <_free_r>
    7036:	2300      	movs	r3, #0
    7038:	6463      	str	r3, [r4, #68]	; 0x44
    703a:	f7fd f963 	bl	4304 <__sfp_lock_acquire>
    703e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    7040:	2200      	movs	r2, #0
    7042:	07db      	lsls	r3, r3, #31
    7044:	81a2      	strh	r2, [r4, #12]
    7046:	d51f      	bpl.n	7088 <_fclose_r+0xb4>
    7048:	6da0      	ldr	r0, [r4, #88]	; 0x58
    704a:	f7fd fbcf 	bl	47ec <__retarget_lock_close_recursive>
    704e:	f7fd f95f 	bl	4310 <__sfp_lock_release>
    7052:	4628      	mov	r0, r5
    7054:	bd70      	pop	{r4, r5, r6, pc}
    7056:	89a3      	ldrh	r3, [r4, #12]
    7058:	0599      	lsls	r1, r3, #22
    705a:	d4cb      	bmi.n	6ff4 <_fclose_r+0x20>
    705c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    705e:	f7fd fbc7 	bl	47f0 <__retarget_lock_acquire_recursive>
    7062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    7066:	2b00      	cmp	r3, #0
    7068:	d1c4      	bne.n	6ff4 <_fclose_r+0x20>
    706a:	6e65      	ldr	r5, [r4, #100]	; 0x64
    706c:	f015 0501 	ands.w	r5, r5, #1
    7070:	d005      	beq.n	707e <_fclose_r+0xaa>
    7072:	2500      	movs	r5, #0
    7074:	4628      	mov	r0, r5
    7076:	bd70      	pop	{r4, r5, r6, pc}
    7078:	f7fd f926 	bl	42c8 <__sinit>
    707c:	e7b3      	b.n	6fe6 <_fclose_r+0x12>
    707e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7080:	f7fd fbb8 	bl	47f4 <__retarget_lock_release_recursive>
    7084:	4628      	mov	r0, r5
    7086:	bd70      	pop	{r4, r5, r6, pc}
    7088:	6da0      	ldr	r0, [r4, #88]	; 0x58
    708a:	f7fd fbb3 	bl	47f4 <__retarget_lock_release_recursive>
    708e:	e7db      	b.n	7048 <_fclose_r+0x74>
    7090:	6921      	ldr	r1, [r4, #16]
    7092:	4630      	mov	r0, r6
    7094:	f7fd fd16 	bl	4ac4 <_free_r>
    7098:	e7bd      	b.n	7016 <_fclose_r+0x42>
    709a:	bf00      	nop

0000709c <__sflush_r>:
    709c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    70a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    70a4:	460c      	mov	r4, r1
    70a6:	0711      	lsls	r1, r2, #28
    70a8:	4680      	mov	r8, r0
    70aa:	d447      	bmi.n	713c <__sflush_r+0xa0>
    70ac:	6863      	ldr	r3, [r4, #4]
    70ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    70b2:	2b00      	cmp	r3, #0
    70b4:	81a2      	strh	r2, [r4, #12]
    70b6:	dd5e      	ble.n	7176 <__sflush_r+0xda>
    70b8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    70ba:	2d00      	cmp	r5, #0
    70bc:	d058      	beq.n	7170 <__sflush_r+0xd4>
    70be:	2300      	movs	r3, #0
    70c0:	f8d8 6000 	ldr.w	r6, [r8]
    70c4:	f8c8 3000 	str.w	r3, [r8]
    70c8:	b293      	uxth	r3, r2
    70ca:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    70ce:	d156      	bne.n	717e <__sflush_r+0xe2>
    70d0:	2301      	movs	r3, #1
    70d2:	69e1      	ldr	r1, [r4, #28]
    70d4:	4640      	mov	r0, r8
    70d6:	47a8      	blx	r5
    70d8:	1c43      	adds	r3, r0, #1
    70da:	d067      	beq.n	71ac <__sflush_r+0x110>
    70dc:	89a3      	ldrh	r3, [r4, #12]
    70de:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    70e0:	075f      	lsls	r7, r3, #29
    70e2:	d505      	bpl.n	70f0 <__sflush_r+0x54>
    70e4:	6863      	ldr	r3, [r4, #4]
    70e6:	1ac0      	subs	r0, r0, r3
    70e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    70ea:	b10b      	cbz	r3, 70f0 <__sflush_r+0x54>
    70ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    70ee:	1ac0      	subs	r0, r0, r3
    70f0:	69e1      	ldr	r1, [r4, #28]
    70f2:	4602      	mov	r2, r0
    70f4:	2300      	movs	r3, #0
    70f6:	4640      	mov	r0, r8
    70f8:	47a8      	blx	r5
    70fa:	1c41      	adds	r1, r0, #1
    70fc:	d141      	bne.n	7182 <__sflush_r+0xe6>
    70fe:	f8d8 3000 	ldr.w	r3, [r8]
    7102:	2b00      	cmp	r3, #0
    7104:	d03d      	beq.n	7182 <__sflush_r+0xe6>
    7106:	2b1d      	cmp	r3, #29
    7108:	d001      	beq.n	710e <__sflush_r+0x72>
    710a:	2b16      	cmp	r3, #22
    710c:	d156      	bne.n	71bc <__sflush_r+0x120>
    710e:	89a3      	ldrh	r3, [r4, #12]
    7110:	6922      	ldr	r2, [r4, #16]
    7112:	6022      	str	r2, [r4, #0]
    7114:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    7118:	2100      	movs	r1, #0
    711a:	6061      	str	r1, [r4, #4]
    711c:	81a3      	strh	r3, [r4, #12]
    711e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7120:	f8c8 6000 	str.w	r6, [r8]
    7124:	b321      	cbz	r1, 7170 <__sflush_r+0xd4>
    7126:	f104 0340 	add.w	r3, r4, #64	; 0x40
    712a:	4299      	cmp	r1, r3
    712c:	d002      	beq.n	7134 <__sflush_r+0x98>
    712e:	4640      	mov	r0, r8
    7130:	f7fd fcc8 	bl	4ac4 <_free_r>
    7134:	2000      	movs	r0, #0
    7136:	6320      	str	r0, [r4, #48]	; 0x30
    7138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    713c:	6926      	ldr	r6, [r4, #16]
    713e:	b1be      	cbz	r6, 7170 <__sflush_r+0xd4>
    7140:	b293      	uxth	r3, r2
    7142:	6825      	ldr	r5, [r4, #0]
    7144:	6026      	str	r6, [r4, #0]
    7146:	079a      	lsls	r2, r3, #30
    7148:	bf0c      	ite	eq
    714a:	6963      	ldreq	r3, [r4, #20]
    714c:	2300      	movne	r3, #0
    714e:	1bad      	subs	r5, r5, r6
    7150:	60a3      	str	r3, [r4, #8]
    7152:	e00b      	b.n	716c <__sflush_r+0xd0>
    7154:	462b      	mov	r3, r5
    7156:	4632      	mov	r2, r6
    7158:	69e1      	ldr	r1, [r4, #28]
    715a:	6a67      	ldr	r7, [r4, #36]	; 0x24
    715c:	4640      	mov	r0, r8
    715e:	47b8      	blx	r7
    7160:	f1b0 0c00 	subs.w	ip, r0, #0
    7164:	eba5 050c 	sub.w	r5, r5, ip
    7168:	4466      	add	r6, ip
    716a:	dd17      	ble.n	719c <__sflush_r+0x100>
    716c:	2d00      	cmp	r5, #0
    716e:	dcf1      	bgt.n	7154 <__sflush_r+0xb8>
    7170:	2000      	movs	r0, #0
    7172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7176:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    7178:	2b00      	cmp	r3, #0
    717a:	dc9d      	bgt.n	70b8 <__sflush_r+0x1c>
    717c:	e7f8      	b.n	7170 <__sflush_r+0xd4>
    717e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7180:	e7ae      	b.n	70e0 <__sflush_r+0x44>
    7182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    7186:	6922      	ldr	r2, [r4, #16]
    7188:	6022      	str	r2, [r4, #0]
    718a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    718e:	81a3      	strh	r3, [r4, #12]
    7190:	2200      	movs	r2, #0
    7192:	04db      	lsls	r3, r3, #19
    7194:	6062      	str	r2, [r4, #4]
    7196:	d5c2      	bpl.n	711e <__sflush_r+0x82>
    7198:	6520      	str	r0, [r4, #80]	; 0x50
    719a:	e7c0      	b.n	711e <__sflush_r+0x82>
    719c:	89a3      	ldrh	r3, [r4, #12]
    719e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    71a2:	f04f 30ff 	mov.w	r0, #4294967295
    71a6:	81a3      	strh	r3, [r4, #12]
    71a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    71ac:	f8d8 3000 	ldr.w	r3, [r8]
    71b0:	2b00      	cmp	r3, #0
    71b2:	d093      	beq.n	70dc <__sflush_r+0x40>
    71b4:	2b1d      	cmp	r3, #29
    71b6:	d006      	beq.n	71c6 <__sflush_r+0x12a>
    71b8:	2b16      	cmp	r3, #22
    71ba:	d004      	beq.n	71c6 <__sflush_r+0x12a>
    71bc:	89a3      	ldrh	r3, [r4, #12]
    71be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    71c2:	81a3      	strh	r3, [r4, #12]
    71c4:	e7d5      	b.n	7172 <__sflush_r+0xd6>
    71c6:	f8c8 6000 	str.w	r6, [r8]
    71ca:	e7d1      	b.n	7170 <__sflush_r+0xd4>

000071cc <_fflush_r>:
    71cc:	b538      	push	{r3, r4, r5, lr}
    71ce:	460c      	mov	r4, r1
    71d0:	4605      	mov	r5, r0
    71d2:	b108      	cbz	r0, 71d8 <_fflush_r+0xc>
    71d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    71d6:	b303      	cbz	r3, 721a <_fflush_r+0x4e>
    71d8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    71dc:	b188      	cbz	r0, 7202 <_fflush_r+0x36>
    71de:	6e63      	ldr	r3, [r4, #100]	; 0x64
    71e0:	07db      	lsls	r3, r3, #31
    71e2:	d401      	bmi.n	71e8 <_fflush_r+0x1c>
    71e4:	0581      	lsls	r1, r0, #22
    71e6:	d50f      	bpl.n	7208 <_fflush_r+0x3c>
    71e8:	4628      	mov	r0, r5
    71ea:	4621      	mov	r1, r4
    71ec:	f7ff ff56 	bl	709c <__sflush_r>
    71f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
    71f2:	07da      	lsls	r2, r3, #31
    71f4:	4605      	mov	r5, r0
    71f6:	d402      	bmi.n	71fe <_fflush_r+0x32>
    71f8:	89a3      	ldrh	r3, [r4, #12]
    71fa:	059b      	lsls	r3, r3, #22
    71fc:	d508      	bpl.n	7210 <_fflush_r+0x44>
    71fe:	4628      	mov	r0, r5
    7200:	bd38      	pop	{r3, r4, r5, pc}
    7202:	4605      	mov	r5, r0
    7204:	4628      	mov	r0, r5
    7206:	bd38      	pop	{r3, r4, r5, pc}
    7208:	6da0      	ldr	r0, [r4, #88]	; 0x58
    720a:	f7fd faf1 	bl	47f0 <__retarget_lock_acquire_recursive>
    720e:	e7eb      	b.n	71e8 <_fflush_r+0x1c>
    7210:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7212:	f7fd faef 	bl	47f4 <__retarget_lock_release_recursive>
    7216:	4628      	mov	r0, r5
    7218:	bd38      	pop	{r3, r4, r5, pc}
    721a:	f7fd f855 	bl	42c8 <__sinit>
    721e:	e7db      	b.n	71d8 <_fflush_r+0xc>

00007220 <_localeconv_r>:
    7220:	4800      	ldr	r0, [pc, #0]	; (7224 <_localeconv_r+0x4>)
    7222:	4770      	bx	lr
    7224:	20001234 	.word	0x20001234
	...

00007230 <memchr>:
    7230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    7234:	2a10      	cmp	r2, #16
    7236:	db2b      	blt.n	7290 <memchr+0x60>
    7238:	f010 0f07 	tst.w	r0, #7
    723c:	d008      	beq.n	7250 <memchr+0x20>
    723e:	f810 3b01 	ldrb.w	r3, [r0], #1
    7242:	3a01      	subs	r2, #1
    7244:	428b      	cmp	r3, r1
    7246:	d02d      	beq.n	72a4 <memchr+0x74>
    7248:	f010 0f07 	tst.w	r0, #7
    724c:	b342      	cbz	r2, 72a0 <memchr+0x70>
    724e:	d1f6      	bne.n	723e <memchr+0xe>
    7250:	b4f0      	push	{r4, r5, r6, r7}
    7252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    7256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    725a:	f022 0407 	bic.w	r4, r2, #7
    725e:	f07f 0700 	mvns.w	r7, #0
    7262:	2300      	movs	r3, #0
    7264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    7268:	3c08      	subs	r4, #8
    726a:	ea85 0501 	eor.w	r5, r5, r1
    726e:	ea86 0601 	eor.w	r6, r6, r1
    7272:	fa85 f547 	uadd8	r5, r5, r7
    7276:	faa3 f587 	sel	r5, r3, r7
    727a:	fa86 f647 	uadd8	r6, r6, r7
    727e:	faa5 f687 	sel	r6, r5, r7
    7282:	b98e      	cbnz	r6, 72a8 <memchr+0x78>
    7284:	d1ee      	bne.n	7264 <memchr+0x34>
    7286:	bcf0      	pop	{r4, r5, r6, r7}
    7288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    728c:	f002 0207 	and.w	r2, r2, #7
    7290:	b132      	cbz	r2, 72a0 <memchr+0x70>
    7292:	f810 3b01 	ldrb.w	r3, [r0], #1
    7296:	3a01      	subs	r2, #1
    7298:	ea83 0301 	eor.w	r3, r3, r1
    729c:	b113      	cbz	r3, 72a4 <memchr+0x74>
    729e:	d1f8      	bne.n	7292 <memchr+0x62>
    72a0:	2000      	movs	r0, #0
    72a2:	4770      	bx	lr
    72a4:	3801      	subs	r0, #1
    72a6:	4770      	bx	lr
    72a8:	2d00      	cmp	r5, #0
    72aa:	bf06      	itte	eq
    72ac:	4635      	moveq	r5, r6
    72ae:	3803      	subeq	r0, #3
    72b0:	3807      	subne	r0, #7
    72b2:	f015 0f01 	tst.w	r5, #1
    72b6:	d107      	bne.n	72c8 <memchr+0x98>
    72b8:	3001      	adds	r0, #1
    72ba:	f415 7f80 	tst.w	r5, #256	; 0x100
    72be:	bf02      	ittt	eq
    72c0:	3001      	addeq	r0, #1
    72c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    72c6:	3001      	addeq	r0, #1
    72c8:	bcf0      	pop	{r4, r5, r6, r7}
    72ca:	3801      	subs	r0, #1
    72cc:	4770      	bx	lr
    72ce:	bf00      	nop

000072d0 <frexp>:
    72d0:	b430      	push	{r4, r5}
    72d2:	b082      	sub	sp, #8
    72d4:	ed8d 0b00 	vstr	d0, [sp]
    72d8:	9a01      	ldr	r2, [sp, #4]
    72da:	4c19      	ldr	r4, [pc, #100]	; (7340 <frexp+0x70>)
    72dc:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    72e0:	2100      	movs	r1, #0
    72e2:	42a3      	cmp	r3, r4
    72e4:	6001      	str	r1, [r0, #0]
    72e6:	dc21      	bgt.n	732c <frexp+0x5c>
    72e8:	9c00      	ldr	r4, [sp, #0]
    72ea:	431c      	orrs	r4, r3
    72ec:	d01e      	beq.n	732c <frexp+0x5c>
    72ee:	4c15      	ldr	r4, [pc, #84]	; (7344 <frexp+0x74>)
    72f0:	4014      	ands	r4, r2
    72f2:	b954      	cbnz	r4, 730a <frexp+0x3a>
    72f4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 7338 <frexp+0x68>
    72f8:	ee20 7b07 	vmul.f64	d7, d0, d7
    72fc:	ed8d 7b00 	vstr	d7, [sp]
    7300:	9a01      	ldr	r2, [sp, #4]
    7302:	f06f 0135 	mvn.w	r1, #53	; 0x35
    7306:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    730a:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
    730e:	e9dd 4500 	ldrd	r4, r5, [sp]
    7312:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
    7316:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
    731a:	151b      	asrs	r3, r3, #20
    731c:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
    7320:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    7324:	e9cd 4500 	strd	r4, r5, [sp]
    7328:	440b      	add	r3, r1
    732a:	6003      	str	r3, [r0, #0]
    732c:	ed9d 0b00 	vldr	d0, [sp]
    7330:	b002      	add	sp, #8
    7332:	bc30      	pop	{r4, r5}
    7334:	4770      	bx	lr
    7336:	bf00      	nop
    7338:	00000000 	.word	0x00000000
    733c:	43500000 	.word	0x43500000
    7340:	7fefffff 	.word	0x7fefffff
    7344:	7ff00000 	.word	0x7ff00000

00007348 <__assert_func>:
    7348:	b500      	push	{lr}
    734a:	4c0b      	ldr	r4, [pc, #44]	; (7378 <__assert_func+0x30>)
    734c:	6825      	ldr	r5, [r4, #0]
    734e:	4614      	mov	r4, r2
    7350:	68ee      	ldr	r6, [r5, #12]
    7352:	461a      	mov	r2, r3
    7354:	b085      	sub	sp, #20
    7356:	4603      	mov	r3, r0
    7358:	460d      	mov	r5, r1
    735a:	b14c      	cbz	r4, 7370 <__assert_func+0x28>
    735c:	4907      	ldr	r1, [pc, #28]	; (737c <__assert_func+0x34>)
    735e:	9500      	str	r5, [sp, #0]
    7360:	e9cd 1401 	strd	r1, r4, [sp, #4]
    7364:	4630      	mov	r0, r6
    7366:	4906      	ldr	r1, [pc, #24]	; (7380 <__assert_func+0x38>)
    7368:	f000 ff86 	bl	8278 <fiprintf>
    736c:	f7fb f8fc 	bl	2568 <abort>
    7370:	4904      	ldr	r1, [pc, #16]	; (7384 <__assert_func+0x3c>)
    7372:	460c      	mov	r4, r1
    7374:	e7f3      	b.n	735e <__assert_func+0x16>
    7376:	bf00      	nop
    7378:	200016cc 	.word	0x200016cc
    737c:	2000058c 	.word	0x2000058c
    7380:	2000059c 	.word	0x2000059c
    7384:	20000598 	.word	0x20000598

00007388 <_calloc_r>:
    7388:	b538      	push	{r3, r4, r5, lr}
    738a:	fba1 1402 	umull	r1, r4, r1, r2
    738e:	bb8c      	cbnz	r4, 73f4 <_calloc_r+0x6c>
    7390:	f7fc fa4a 	bl	3828 <_malloc_r>
    7394:	4605      	mov	r5, r0
    7396:	b1e0      	cbz	r0, 73d2 <_calloc_r+0x4a>
    7398:	f850 2c04 	ldr.w	r2, [r0, #-4]
    739c:	f022 0203 	bic.w	r2, r2, #3
    73a0:	3a04      	subs	r2, #4
    73a2:	2a24      	cmp	r2, #36	; 0x24
    73a4:	d817      	bhi.n	73d6 <_calloc_r+0x4e>
    73a6:	2a13      	cmp	r2, #19
    73a8:	d91a      	bls.n	73e0 <_calloc_r+0x58>
    73aa:	2a1b      	cmp	r2, #27
    73ac:	e9c0 4400 	strd	r4, r4, [r0]
    73b0:	d91d      	bls.n	73ee <_calloc_r+0x66>
    73b2:	2a24      	cmp	r2, #36	; 0x24
    73b4:	bf14      	ite	ne
    73b6:	f100 0210 	addne.w	r2, r0, #16
    73ba:	f100 0218 	addeq.w	r2, r0, #24
    73be:	f04f 0300 	mov.w	r3, #0
    73c2:	e9c0 4402 	strd	r4, r4, [r0, #8]
    73c6:	bf04      	itt	eq
    73c8:	6104      	streq	r4, [r0, #16]
    73ca:	6144      	streq	r4, [r0, #20]
    73cc:	e9c2 3300 	strd	r3, r3, [r2]
    73d0:	6093      	str	r3, [r2, #8]
    73d2:	4628      	mov	r0, r5
    73d4:	bd38      	pop	{r3, r4, r5, pc}
    73d6:	4621      	mov	r1, r4
    73d8:	f7fd f8ec 	bl	45b4 <memset>
    73dc:	4628      	mov	r0, r5
    73de:	bd38      	pop	{r3, r4, r5, pc}
    73e0:	4602      	mov	r2, r0
    73e2:	2300      	movs	r3, #0
    73e4:	e9c2 3300 	strd	r3, r3, [r2]
    73e8:	6093      	str	r3, [r2, #8]
    73ea:	4628      	mov	r0, r5
    73ec:	bd38      	pop	{r3, r4, r5, pc}
    73ee:	f100 0208 	add.w	r2, r0, #8
    73f2:	e7f6      	b.n	73e2 <_calloc_r+0x5a>
    73f4:	f7fd f9ce 	bl	4794 <__errno>
    73f8:	230c      	movs	r3, #12
    73fa:	2500      	movs	r5, #0
    73fc:	6003      	str	r3, [r0, #0]
    73fe:	e7e8      	b.n	73d2 <_calloc_r+0x4a>

00007400 <quorem>:
    7400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7404:	6903      	ldr	r3, [r0, #16]
    7406:	690c      	ldr	r4, [r1, #16]
    7408:	42a3      	cmp	r3, r4
    740a:	b083      	sub	sp, #12
    740c:	f2c0 8087 	blt.w	751e <quorem+0x11e>
    7410:	3c01      	subs	r4, #1
    7412:	f101 0514 	add.w	r5, r1, #20
    7416:	00a3      	lsls	r3, r4, #2
    7418:	f100 0814 	add.w	r8, r0, #20
    741c:	9300      	str	r3, [sp, #0]
    741e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    7422:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    7426:	3301      	adds	r3, #1
    7428:	4681      	mov	r9, r0
    742a:	429a      	cmp	r2, r3
    742c:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    7430:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    7434:	9001      	str	r0, [sp, #4]
    7436:	fbb2 f6f3 	udiv	r6, r2, r3
    743a:	d33b      	bcc.n	74b4 <quorem+0xb4>
    743c:	f04f 0c00 	mov.w	ip, #0
    7440:	46ae      	mov	lr, r5
    7442:	4640      	mov	r0, r8
    7444:	46e2      	mov	sl, ip
    7446:	4663      	mov	r3, ip
    7448:	f85e bb04 	ldr.w	fp, [lr], #4
    744c:	6802      	ldr	r2, [r0, #0]
    744e:	fa1f fc8b 	uxth.w	ip, fp
    7452:	fb06 330c 	mla	r3, r6, ip, r3
    7456:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    745a:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    745e:	fb06 cc0b 	mla	ip, r6, fp, ip
    7462:	b29b      	uxth	r3, r3
    7464:	ebaa 0303 	sub.w	r3, sl, r3
    7468:	fa1f fa8c 	uxth.w	sl, ip
    746c:	fa13 f382 	uxtah	r3, r3, r2
    7470:	ebca 4212 	rsb	r2, sl, r2, lsr #16
    7474:	eb02 4223 	add.w	r2, r2, r3, asr #16
    7478:	b29b      	uxth	r3, r3
    747a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    747e:	4577      	cmp	r7, lr
    7480:	f840 3b04 	str.w	r3, [r0], #4
    7484:	ea4f 4a22 	mov.w	sl, r2, asr #16
    7488:	ea4f 431c 	mov.w	r3, ip, lsr #16
    748c:	d2dc      	bcs.n	7448 <quorem+0x48>
    748e:	9b00      	ldr	r3, [sp, #0]
    7490:	f858 3003 	ldr.w	r3, [r8, r3]
    7494:	b973      	cbnz	r3, 74b4 <quorem+0xb4>
    7496:	9b01      	ldr	r3, [sp, #4]
    7498:	3b04      	subs	r3, #4
    749a:	4598      	cmp	r8, r3
    749c:	d304      	bcc.n	74a8 <quorem+0xa8>
    749e:	e007      	b.n	74b0 <quorem+0xb0>
    74a0:	4598      	cmp	r8, r3
    74a2:	f104 34ff 	add.w	r4, r4, #4294967295
    74a6:	d203      	bcs.n	74b0 <quorem+0xb0>
    74a8:	f853 2904 	ldr.w	r2, [r3], #-4
    74ac:	2a00      	cmp	r2, #0
    74ae:	d0f7      	beq.n	74a0 <quorem+0xa0>
    74b0:	f8c9 4010 	str.w	r4, [r9, #16]
    74b4:	4648      	mov	r0, r9
    74b6:	f7fd fea7 	bl	5208 <__mcmp>
    74ba:	2800      	cmp	r0, #0
    74bc:	db2b      	blt.n	7516 <quorem+0x116>
    74be:	3601      	adds	r6, #1
    74c0:	4641      	mov	r1, r8
    74c2:	2300      	movs	r3, #0
    74c4:	f855 0b04 	ldr.w	r0, [r5], #4
    74c8:	f8d1 c000 	ldr.w	ip, [r1]
    74cc:	b282      	uxth	r2, r0
    74ce:	1a9a      	subs	r2, r3, r2
    74d0:	0c03      	lsrs	r3, r0, #16
    74d2:	fa12 f28c 	uxtah	r2, r2, ip
    74d6:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    74da:	eb03 4322 	add.w	r3, r3, r2, asr #16
    74de:	b292      	uxth	r2, r2
    74e0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    74e4:	42af      	cmp	r7, r5
    74e6:	f841 2b04 	str.w	r2, [r1], #4
    74ea:	ea4f 4323 	mov.w	r3, r3, asr #16
    74ee:	d2e9      	bcs.n	74c4 <quorem+0xc4>
    74f0:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    74f4:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    74f8:	b96a      	cbnz	r2, 7516 <quorem+0x116>
    74fa:	3b04      	subs	r3, #4
    74fc:	4598      	cmp	r8, r3
    74fe:	d304      	bcc.n	750a <quorem+0x10a>
    7500:	e007      	b.n	7512 <quorem+0x112>
    7502:	4598      	cmp	r8, r3
    7504:	f104 34ff 	add.w	r4, r4, #4294967295
    7508:	d203      	bcs.n	7512 <quorem+0x112>
    750a:	f853 2904 	ldr.w	r2, [r3], #-4
    750e:	2a00      	cmp	r2, #0
    7510:	d0f7      	beq.n	7502 <quorem+0x102>
    7512:	f8c9 4010 	str.w	r4, [r9, #16]
    7516:	4630      	mov	r0, r6
    7518:	b003      	add	sp, #12
    751a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    751e:	2000      	movs	r0, #0
    7520:	b003      	add	sp, #12
    7522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7526:	bf00      	nop

00007528 <_dtoa_r>:
    7528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    752c:	ed2d 8b02 	vpush	{d8}
    7530:	b08f      	sub	sp, #60	; 0x3c
    7532:	ed8d 0b02 	vstr	d0, [sp, #8]
    7536:	9101      	str	r1, [sp, #4]
    7538:	6b81      	ldr	r1, [r0, #56]	; 0x38
    753a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    753c:	9305      	str	r3, [sp, #20]
    753e:	ec57 6b10 	vmov	r6, r7, d0
    7542:	4604      	mov	r4, r0
    7544:	4693      	mov	fp, r2
    7546:	b141      	cbz	r1, 755a <_dtoa_r+0x32>
    7548:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    754a:	604a      	str	r2, [r1, #4]
    754c:	2301      	movs	r3, #1
    754e:	4093      	lsls	r3, r2
    7550:	608b      	str	r3, [r1, #8]
    7552:	f7fd fbf9 	bl	4d48 <_Bfree>
    7556:	2300      	movs	r3, #0
    7558:	63a3      	str	r3, [r4, #56]	; 0x38
    755a:	f1b7 0800 	subs.w	r8, r7, #0
    755e:	bfb4      	ite	lt
    7560:	2301      	movlt	r3, #1
    7562:	2300      	movge	r3, #0
    7564:	602b      	str	r3, [r5, #0]
    7566:	4bbe      	ldr	r3, [pc, #760]	; (7860 <_dtoa_r+0x338>)
    7568:	bfbc      	itt	lt
    756a:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
    756e:	f8cd 800c 	strlt.w	r8, [sp, #12]
    7572:	ea33 0308 	bics.w	r3, r3, r8
    7576:	f000 809f 	beq.w	76b8 <_dtoa_r+0x190>
    757a:	ed9d 8b02 	vldr	d8, [sp, #8]
    757e:	eeb5 8b40 	vcmp.f64	d8, #0.0
    7582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7586:	d111      	bne.n	75ac <_dtoa_r+0x84>
    7588:	9a05      	ldr	r2, [sp, #20]
    758a:	2301      	movs	r3, #1
    758c:	6013      	str	r3, [r2, #0]
    758e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7590:	2b00      	cmp	r3, #0
    7592:	f000 823f 	beq.w	7a14 <_dtoa_r+0x4ec>
    7596:	4bb3      	ldr	r3, [pc, #716]	; (7864 <_dtoa_r+0x33c>)
    7598:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    759a:	6013      	str	r3, [r2, #0]
    759c:	3b01      	subs	r3, #1
    759e:	9300      	str	r3, [sp, #0]
    75a0:	9800      	ldr	r0, [sp, #0]
    75a2:	b00f      	add	sp, #60	; 0x3c
    75a4:	ecbd 8b02 	vpop	{d8}
    75a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    75ac:	aa0c      	add	r2, sp, #48	; 0x30
    75ae:	a90d      	add	r1, sp, #52	; 0x34
    75b0:	4620      	mov	r0, r4
    75b2:	eeb0 0b48 	vmov.f64	d0, d8
    75b6:	f7fd fef3 	bl	53a0 <__d2b>
    75ba:	ea5f 5318 	movs.w	r3, r8, lsr #20
    75be:	4605      	mov	r5, r0
    75c0:	f040 8092 	bne.w	76e8 <_dtoa_r+0x1c0>
    75c4:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
    75c8:	440b      	add	r3, r1
    75ca:	f203 4232 	addw	r2, r3, #1074	; 0x432
    75ce:	2a20      	cmp	r2, #32
    75d0:	f340 82fa 	ble.w	7bc8 <_dtoa_r+0x6a0>
    75d4:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    75d8:	fa08 f802 	lsl.w	r8, r8, r2
    75dc:	f203 4212 	addw	r2, r3, #1042	; 0x412
    75e0:	40d6      	lsrs	r6, r2
    75e2:	ea48 0206 	orr.w	r2, r8, r6
    75e6:	ee07 2a10 	vmov	s14, r2
    75ea:	eeb8 7b47 	vcvt.f64.u32	d7, s14
    75ee:	1e58      	subs	r0, r3, #1
    75f0:	ee17 6a90 	vmov	r6, s15
    75f4:	ec53 2b17 	vmov	r2, r3, d7
    75f8:	f04f 0a01 	mov.w	sl, #1
    75fc:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
    7600:	ed9f 3b91 	vldr	d3, [pc, #580]	; 7848 <_dtoa_r+0x320>
    7604:	ed9f 7b92 	vldr	d7, [pc, #584]	; 7850 <_dtoa_r+0x328>
    7608:	ed9f 5b93 	vldr	d5, [pc, #588]	; 7858 <_dtoa_r+0x330>
    760c:	ee06 0a90 	vmov	s13, r0
    7610:	ec43 2b12 	vmov	d2, r2, r3
    7614:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    7618:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    761c:	ee32 6b46 	vsub.f64	d6, d2, d6
    7620:	eea6 7b03 	vfma.f64	d7, d6, d3
    7624:	eea4 7b05 	vfma.f64	d7, d4, d5
    7628:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    762c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    7630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7634:	ee16 7a90 	vmov	r7, s13
    7638:	d508      	bpl.n	764c <_dtoa_r+0x124>
    763a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    763e:	eeb4 6b47 	vcmp.f64	d6, d7
    7642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7646:	bf18      	it	ne
    7648:	f107 37ff 	addne.w	r7, r7, #4294967295
    764c:	2f16      	cmp	r7, #22
    764e:	f200 8145 	bhi.w	78dc <_dtoa_r+0x3b4>
    7652:	4b85      	ldr	r3, [pc, #532]	; (7868 <_dtoa_r+0x340>)
    7654:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    7658:	ed93 7b00 	vldr	d7, [r3]
    765c:	eeb4 8bc7 	vcmpe.f64	d8, d7
    7660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7664:	d557      	bpl.n	7716 <_dtoa_r+0x1ee>
    7666:	1a09      	subs	r1, r1, r0
    7668:	2300      	movs	r3, #0
    766a:	f1b1 0801 	subs.w	r8, r1, #1
    766e:	f107 37ff 	add.w	r7, r7, #4294967295
    7672:	930a      	str	r3, [sp, #40]	; 0x28
    7674:	f100 8139 	bmi.w	78ea <_dtoa_r+0x3c2>
    7678:	2300      	movs	r3, #0
    767a:	9306      	str	r3, [sp, #24]
    767c:	2f00      	cmp	r7, #0
    767e:	da52      	bge.n	7726 <_dtoa_r+0x1fe>
    7680:	9b06      	ldr	r3, [sp, #24]
    7682:	9704      	str	r7, [sp, #16]
    7684:	1bdb      	subs	r3, r3, r7
    7686:	9306      	str	r3, [sp, #24]
    7688:	427b      	negs	r3, r7
    768a:	9308      	str	r3, [sp, #32]
    768c:	9b01      	ldr	r3, [sp, #4]
    768e:	2b09      	cmp	r3, #9
    7690:	f04f 0700 	mov.w	r7, #0
    7694:	d84e      	bhi.n	7734 <_dtoa_r+0x20c>
    7696:	2b05      	cmp	r3, #5
    7698:	f340 829d 	ble.w	7bd6 <_dtoa_r+0x6ae>
    769c:	3b04      	subs	r3, #4
    769e:	9301      	str	r3, [sp, #4]
    76a0:	2600      	movs	r6, #0
    76a2:	9b01      	ldr	r3, [sp, #4]
    76a4:	1e9a      	subs	r2, r3, #2
    76a6:	2a03      	cmp	r2, #3
    76a8:	f200 8125 	bhi.w	78f6 <_dtoa_r+0x3ce>
    76ac:	e8df f012 	tbh	[pc, r2, lsl #1]
    76b0:	03a703aa 	.word	0x03a703aa
    76b4:	037e039d 	.word	0x037e039d
    76b8:	9a05      	ldr	r2, [sp, #20]
    76ba:	f3c8 0813 	ubfx	r8, r8, #0, #20
    76be:	f242 730f 	movw	r3, #9999	; 0x270f
    76c2:	ea58 0806 	orrs.w	r8, r8, r6
    76c6:	6013      	str	r3, [r2, #0]
    76c8:	d11e      	bne.n	7708 <_dtoa_r+0x1e0>
    76ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    76cc:	2b00      	cmp	r3, #0
    76ce:	f000 8591 	beq.w	81f4 <_dtoa_r+0xccc>
    76d2:	4b66      	ldr	r3, [pc, #408]	; (786c <_dtoa_r+0x344>)
    76d4:	9300      	str	r3, [sp, #0]
    76d6:	3308      	adds	r3, #8
    76d8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    76da:	9800      	ldr	r0, [sp, #0]
    76dc:	6013      	str	r3, [r2, #0]
    76de:	b00f      	add	sp, #60	; 0x3c
    76e0:	ecbd 8b02 	vpop	{d8}
    76e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    76e8:	ee18 6a90 	vmov	r6, s17
    76ec:	f3c6 0613 	ubfx	r6, r6, #0, #20
    76f0:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
    76f4:	ec53 2b18 	vmov	r2, r3, d8
    76f8:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
    76fc:	990c      	ldr	r1, [sp, #48]	; 0x30
    76fe:	f04f 0a00 	mov.w	sl, #0
    7702:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    7706:	e77b      	b.n	7600 <_dtoa_r+0xd8>
    7708:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    770a:	2b00      	cmp	r3, #0
    770c:	f040 833b 	bne.w	7d86 <_dtoa_r+0x85e>
    7710:	4b57      	ldr	r3, [pc, #348]	; (7870 <_dtoa_r+0x348>)
    7712:	9300      	str	r3, [sp, #0]
    7714:	e744      	b.n	75a0 <_dtoa_r+0x78>
    7716:	1a09      	subs	r1, r1, r0
    7718:	2300      	movs	r3, #0
    771a:	f1b1 0801 	subs.w	r8, r1, #1
    771e:	930a      	str	r3, [sp, #40]	; 0x28
    7720:	f100 80e3 	bmi.w	78ea <_dtoa_r+0x3c2>
    7724:	9306      	str	r3, [sp, #24]
    7726:	2300      	movs	r3, #0
    7728:	9308      	str	r3, [sp, #32]
    772a:	9b01      	ldr	r3, [sp, #4]
    772c:	9704      	str	r7, [sp, #16]
    772e:	2b09      	cmp	r3, #9
    7730:	44b8      	add	r8, r7
    7732:	d9b0      	bls.n	7696 <_dtoa_r+0x16e>
    7734:	2300      	movs	r3, #0
    7736:	2601      	movs	r6, #1
    7738:	9301      	str	r3, [sp, #4]
    773a:	9607      	str	r6, [sp, #28]
    773c:	f04f 39ff 	mov.w	r9, #4294967295
    7740:	469b      	mov	fp, r3
    7742:	2100      	movs	r1, #0
    7744:	63e1      	str	r1, [r4, #60]	; 0x3c
    7746:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    774a:	4620      	mov	r0, r4
    774c:	f7fd fad6 	bl	4cfc <_Balloc>
    7750:	9000      	str	r0, [sp, #0]
    7752:	2800      	cmp	r0, #0
    7754:	f000 8540 	beq.w	81d8 <_dtoa_r+0xcb0>
    7758:	9b00      	ldr	r3, [sp, #0]
    775a:	63a3      	str	r3, [r4, #56]	; 0x38
    775c:	f1b9 0f0e 	cmp.w	r9, #14
    7760:	f200 80dc 	bhi.w	791c <_dtoa_r+0x3f4>
    7764:	2e00      	cmp	r6, #0
    7766:	f000 80d9 	beq.w	791c <_dtoa_r+0x3f4>
    776a:	9b04      	ldr	r3, [sp, #16]
    776c:	2b00      	cmp	r3, #0
    776e:	f340 83de 	ble.w	7f2e <_dtoa_r+0xa06>
    7772:	4a3d      	ldr	r2, [pc, #244]	; (7868 <_dtoa_r+0x340>)
    7774:	f003 010f 	and.w	r1, r3, #15
    7778:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    777c:	ed92 7b00 	vldr	d7, [r2]
    7780:	111a      	asrs	r2, r3, #4
    7782:	05db      	lsls	r3, r3, #23
    7784:	f140 8382 	bpl.w	7e8c <_dtoa_r+0x964>
    7788:	493a      	ldr	r1, [pc, #232]	; (7874 <_dtoa_r+0x34c>)
    778a:	ed91 6b08 	vldr	d6, [r1, #32]
    778e:	f002 020f 	and.w	r2, r2, #15
    7792:	2003      	movs	r0, #3
    7794:	ee88 5b06 	vdiv.f64	d5, d8, d6
    7798:	b15a      	cbz	r2, 77b2 <_dtoa_r+0x28a>
    779a:	4936      	ldr	r1, [pc, #216]	; (7874 <_dtoa_r+0x34c>)
    779c:	07d6      	lsls	r6, r2, #31
    779e:	d504      	bpl.n	77aa <_dtoa_r+0x282>
    77a0:	ed91 6b00 	vldr	d6, [r1]
    77a4:	3001      	adds	r0, #1
    77a6:	ee27 7b06 	vmul.f64	d7, d7, d6
    77aa:	1052      	asrs	r2, r2, #1
    77ac:	f101 0108 	add.w	r1, r1, #8
    77b0:	d1f4      	bne.n	779c <_dtoa_r+0x274>
    77b2:	ee85 6b07 	vdiv.f64	d6, d5, d7
    77b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    77b8:	b13b      	cbz	r3, 77ca <_dtoa_r+0x2a2>
    77ba:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    77be:	eeb4 6bc7 	vcmpe.f64	d6, d7
    77c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    77c6:	f100 84ae 	bmi.w	8126 <_dtoa_r+0xbfe>
    77ca:	ee07 0a90 	vmov	s15, r0
    77ce:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    77d2:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    77d6:	eea5 7b06 	vfma.f64	d7, d5, d6
    77da:	ee17 2a90 	vmov	r2, s15
    77de:	ec51 0b17 	vmov	r0, r1, d7
    77e2:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    77e6:	f1b9 0f00 	cmp.w	r9, #0
    77ea:	f000 8388 	beq.w	7efe <_dtoa_r+0x9d6>
    77ee:	9e04      	ldr	r6, [sp, #16]
    77f0:	464a      	mov	r2, r9
    77f2:	9b07      	ldr	r3, [sp, #28]
    77f4:	2b00      	cmp	r3, #0
    77f6:	f000 8447 	beq.w	8088 <_dtoa_r+0xb60>
    77fa:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    77fe:	4b1a      	ldr	r3, [pc, #104]	; (7868 <_dtoa_r+0x340>)
    7800:	eefd 4bc6 	vcvt.s32.f64	s9, d6
    7804:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    7808:	eeb8 7be4 	vcvt.f64.s32	d7, s9
    780c:	ee36 7b47 	vsub.f64	d7, d6, d7
    7810:	ed1c 6b02 	vldr	d6, [ip, #-8]
    7814:	ee83 5b06 	vdiv.f64	d5, d3, d6
    7818:	ec41 0b16 	vmov	d6, r0, r1
    781c:	ee14 0a90 	vmov	r0, s9
    7820:	ee35 5b46 	vsub.f64	d5, d5, d6
    7824:	9900      	ldr	r1, [sp, #0]
    7826:	eeb4 5bc7 	vcmpe.f64	d5, d7
    782a:	3030      	adds	r0, #48	; 0x30
    782c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7830:	f801 0b01 	strb.w	r0, [r1], #1
    7834:	f300 84ac 	bgt.w	8190 <_dtoa_r+0xc68>
    7838:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
    783c:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    7840:	f04f 0c00 	mov.w	ip, #0
    7844:	e031      	b.n	78aa <_dtoa_r+0x382>
    7846:	bf00      	nop
    7848:	636f4361 	.word	0x636f4361
    784c:	3fd287a7 	.word	0x3fd287a7
    7850:	8b60c8b3 	.word	0x8b60c8b3
    7854:	3fc68a28 	.word	0x3fc68a28
    7858:	509f79fb 	.word	0x509f79fb
    785c:	3fd34413 	.word	0x3fd34413
    7860:	7ff00000 	.word	0x7ff00000
    7864:	200007ed 	.word	0x200007ed
    7868:	200002a8 	.word	0x200002a8
    786c:	20000740 	.word	0x20000740
    7870:	2000074c 	.word	0x2000074c
    7874:	20000280 	.word	0x20000280
    7878:	f10c 0c01 	add.w	ip, ip, #1
    787c:	4594      	cmp	ip, r2
    787e:	da4d      	bge.n	791c <_dtoa_r+0x3f4>
    7880:	ee27 7b04 	vmul.f64	d7, d7, d4
    7884:	ee25 5b04 	vmul.f64	d5, d5, d4
    7888:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    788c:	ee16 3a90 	vmov	r3, s13
    7890:	eeb8 3be6 	vcvt.f64.s32	d3, s13
    7894:	3330      	adds	r3, #48	; 0x30
    7896:	ee37 7b43 	vsub.f64	d7, d7, d3
    789a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    789e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    78a2:	f801 3b01 	strb.w	r3, [r1], #1
    78a6:	f100 8473 	bmi.w	8190 <_dtoa_r+0xc68>
    78aa:	ee32 6b47 	vsub.f64	d6, d2, d7
    78ae:	eeb4 6bc5 	vcmpe.f64	d6, d5
    78b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    78b6:	d5df      	bpl.n	7878 <_dtoa_r+0x350>
    78b8:	9a00      	ldr	r2, [sp, #0]
    78ba:	9604      	str	r6, [sp, #16]
    78bc:	e002      	b.n	78c4 <_dtoa_r+0x39c>
    78be:	428a      	cmp	r2, r1
    78c0:	f000 8450 	beq.w	8164 <_dtoa_r+0xc3c>
    78c4:	4689      	mov	r9, r1
    78c6:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    78ca:	2b39      	cmp	r3, #57	; 0x39
    78cc:	d0f7      	beq.n	78be <_dtoa_r+0x396>
    78ce:	3301      	adds	r3, #1
    78d0:	b2db      	uxtb	r3, r3
    78d2:	700b      	strb	r3, [r1, #0]
    78d4:	9b04      	ldr	r3, [sp, #16]
    78d6:	3301      	adds	r3, #1
    78d8:	9304      	str	r3, [sp, #16]
    78da:	e155      	b.n	7b88 <_dtoa_r+0x660>
    78dc:	1a09      	subs	r1, r1, r0
    78de:	2301      	movs	r3, #1
    78e0:	f1b1 0801 	subs.w	r8, r1, #1
    78e4:	930a      	str	r3, [sp, #40]	; 0x28
    78e6:	f57f aec7 	bpl.w	7678 <_dtoa_r+0x150>
    78ea:	f1c1 0301 	rsb	r3, r1, #1
    78ee:	9306      	str	r3, [sp, #24]
    78f0:	f04f 0800 	mov.w	r8, #0
    78f4:	e6c2      	b.n	767c <_dtoa_r+0x154>
    78f6:	2600      	movs	r6, #0
    78f8:	63e6      	str	r6, [r4, #60]	; 0x3c
    78fa:	4631      	mov	r1, r6
    78fc:	4620      	mov	r0, r4
    78fe:	f7fd f9fd 	bl	4cfc <_Balloc>
    7902:	9000      	str	r0, [sp, #0]
    7904:	2800      	cmp	r0, #0
    7906:	f000 8467 	beq.w	81d8 <_dtoa_r+0xcb0>
    790a:	9b00      	ldr	r3, [sp, #0]
    790c:	63a3      	str	r3, [r4, #56]	; 0x38
    790e:	f04f 33ff 	mov.w	r3, #4294967295
    7912:	930b      	str	r3, [sp, #44]	; 0x2c
    7914:	4699      	mov	r9, r3
    7916:	2301      	movs	r3, #1
    7918:	46b3      	mov	fp, r6
    791a:	9307      	str	r3, [sp, #28]
    791c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    791e:	2a00      	cmp	r2, #0
    7920:	db55      	blt.n	79ce <_dtoa_r+0x4a6>
    7922:	9904      	ldr	r1, [sp, #16]
    7924:	290e      	cmp	r1, #14
    7926:	dc52      	bgt.n	79ce <_dtoa_r+0x4a6>
    7928:	4bb7      	ldr	r3, [pc, #732]	; (7c08 <_dtoa_r+0x6e0>)
    792a:	f1bb 0f00 	cmp.w	fp, #0
    792e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    7932:	ed93 6b00 	vldr	d6, [r3]
    7936:	da15      	bge.n	7964 <_dtoa_r+0x43c>
    7938:	f1b9 0f00 	cmp.w	r9, #0
    793c:	dc12      	bgt.n	7964 <_dtoa_r+0x43c>
    793e:	f040 82f2 	bne.w	7f26 <_dtoa_r+0x9fe>
    7942:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    7946:	ee26 7b07 	vmul.f64	d7, d6, d7
    794a:	eeb4 8bc7 	vcmpe.f64	d8, d7
    794e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7952:	46ca      	mov	sl, r9
    7954:	464e      	mov	r6, r9
    7956:	f200 826d 	bhi.w	7e34 <_dtoa_r+0x90c>
    795a:	f8dd 8000 	ldr.w	r8, [sp]
    795e:	ea6f 0b0b 	mvn.w	fp, fp
    7962:	e270      	b.n	7e46 <_dtoa_r+0x91e>
    7964:	ee88 7b06 	vdiv.f64	d7, d8, d6
    7968:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    796c:	9900      	ldr	r1, [sp, #0]
    796e:	ee17 3a10 	vmov	r3, s14
    7972:	f1b9 0f01 	cmp.w	r9, #1
    7976:	f103 0330 	add.w	r3, r3, #48	; 0x30
    797a:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    797e:	f801 3b01 	strb.w	r3, [r1], #1
    7982:	eea5 8b46 	vfms.f64	d8, d5, d6
    7986:	f000 8334 	beq.w	7ff2 <_dtoa_r+0xaca>
    798a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    798e:	2301      	movs	r3, #1
    7990:	e011      	b.n	79b6 <_dtoa_r+0x48e>
    7992:	ee88 7b06 	vdiv.f64	d7, d8, d6
    7996:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    799a:	3301      	adds	r3, #1
    799c:	ee17 2a10 	vmov	r2, s14
    79a0:	454b      	cmp	r3, r9
    79a2:	f102 0230 	add.w	r2, r2, #48	; 0x30
    79a6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    79aa:	f801 2b01 	strb.w	r2, [r1], #1
    79ae:	eea5 8b46 	vfms.f64	d8, d5, d6
    79b2:	f000 831e 	beq.w	7ff2 <_dtoa_r+0xaca>
    79b6:	ee28 8b04 	vmul.f64	d8, d8, d4
    79ba:	eeb5 8b40 	vcmp.f64	d8, #0.0
    79be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    79c2:	d1e6      	bne.n	7992 <_dtoa_r+0x46a>
    79c4:	9b04      	ldr	r3, [sp, #16]
    79c6:	3301      	adds	r3, #1
    79c8:	9304      	str	r3, [sp, #16]
    79ca:	4689      	mov	r9, r1
    79cc:	e0dc      	b.n	7b88 <_dtoa_r+0x660>
    79ce:	9b07      	ldr	r3, [sp, #28]
    79d0:	b343      	cbz	r3, 7a24 <_dtoa_r+0x4fc>
    79d2:	9b01      	ldr	r3, [sp, #4]
    79d4:	2b01      	cmp	r3, #1
    79d6:	f340 8276 	ble.w	7ec6 <_dtoa_r+0x99e>
    79da:	9b08      	ldr	r3, [sp, #32]
    79dc:	f109 3aff 	add.w	sl, r9, #4294967295
    79e0:	4553      	cmp	r3, sl
    79e2:	f280 823f 	bge.w	7e64 <_dtoa_r+0x93c>
    79e6:	9b08      	ldr	r3, [sp, #32]
    79e8:	f8cd a020 	str.w	sl, [sp, #32]
    79ec:	ebaa 0203 	sub.w	r2, sl, r3
    79f0:	4417      	add	r7, r2
    79f2:	f04f 0a00 	mov.w	sl, #0
    79f6:	f1b9 0f00 	cmp.w	r9, #0
    79fa:	f2c0 8325 	blt.w	8048 <_dtoa_r+0xb20>
    79fe:	9b06      	ldr	r3, [sp, #24]
    7a00:	9309      	str	r3, [sp, #36]	; 0x24
    7a02:	444b      	add	r3, r9
    7a04:	44c8      	add	r8, r9
    7a06:	9306      	str	r3, [sp, #24]
    7a08:	2101      	movs	r1, #1
    7a0a:	4620      	mov	r0, r4
    7a0c:	f7fd fa48 	bl	4ea0 <__i2b>
    7a10:	4606      	mov	r6, r0
    7a12:	e00c      	b.n	7a2e <_dtoa_r+0x506>
    7a14:	4b7d      	ldr	r3, [pc, #500]	; (7c0c <_dtoa_r+0x6e4>)
    7a16:	9300      	str	r3, [sp, #0]
    7a18:	9800      	ldr	r0, [sp, #0]
    7a1a:	b00f      	add	sp, #60	; 0x3c
    7a1c:	ecbd 8b02 	vpop	{d8}
    7a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7a24:	9b06      	ldr	r3, [sp, #24]
    7a26:	f8dd a020 	ldr.w	sl, [sp, #32]
    7a2a:	9e07      	ldr	r6, [sp, #28]
    7a2c:	9309      	str	r3, [sp, #36]	; 0x24
    7a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7a30:	b16b      	cbz	r3, 7a4e <_dtoa_r+0x526>
    7a32:	f1b8 0f00 	cmp.w	r8, #0
    7a36:	dd0a      	ble.n	7a4e <_dtoa_r+0x526>
    7a38:	4543      	cmp	r3, r8
    7a3a:	9906      	ldr	r1, [sp, #24]
    7a3c:	461a      	mov	r2, r3
    7a3e:	bfa8      	it	ge
    7a40:	4642      	movge	r2, r8
    7a42:	1a89      	subs	r1, r1, r2
    7a44:	1a9b      	subs	r3, r3, r2
    7a46:	9106      	str	r1, [sp, #24]
    7a48:	9309      	str	r3, [sp, #36]	; 0x24
    7a4a:	eba8 0802 	sub.w	r8, r8, r2
    7a4e:	9b08      	ldr	r3, [sp, #32]
    7a50:	b163      	cbz	r3, 7a6c <_dtoa_r+0x544>
    7a52:	9b07      	ldr	r3, [sp, #28]
    7a54:	2b00      	cmp	r3, #0
    7a56:	f000 82a7 	beq.w	7fa8 <_dtoa_r+0xa80>
    7a5a:	f1ba 0f00 	cmp.w	sl, #0
    7a5e:	f300 8204 	bgt.w	7e6a <_dtoa_r+0x942>
    7a62:	9b08      	ldr	r3, [sp, #32]
    7a64:	ebb3 020a 	subs.w	r2, r3, sl
    7a68:	f040 82ff 	bne.w	806a <_dtoa_r+0xb42>
    7a6c:	2101      	movs	r1, #1
    7a6e:	4620      	mov	r0, r4
    7a70:	f7fd fa16 	bl	4ea0 <__i2b>
    7a74:	2f00      	cmp	r7, #0
    7a76:	4682      	mov	sl, r0
    7a78:	f300 80af 	bgt.w	7bda <_dtoa_r+0x6b2>
    7a7c:	9b01      	ldr	r3, [sp, #4]
    7a7e:	2b01      	cmp	r3, #1
    7a80:	f340 8187 	ble.w	7d92 <_dtoa_r+0x86a>
    7a84:	2300      	movs	r3, #0
    7a86:	9308      	str	r3, [sp, #32]
    7a88:	2001      	movs	r0, #1
    7a8a:	2f00      	cmp	r7, #0
    7a8c:	f040 80b1 	bne.w	7bf2 <_dtoa_r+0x6ca>
    7a90:	4440      	add	r0, r8
    7a92:	f010 001f 	ands.w	r0, r0, #31
    7a96:	f000 817a 	beq.w	7d8e <_dtoa_r+0x866>
    7a9a:	f1c0 0220 	rsb	r2, r0, #32
    7a9e:	2a04      	cmp	r2, #4
    7aa0:	f300 8088 	bgt.w	7bb4 <_dtoa_r+0x68c>
    7aa4:	f040 81f6 	bne.w	7e94 <_dtoa_r+0x96c>
    7aa8:	9b06      	ldr	r3, [sp, #24]
    7aaa:	2b00      	cmp	r3, #0
    7aac:	dd05      	ble.n	7aba <_dtoa_r+0x592>
    7aae:	4629      	mov	r1, r5
    7ab0:	461a      	mov	r2, r3
    7ab2:	4620      	mov	r0, r4
    7ab4:	f7fd fb30 	bl	5118 <__lshift>
    7ab8:	4605      	mov	r5, r0
    7aba:	f1b8 0f00 	cmp.w	r8, #0
    7abe:	dd05      	ble.n	7acc <_dtoa_r+0x5a4>
    7ac0:	4651      	mov	r1, sl
    7ac2:	4642      	mov	r2, r8
    7ac4:	4620      	mov	r0, r4
    7ac6:	f7fd fb27 	bl	5118 <__lshift>
    7aca:	4682      	mov	sl, r0
    7acc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7ace:	2b00      	cmp	r3, #0
    7ad0:	f040 813f 	bne.w	7d52 <_dtoa_r+0x82a>
    7ad4:	f1b9 0f00 	cmp.w	r9, #0
    7ad8:	f340 8125 	ble.w	7d26 <_dtoa_r+0x7fe>
    7adc:	9b07      	ldr	r3, [sp, #28]
    7ade:	2b00      	cmp	r3, #0
    7ae0:	f040 80a3 	bne.w	7c2a <_dtoa_r+0x702>
    7ae4:	9b04      	ldr	r3, [sp, #16]
    7ae6:	3301      	adds	r3, #1
    7ae8:	9304      	str	r3, [sp, #16]
    7aea:	f8dd 8000 	ldr.w	r8, [sp]
    7aee:	2701      	movs	r7, #1
    7af0:	e007      	b.n	7b02 <_dtoa_r+0x5da>
    7af2:	4629      	mov	r1, r5
    7af4:	2300      	movs	r3, #0
    7af6:	220a      	movs	r2, #10
    7af8:	4620      	mov	r0, r4
    7afa:	f7fd f92f 	bl	4d5c <__multadd>
    7afe:	3701      	adds	r7, #1
    7b00:	4605      	mov	r5, r0
    7b02:	4651      	mov	r1, sl
    7b04:	4628      	mov	r0, r5
    7b06:	f7ff fc7b 	bl	7400 <quorem>
    7b0a:	45b9      	cmp	r9, r7
    7b0c:	f100 0030 	add.w	r0, r0, #48	; 0x30
    7b10:	f808 0b01 	strb.w	r0, [r8], #1
    7b14:	dced      	bgt.n	7af2 <_dtoa_r+0x5ca>
    7b16:	f1b9 0f00 	cmp.w	r9, #0
    7b1a:	9a00      	ldr	r2, [sp, #0]
    7b1c:	bfcc      	ite	gt
    7b1e:	46cb      	movgt	fp, r9
    7b20:	f04f 0b01 	movle.w	fp, #1
    7b24:	4603      	mov	r3, r0
    7b26:	4493      	add	fp, r2
    7b28:	2700      	movs	r7, #0
    7b2a:	4629      	mov	r1, r5
    7b2c:	2201      	movs	r2, #1
    7b2e:	4620      	mov	r0, r4
    7b30:	9301      	str	r3, [sp, #4]
    7b32:	f7fd faf1 	bl	5118 <__lshift>
    7b36:	4651      	mov	r1, sl
    7b38:	4605      	mov	r5, r0
    7b3a:	f7fd fb65 	bl	5208 <__mcmp>
    7b3e:	2800      	cmp	r0, #0
    7b40:	f340 81af 	ble.w	7ea2 <_dtoa_r+0x97a>
    7b44:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    7b48:	9a00      	ldr	r2, [sp, #0]
    7b4a:	f10b 3bff 	add.w	fp, fp, #4294967295
    7b4e:	e004      	b.n	7b5a <_dtoa_r+0x632>
    7b50:	455a      	cmp	r2, fp
    7b52:	f000 81b1 	beq.w	7eb8 <_dtoa_r+0x990>
    7b56:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    7b5a:	2b39      	cmp	r3, #57	; 0x39
    7b5c:	f10b 0901 	add.w	r9, fp, #1
    7b60:	d0f6      	beq.n	7b50 <_dtoa_r+0x628>
    7b62:	3301      	adds	r3, #1
    7b64:	f88b 3000 	strb.w	r3, [fp]
    7b68:	4651      	mov	r1, sl
    7b6a:	4620      	mov	r0, r4
    7b6c:	f7fd f8ec 	bl	4d48 <_Bfree>
    7b70:	b156      	cbz	r6, 7b88 <_dtoa_r+0x660>
    7b72:	b12f      	cbz	r7, 7b80 <_dtoa_r+0x658>
    7b74:	42b7      	cmp	r7, r6
    7b76:	d003      	beq.n	7b80 <_dtoa_r+0x658>
    7b78:	4639      	mov	r1, r7
    7b7a:	4620      	mov	r0, r4
    7b7c:	f7fd f8e4 	bl	4d48 <_Bfree>
    7b80:	4631      	mov	r1, r6
    7b82:	4620      	mov	r0, r4
    7b84:	f7fd f8e0 	bl	4d48 <_Bfree>
    7b88:	4629      	mov	r1, r5
    7b8a:	4620      	mov	r0, r4
    7b8c:	f7fd f8dc 	bl	4d48 <_Bfree>
    7b90:	2300      	movs	r3, #0
    7b92:	f889 3000 	strb.w	r3, [r9]
    7b96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    7b9a:	601a      	str	r2, [r3, #0]
    7b9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7b9e:	2b00      	cmp	r3, #0
    7ba0:	f43f acfe 	beq.w	75a0 <_dtoa_r+0x78>
    7ba4:	9800      	ldr	r0, [sp, #0]
    7ba6:	f8c3 9000 	str.w	r9, [r3]
    7baa:	b00f      	add	sp, #60	; 0x3c
    7bac:	ecbd 8b02 	vpop	{d8}
    7bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7bb4:	f1c0 001c 	rsb	r0, r0, #28
    7bb8:	9b06      	ldr	r3, [sp, #24]
    7bba:	4403      	add	r3, r0
    7bbc:	9306      	str	r3, [sp, #24]
    7bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7bc0:	4403      	add	r3, r0
    7bc2:	9309      	str	r3, [sp, #36]	; 0x24
    7bc4:	4480      	add	r8, r0
    7bc6:	e76f      	b.n	7aa8 <_dtoa_r+0x580>
    7bc8:	f1c2 0220 	rsb	r2, r2, #32
    7bcc:	fa06 f202 	lsl.w	r2, r6, r2
    7bd0:	ee07 2a10 	vmov	s14, r2
    7bd4:	e509      	b.n	75ea <_dtoa_r+0xc2>
    7bd6:	2601      	movs	r6, #1
    7bd8:	e563      	b.n	76a2 <_dtoa_r+0x17a>
    7bda:	4601      	mov	r1, r0
    7bdc:	463a      	mov	r2, r7
    7bde:	4620      	mov	r0, r4
    7be0:	f7fd fa3a 	bl	5058 <__pow5mult>
    7be4:	9b01      	ldr	r3, [sp, #4]
    7be6:	2b01      	cmp	r3, #1
    7be8:	4682      	mov	sl, r0
    7bea:	f340 81c5 	ble.w	7f78 <_dtoa_r+0xa50>
    7bee:	2300      	movs	r3, #0
    7bf0:	9308      	str	r3, [sp, #32]
    7bf2:	f8da 2010 	ldr.w	r2, [sl, #16]
    7bf6:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    7bfa:	6910      	ldr	r0, [r2, #16]
    7bfc:	f7fd f900 	bl	4e00 <__hi0bits>
    7c00:	f1c0 0020 	rsb	r0, r0, #32
    7c04:	e744      	b.n	7a90 <_dtoa_r+0x568>
    7c06:	bf00      	nop
    7c08:	200002a8 	.word	0x200002a8
    7c0c:	200007ec 	.word	0x200007ec
    7c10:	4631      	mov	r1, r6
    7c12:	2300      	movs	r3, #0
    7c14:	220a      	movs	r2, #10
    7c16:	4620      	mov	r0, r4
    7c18:	f7fd f8a0 	bl	4d5c <__multadd>
    7c1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7c1e:	2b00      	cmp	r3, #0
    7c20:	4606      	mov	r6, r0
    7c22:	f340 82ce 	ble.w	81c2 <_dtoa_r+0xc9a>
    7c26:	9704      	str	r7, [sp, #16]
    7c28:	4699      	mov	r9, r3
    7c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7c2c:	2b00      	cmp	r3, #0
    7c2e:	dd05      	ble.n	7c3c <_dtoa_r+0x714>
    7c30:	4631      	mov	r1, r6
    7c32:	461a      	mov	r2, r3
    7c34:	4620      	mov	r0, r4
    7c36:	f7fd fa6f 	bl	5118 <__lshift>
    7c3a:	4606      	mov	r6, r0
    7c3c:	9b08      	ldr	r3, [sp, #32]
    7c3e:	2b00      	cmp	r3, #0
    7c40:	f040 81eb 	bne.w	801a <_dtoa_r+0xaf2>
    7c44:	46b0      	mov	r8, r6
    7c46:	9b02      	ldr	r3, [sp, #8]
    7c48:	9f00      	ldr	r7, [sp, #0]
    7c4a:	f003 0201 	and.w	r2, r3, #1
    7c4e:	1e7b      	subs	r3, r7, #1
    7c50:	444b      	add	r3, r9
    7c52:	9308      	str	r3, [sp, #32]
    7c54:	9b01      	ldr	r3, [sp, #4]
    7c56:	920a      	str	r2, [sp, #40]	; 0x28
    7c58:	4313      	orrs	r3, r2
    7c5a:	9309      	str	r3, [sp, #36]	; 0x24
    7c5c:	4651      	mov	r1, sl
    7c5e:	4628      	mov	r0, r5
    7c60:	f7ff fbce 	bl	7400 <quorem>
    7c64:	4631      	mov	r1, r6
    7c66:	4683      	mov	fp, r0
    7c68:	4628      	mov	r0, r5
    7c6a:	f7fd facd 	bl	5208 <__mcmp>
    7c6e:	4642      	mov	r2, r8
    7c70:	4651      	mov	r1, sl
    7c72:	4681      	mov	r9, r0
    7c74:	4620      	mov	r0, r4
    7c76:	f7fd fae9 	bl	524c <__mdiff>
    7c7a:	68c2      	ldr	r2, [r0, #12]
    7c7c:	4601      	mov	r1, r0
    7c7e:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    7c82:	2a00      	cmp	r2, #0
    7c84:	d142      	bne.n	7d0c <_dtoa_r+0x7e4>
    7c86:	e9cd 0306 	strd	r0, r3, [sp, #24]
    7c8a:	4628      	mov	r0, r5
    7c8c:	f7fd fabc 	bl	5208 <__mcmp>
    7c90:	9906      	ldr	r1, [sp, #24]
    7c92:	9002      	str	r0, [sp, #8]
    7c94:	4620      	mov	r0, r4
    7c96:	f7fd f857 	bl	4d48 <_Bfree>
    7c9a:	9a02      	ldr	r2, [sp, #8]
    7c9c:	9b07      	ldr	r3, [sp, #28]
    7c9e:	b91a      	cbnz	r2, 7ca8 <_dtoa_r+0x780>
    7ca0:	9909      	ldr	r1, [sp, #36]	; 0x24
    7ca2:	2900      	cmp	r1, #0
    7ca4:	f000 827e 	beq.w	81a4 <_dtoa_r+0xc7c>
    7ca8:	f1b9 0f00 	cmp.w	r9, #0
    7cac:	f2c0 8183 	blt.w	7fb6 <_dtoa_r+0xa8e>
    7cb0:	9901      	ldr	r1, [sp, #4]
    7cb2:	ea49 0901 	orr.w	r9, r9, r1
    7cb6:	990a      	ldr	r1, [sp, #40]	; 0x28
    7cb8:	ea51 0909 	orrs.w	r9, r1, r9
    7cbc:	f000 817b 	beq.w	7fb6 <_dtoa_r+0xa8e>
    7cc0:	2a00      	cmp	r2, #0
    7cc2:	f300 81c6 	bgt.w	8052 <_dtoa_r+0xb2a>
    7cc6:	9a08      	ldr	r2, [sp, #32]
    7cc8:	703b      	strb	r3, [r7, #0]
    7cca:	f107 0901 	add.w	r9, r7, #1
    7cce:	4297      	cmp	r7, r2
    7cd0:	46cb      	mov	fp, r9
    7cd2:	f000 81c4 	beq.w	805e <_dtoa_r+0xb36>
    7cd6:	4629      	mov	r1, r5
    7cd8:	2300      	movs	r3, #0
    7cda:	220a      	movs	r2, #10
    7cdc:	4620      	mov	r0, r4
    7cde:	f7fd f83d 	bl	4d5c <__multadd>
    7ce2:	4546      	cmp	r6, r8
    7ce4:	4605      	mov	r5, r0
    7ce6:	4631      	mov	r1, r6
    7ce8:	f04f 0300 	mov.w	r3, #0
    7cec:	f04f 020a 	mov.w	r2, #10
    7cf0:	4620      	mov	r0, r4
    7cf2:	d012      	beq.n	7d1a <_dtoa_r+0x7f2>
    7cf4:	f7fd f832 	bl	4d5c <__multadd>
    7cf8:	4641      	mov	r1, r8
    7cfa:	4606      	mov	r6, r0
    7cfc:	2300      	movs	r3, #0
    7cfe:	220a      	movs	r2, #10
    7d00:	4620      	mov	r0, r4
    7d02:	f7fd f82b 	bl	4d5c <__multadd>
    7d06:	464f      	mov	r7, r9
    7d08:	4680      	mov	r8, r0
    7d0a:	e7a7      	b.n	7c5c <_dtoa_r+0x734>
    7d0c:	4620      	mov	r0, r4
    7d0e:	9302      	str	r3, [sp, #8]
    7d10:	f7fd f81a 	bl	4d48 <_Bfree>
    7d14:	9b02      	ldr	r3, [sp, #8]
    7d16:	2201      	movs	r2, #1
    7d18:	e7c6      	b.n	7ca8 <_dtoa_r+0x780>
    7d1a:	f7fd f81f 	bl	4d5c <__multadd>
    7d1e:	464f      	mov	r7, r9
    7d20:	4606      	mov	r6, r0
    7d22:	4680      	mov	r8, r0
    7d24:	e79a      	b.n	7c5c <_dtoa_r+0x734>
    7d26:	9b01      	ldr	r3, [sp, #4]
    7d28:	2b02      	cmp	r3, #2
    7d2a:	dc71      	bgt.n	7e10 <_dtoa_r+0x8e8>
    7d2c:	9b07      	ldr	r3, [sp, #28]
    7d2e:	2b00      	cmp	r3, #0
    7d30:	f47f af7b 	bne.w	7c2a <_dtoa_r+0x702>
    7d34:	9b04      	ldr	r3, [sp, #16]
    7d36:	4651      	mov	r1, sl
    7d38:	3301      	adds	r3, #1
    7d3a:	4628      	mov	r0, r5
    7d3c:	9304      	str	r3, [sp, #16]
    7d3e:	f7ff fb5f 	bl	7400 <quorem>
    7d42:	f8dd b000 	ldr.w	fp, [sp]
    7d46:	f100 0330 	add.w	r3, r0, #48	; 0x30
    7d4a:	f80b 3b01 	strb.w	r3, [fp], #1
    7d4e:	2700      	movs	r7, #0
    7d50:	e6eb      	b.n	7b2a <_dtoa_r+0x602>
    7d52:	4651      	mov	r1, sl
    7d54:	4628      	mov	r0, r5
    7d56:	f7fd fa57 	bl	5208 <__mcmp>
    7d5a:	2800      	cmp	r0, #0
    7d5c:	f6bf aeba 	bge.w	7ad4 <_dtoa_r+0x5ac>
    7d60:	4629      	mov	r1, r5
    7d62:	2300      	movs	r3, #0
    7d64:	220a      	movs	r2, #10
    7d66:	4620      	mov	r0, r4
    7d68:	f7fc fff8 	bl	4d5c <__multadd>
    7d6c:	9b04      	ldr	r3, [sp, #16]
    7d6e:	1e5f      	subs	r7, r3, #1
    7d70:	9b07      	ldr	r3, [sp, #28]
    7d72:	4605      	mov	r5, r0
    7d74:	2b00      	cmp	r3, #0
    7d76:	f47f af4b 	bne.w	7c10 <_dtoa_r+0x6e8>
    7d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7d7c:	2b00      	cmp	r3, #0
    7d7e:	f340 8218 	ble.w	81b2 <_dtoa_r+0xc8a>
    7d82:	4699      	mov	r9, r3
    7d84:	e6b1      	b.n	7aea <_dtoa_r+0x5c2>
    7d86:	4bbc      	ldr	r3, [pc, #752]	; (8078 <_dtoa_r+0xb50>)
    7d88:	9300      	str	r3, [sp, #0]
    7d8a:	3303      	adds	r3, #3
    7d8c:	e4a4      	b.n	76d8 <_dtoa_r+0x1b0>
    7d8e:	201c      	movs	r0, #28
    7d90:	e712      	b.n	7bb8 <_dtoa_r+0x690>
    7d92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    7d96:	2800      	cmp	r0, #0
    7d98:	f47f ae74 	bne.w	7a84 <_dtoa_r+0x55c>
    7d9c:	f3c1 0213 	ubfx	r2, r1, #0, #20
    7da0:	2a00      	cmp	r2, #0
    7da2:	f000 80f4 	beq.w	7f8e <_dtoa_r+0xa66>
    7da6:	9b02      	ldr	r3, [sp, #8]
    7da8:	9308      	str	r3, [sp, #32]
    7daa:	e66d      	b.n	7a88 <_dtoa_r+0x560>
    7dac:	2301      	movs	r3, #1
    7dae:	9307      	str	r3, [sp, #28]
    7db0:	9b04      	ldr	r3, [sp, #16]
    7db2:	445b      	add	r3, fp
    7db4:	f103 0901 	add.w	r9, r3, #1
    7db8:	f1b9 0f01 	cmp.w	r9, #1
    7dbc:	46cc      	mov	ip, r9
    7dbe:	930b      	str	r3, [sp, #44]	; 0x2c
    7dc0:	bfb8      	it	lt
    7dc2:	f04f 0c01 	movlt.w	ip, #1
    7dc6:	2100      	movs	r1, #0
    7dc8:	f1bc 0f17 	cmp.w	ip, #23
    7dcc:	63e1      	str	r1, [r4, #60]	; 0x3c
    7dce:	f77f acbc 	ble.w	774a <_dtoa_r+0x222>
    7dd2:	2001      	movs	r0, #1
    7dd4:	2204      	movs	r2, #4
    7dd6:	0052      	lsls	r2, r2, #1
    7dd8:	f102 0314 	add.w	r3, r2, #20
    7ddc:	4563      	cmp	r3, ip
    7dde:	4601      	mov	r1, r0
    7de0:	f100 0001 	add.w	r0, r0, #1
    7de4:	d9f7      	bls.n	7dd6 <_dtoa_r+0x8ae>
    7de6:	63e1      	str	r1, [r4, #60]	; 0x3c
    7de8:	e4af      	b.n	774a <_dtoa_r+0x222>
    7dea:	2301      	movs	r3, #1
    7dec:	9307      	str	r3, [sp, #28]
    7dee:	f1bb 0f00 	cmp.w	fp, #0
    7df2:	dd52      	ble.n	7e9a <_dtoa_r+0x972>
    7df4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    7df8:	46d9      	mov	r9, fp
    7dfa:	46dc      	mov	ip, fp
    7dfc:	e7e3      	b.n	7dc6 <_dtoa_r+0x89e>
    7dfe:	2300      	movs	r3, #0
    7e00:	9307      	str	r3, [sp, #28]
    7e02:	e7d5      	b.n	7db0 <_dtoa_r+0x888>
    7e04:	2300      	movs	r3, #0
    7e06:	9307      	str	r3, [sp, #28]
    7e08:	e7f1      	b.n	7dee <_dtoa_r+0x8c6>
    7e0a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    7e0e:	9704      	str	r7, [sp, #16]
    7e10:	f1b9 0f00 	cmp.w	r9, #0
    7e14:	f47f ada1 	bne.w	795a <_dtoa_r+0x432>
    7e18:	4651      	mov	r1, sl
    7e1a:	464b      	mov	r3, r9
    7e1c:	2205      	movs	r2, #5
    7e1e:	4620      	mov	r0, r4
    7e20:	f7fc ff9c 	bl	4d5c <__multadd>
    7e24:	4601      	mov	r1, r0
    7e26:	4682      	mov	sl, r0
    7e28:	4628      	mov	r0, r5
    7e2a:	f7fd f9ed 	bl	5208 <__mcmp>
    7e2e:	2800      	cmp	r0, #0
    7e30:	f77f ad93 	ble.w	795a <_dtoa_r+0x432>
    7e34:	9b04      	ldr	r3, [sp, #16]
    7e36:	f103 0b01 	add.w	fp, r3, #1
    7e3a:	9b00      	ldr	r3, [sp, #0]
    7e3c:	2231      	movs	r2, #49	; 0x31
    7e3e:	4698      	mov	r8, r3
    7e40:	f803 2b01 	strb.w	r2, [r3], #1
    7e44:	9300      	str	r3, [sp, #0]
    7e46:	4651      	mov	r1, sl
    7e48:	4620      	mov	r0, r4
    7e4a:	f7fc ff7d 	bl	4d48 <_Bfree>
    7e4e:	f10b 0301 	add.w	r3, fp, #1
    7e52:	f8dd 9000 	ldr.w	r9, [sp]
    7e56:	9304      	str	r3, [sp, #16]
    7e58:	f8cd 8000 	str.w	r8, [sp]
    7e5c:	2e00      	cmp	r6, #0
    7e5e:	f47f ae8f 	bne.w	7b80 <_dtoa_r+0x658>
    7e62:	e691      	b.n	7b88 <_dtoa_r+0x660>
    7e64:	eba3 0a0a 	sub.w	sl, r3, sl
    7e68:	e5c5      	b.n	79f6 <_dtoa_r+0x4ce>
    7e6a:	4631      	mov	r1, r6
    7e6c:	4652      	mov	r2, sl
    7e6e:	4620      	mov	r0, r4
    7e70:	f7fd f8f2 	bl	5058 <__pow5mult>
    7e74:	462a      	mov	r2, r5
    7e76:	4601      	mov	r1, r0
    7e78:	4606      	mov	r6, r0
    7e7a:	4620      	mov	r0, r4
    7e7c:	f7fd f83e 	bl	4efc <__multiply>
    7e80:	4629      	mov	r1, r5
    7e82:	4605      	mov	r5, r0
    7e84:	4620      	mov	r0, r4
    7e86:	f7fc ff5f 	bl	4d48 <_Bfree>
    7e8a:	e5ea      	b.n	7a62 <_dtoa_r+0x53a>
    7e8c:	2002      	movs	r0, #2
    7e8e:	eeb0 5b48 	vmov.f64	d5, d8
    7e92:	e481      	b.n	7798 <_dtoa_r+0x270>
    7e94:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    7e98:	e68e      	b.n	7bb8 <_dtoa_r+0x690>
    7e9a:	f04f 0b01 	mov.w	fp, #1
    7e9e:	46d9      	mov	r9, fp
    7ea0:	e44f      	b.n	7742 <_dtoa_r+0x21a>
    7ea2:	d103      	bne.n	7eac <_dtoa_r+0x984>
    7ea4:	9b01      	ldr	r3, [sp, #4]
    7ea6:	07db      	lsls	r3, r3, #31
    7ea8:	f53f ae4c 	bmi.w	7b44 <_dtoa_r+0x61c>
    7eac:	46d9      	mov	r9, fp
    7eae:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    7eb2:	2b30      	cmp	r3, #48	; 0x30
    7eb4:	d0fa      	beq.n	7eac <_dtoa_r+0x984>
    7eb6:	e657      	b.n	7b68 <_dtoa_r+0x640>
    7eb8:	9b04      	ldr	r3, [sp, #16]
    7eba:	9a00      	ldr	r2, [sp, #0]
    7ebc:	3301      	adds	r3, #1
    7ebe:	9304      	str	r3, [sp, #16]
    7ec0:	2331      	movs	r3, #49	; 0x31
    7ec2:	7013      	strb	r3, [r2, #0]
    7ec4:	e650      	b.n	7b68 <_dtoa_r+0x640>
    7ec6:	f1ba 0f00 	cmp.w	sl, #0
    7eca:	f000 8123 	beq.w	8114 <_dtoa_r+0xbec>
    7ece:	f202 4233 	addw	r2, r2, #1075	; 0x433
    7ed2:	9b06      	ldr	r3, [sp, #24]
    7ed4:	9309      	str	r3, [sp, #36]	; 0x24
    7ed6:	4413      	add	r3, r2
    7ed8:	f8dd a020 	ldr.w	sl, [sp, #32]
    7edc:	9306      	str	r3, [sp, #24]
    7ede:	4490      	add	r8, r2
    7ee0:	e592      	b.n	7a08 <_dtoa_r+0x4e0>
    7ee2:	ee07 0a90 	vmov	s15, r0
    7ee6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
    7eea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    7eee:	eea6 5b07 	vfma.f64	d5, d6, d7
    7ef2:	ee15 2a90 	vmov	r2, s11
    7ef6:	ec51 0b15 	vmov	r0, r1, d5
    7efa:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    7efe:	ec41 0b15 	vmov	d5, r0, r1
    7f02:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    7f06:	ee36 7b47 	vsub.f64	d7, d6, d7
    7f0a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    7f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7f12:	f300 8137 	bgt.w	8184 <_dtoa_r+0xc5c>
    7f16:	eeb1 5b45 	vneg.f64	d5, d5
    7f1a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    7f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7f22:	f57f acfb 	bpl.w	791c <_dtoa_r+0x3f4>
    7f26:	f04f 0a00 	mov.w	sl, #0
    7f2a:	4656      	mov	r6, sl
    7f2c:	e515      	b.n	795a <_dtoa_r+0x432>
    7f2e:	f000 80f5 	beq.w	811c <_dtoa_r+0xbf4>
    7f32:	9b04      	ldr	r3, [sp, #16]
    7f34:	4951      	ldr	r1, [pc, #324]	; (807c <_dtoa_r+0xb54>)
    7f36:	425a      	negs	r2, r3
    7f38:	f002 000f 	and.w	r0, r2, #15
    7f3c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    7f40:	ed91 6b00 	vldr	d6, [r1]
    7f44:	1112      	asrs	r2, r2, #4
    7f46:	ee28 6b06 	vmul.f64	d6, d8, d6
    7f4a:	f000 8142 	beq.w	81d2 <_dtoa_r+0xcaa>
    7f4e:	eeb0 7b46 	vmov.f64	d7, d6
    7f52:	494b      	ldr	r1, [pc, #300]	; (8080 <_dtoa_r+0xb58>)
    7f54:	2600      	movs	r6, #0
    7f56:	2002      	movs	r0, #2
    7f58:	07d3      	lsls	r3, r2, #31
    7f5a:	d505      	bpl.n	7f68 <_dtoa_r+0xa40>
    7f5c:	ed91 5b00 	vldr	d5, [r1]
    7f60:	3001      	adds	r0, #1
    7f62:	2601      	movs	r6, #1
    7f64:	ee27 7b05 	vmul.f64	d7, d7, d5
    7f68:	1052      	asrs	r2, r2, #1
    7f6a:	f101 0108 	add.w	r1, r1, #8
    7f6e:	d1f3      	bne.n	7f58 <_dtoa_r+0xa30>
    7f70:	2e00      	cmp	r6, #0
    7f72:	fe06 6b07 	vseleq.f64	d6, d6, d7
    7f76:	e41e      	b.n	77b6 <_dtoa_r+0x28e>
    7f78:	9b02      	ldr	r3, [sp, #8]
    7f7a:	2b00      	cmp	r3, #0
    7f7c:	f47f ae37 	bne.w	7bee <_dtoa_r+0x6c6>
    7f80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    7f84:	f3c1 0213 	ubfx	r2, r1, #0, #20
    7f88:	2a00      	cmp	r2, #0
    7f8a:	f040 8137 	bne.w	81fc <_dtoa_r+0xcd4>
    7f8e:	4a3d      	ldr	r2, [pc, #244]	; (8084 <_dtoa_r+0xb5c>)
    7f90:	400a      	ands	r2, r1
    7f92:	2a00      	cmp	r2, #0
    7f94:	f000 80fa 	beq.w	818c <_dtoa_r+0xc64>
    7f98:	9b06      	ldr	r3, [sp, #24]
    7f9a:	3301      	adds	r3, #1
    7f9c:	9306      	str	r3, [sp, #24]
    7f9e:	2301      	movs	r3, #1
    7fa0:	f108 0801 	add.w	r8, r8, #1
    7fa4:	9308      	str	r3, [sp, #32]
    7fa6:	e56f      	b.n	7a88 <_dtoa_r+0x560>
    7fa8:	4629      	mov	r1, r5
    7faa:	9a08      	ldr	r2, [sp, #32]
    7fac:	4620      	mov	r0, r4
    7fae:	f7fd f853 	bl	5058 <__pow5mult>
    7fb2:	4605      	mov	r5, r0
    7fb4:	e55a      	b.n	7a6c <_dtoa_r+0x544>
    7fb6:	2a00      	cmp	r2, #0
    7fb8:	dd12      	ble.n	7fe0 <_dtoa_r+0xab8>
    7fba:	4629      	mov	r1, r5
    7fbc:	2201      	movs	r2, #1
    7fbe:	4620      	mov	r0, r4
    7fc0:	9301      	str	r3, [sp, #4]
    7fc2:	f7fd f8a9 	bl	5118 <__lshift>
    7fc6:	4651      	mov	r1, sl
    7fc8:	4605      	mov	r5, r0
    7fca:	f7fd f91d 	bl	5208 <__mcmp>
    7fce:	2800      	cmp	r0, #0
    7fd0:	9b01      	ldr	r3, [sp, #4]
    7fd2:	f340 80e1 	ble.w	8198 <_dtoa_r+0xc70>
    7fd6:	2b39      	cmp	r3, #57	; 0x39
    7fd8:	f000 80ca 	beq.w	8170 <_dtoa_r+0xc48>
    7fdc:	f10b 0331 	add.w	r3, fp, #49	; 0x31
    7fe0:	46b9      	mov	r9, r7
    7fe2:	f809 3b01 	strb.w	r3, [r9], #1
    7fe6:	9b04      	ldr	r3, [sp, #16]
    7fe8:	3301      	adds	r3, #1
    7fea:	4637      	mov	r7, r6
    7fec:	9304      	str	r3, [sp, #16]
    7fee:	4646      	mov	r6, r8
    7ff0:	e5ba      	b.n	7b68 <_dtoa_r+0x640>
    7ff2:	ee38 8b08 	vadd.f64	d8, d8, d8
    7ff6:	eeb4 8bc6 	vcmpe.f64	d8, d6
    7ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7ffe:	dc0a      	bgt.n	8016 <_dtoa_r+0xaee>
    8000:	eeb4 8b46 	vcmp.f64	d8, d6
    8004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8008:	f47f acdc 	bne.w	79c4 <_dtoa_r+0x49c>
    800c:	ee17 3a10 	vmov	r3, s14
    8010:	07d8      	lsls	r0, r3, #31
    8012:	f57f acd7 	bpl.w	79c4 <_dtoa_r+0x49c>
    8016:	9a00      	ldr	r2, [sp, #0]
    8018:	e454      	b.n	78c4 <_dtoa_r+0x39c>
    801a:	6871      	ldr	r1, [r6, #4]
    801c:	4620      	mov	r0, r4
    801e:	f7fc fe6d 	bl	4cfc <_Balloc>
    8022:	4607      	mov	r7, r0
    8024:	2800      	cmp	r0, #0
    8026:	f000 80de 	beq.w	81e6 <_dtoa_r+0xcbe>
    802a:	6933      	ldr	r3, [r6, #16]
    802c:	3302      	adds	r3, #2
    802e:	009a      	lsls	r2, r3, #2
    8030:	f106 010c 	add.w	r1, r6, #12
    8034:	300c      	adds	r0, #12
    8036:	f7f9 ff59 	bl	1eec <memcpy>
    803a:	4639      	mov	r1, r7
    803c:	2201      	movs	r2, #1
    803e:	4620      	mov	r0, r4
    8040:	f7fd f86a 	bl	5118 <__lshift>
    8044:	4680      	mov	r8, r0
    8046:	e5fe      	b.n	7c46 <_dtoa_r+0x71e>
    8048:	9b06      	ldr	r3, [sp, #24]
    804a:	eba3 0309 	sub.w	r3, r3, r9
    804e:	9309      	str	r3, [sp, #36]	; 0x24
    8050:	e4da      	b.n	7a08 <_dtoa_r+0x4e0>
    8052:	2b39      	cmp	r3, #57	; 0x39
    8054:	f000 808c 	beq.w	8170 <_dtoa_r+0xc48>
    8058:	46b9      	mov	r9, r7
    805a:	3301      	adds	r3, #1
    805c:	e7c1      	b.n	7fe2 <_dtoa_r+0xaba>
    805e:	9a04      	ldr	r2, [sp, #16]
    8060:	3201      	adds	r2, #1
    8062:	4637      	mov	r7, r6
    8064:	9204      	str	r2, [sp, #16]
    8066:	4646      	mov	r6, r8
    8068:	e55f      	b.n	7b2a <_dtoa_r+0x602>
    806a:	4629      	mov	r1, r5
    806c:	4620      	mov	r0, r4
    806e:	f7fc fff3 	bl	5058 <__pow5mult>
    8072:	4605      	mov	r5, r0
    8074:	e4fa      	b.n	7a6c <_dtoa_r+0x544>
    8076:	bf00      	nop
    8078:	2000074c 	.word	0x2000074c
    807c:	200002a8 	.word	0x200002a8
    8080:	20000280 	.word	0x20000280
    8084:	7ff00000 	.word	0x7ff00000
    8088:	4b5e      	ldr	r3, [pc, #376]	; (8204 <_dtoa_r+0xcdc>)
    808a:	eefd 5bc6 	vcvt.s32.f64	s11, d6
    808e:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    8092:	ed1c 3b02 	vldr	d3, [ip, #-8]
    8096:	eeb8 7be5 	vcvt.f64.s32	d7, s11
    809a:	ee36 7b47 	vsub.f64	d7, d6, d7
    809e:	ec41 0b16 	vmov	d6, r0, r1
    80a2:	ee15 1a90 	vmov	r1, s11
    80a6:	ee23 3b06 	vmul.f64	d3, d3, d6
    80aa:	9800      	ldr	r0, [sp, #0]
    80ac:	3130      	adds	r1, #48	; 0x30
    80ae:	2a01      	cmp	r2, #1
    80b0:	f800 1b01 	strb.w	r1, [r0], #1
    80b4:	f000 8083 	beq.w	81be <_dtoa_r+0xc96>
    80b8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    80bc:	9b00      	ldr	r3, [sp, #0]
    80be:	1899      	adds	r1, r3, r2
    80c0:	ee27 7b04 	vmul.f64	d7, d7, d4
    80c4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    80c8:	ee16 3a90 	vmov	r3, s13
    80cc:	3330      	adds	r3, #48	; 0x30
    80ce:	f800 3b01 	strb.w	r3, [r0], #1
    80d2:	4281      	cmp	r1, r0
    80d4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
    80d8:	ee37 7b45 	vsub.f64	d7, d7, d5
    80dc:	d1f0      	bne.n	80c0 <_dtoa_r+0xb98>
    80de:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    80e2:	ee33 5b06 	vadd.f64	d5, d3, d6
    80e6:	eeb4 5bc7 	vcmpe.f64	d5, d7
    80ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    80ee:	f53f abe3 	bmi.w	78b8 <_dtoa_r+0x390>
    80f2:	ee36 6b43 	vsub.f64	d6, d6, d3
    80f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
    80fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    80fe:	f77f ac0d 	ble.w	791c <_dtoa_r+0x3f4>
    8102:	4689      	mov	r9, r1
    8104:	3901      	subs	r1, #1
    8106:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    810a:	2b30      	cmp	r3, #48	; 0x30
    810c:	d0f9      	beq.n	8102 <_dtoa_r+0xbda>
    810e:	1c73      	adds	r3, r6, #1
    8110:	9304      	str	r3, [sp, #16]
    8112:	e539      	b.n	7b88 <_dtoa_r+0x660>
    8114:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8116:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    811a:	e6da      	b.n	7ed2 <_dtoa_r+0x9aa>
    811c:	2002      	movs	r0, #2
    811e:	eeb0 6b48 	vmov.f64	d6, d8
    8122:	f7ff bb48 	b.w	77b6 <_dtoa_r+0x28e>
    8126:	f1b9 0f00 	cmp.w	r9, #0
    812a:	f43f aeda 	beq.w	7ee2 <_dtoa_r+0x9ba>
    812e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8130:	2a00      	cmp	r2, #0
    8132:	f77f abf3 	ble.w	791c <_dtoa_r+0x3f4>
    8136:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    813a:	ee26 6b04 	vmul.f64	d6, d6, d4
    813e:	3001      	adds	r0, #1
    8140:	ee07 0a90 	vmov	s15, r0
    8144:	9b04      	ldr	r3, [sp, #16]
    8146:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    814a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    814e:	eea6 7b05 	vfma.f64	d7, d6, d5
    8152:	ee17 ca90 	vmov	ip, s15
    8156:	ec51 0b17 	vmov	r0, r1, d7
    815a:	1e5e      	subs	r6, r3, #1
    815c:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
    8160:	f7ff bb47 	b.w	77f2 <_dtoa_r+0x2ca>
    8164:	9b04      	ldr	r3, [sp, #16]
    8166:	3301      	adds	r3, #1
    8168:	9304      	str	r3, [sp, #16]
    816a:	2331      	movs	r3, #49	; 0x31
    816c:	f7ff bbb1 	b.w	78d2 <_dtoa_r+0x3aa>
    8170:	9b04      	ldr	r3, [sp, #16]
    8172:	46bb      	mov	fp, r7
    8174:	3301      	adds	r3, #1
    8176:	9304      	str	r3, [sp, #16]
    8178:	2339      	movs	r3, #57	; 0x39
    817a:	4637      	mov	r7, r6
    817c:	f80b 3b01 	strb.w	r3, [fp], #1
    8180:	4646      	mov	r6, r8
    8182:	e4e1      	b.n	7b48 <_dtoa_r+0x620>
    8184:	f04f 0a00 	mov.w	sl, #0
    8188:	4656      	mov	r6, sl
    818a:	e653      	b.n	7e34 <_dtoa_r+0x90c>
    818c:	9208      	str	r2, [sp, #32]
    818e:	e47b      	b.n	7a88 <_dtoa_r+0x560>
    8190:	1c73      	adds	r3, r6, #1
    8192:	9304      	str	r3, [sp, #16]
    8194:	4689      	mov	r9, r1
    8196:	e4f7      	b.n	7b88 <_dtoa_r+0x660>
    8198:	f47f af22 	bne.w	7fe0 <_dtoa_r+0xab8>
    819c:	07da      	lsls	r2, r3, #31
    819e:	f57f af1f 	bpl.w	7fe0 <_dtoa_r+0xab8>
    81a2:	e718      	b.n	7fd6 <_dtoa_r+0xaae>
    81a4:	2b39      	cmp	r3, #57	; 0x39
    81a6:	d0e3      	beq.n	8170 <_dtoa_r+0xc48>
    81a8:	f1b9 0f00 	cmp.w	r9, #0
    81ac:	f73f af16 	bgt.w	7fdc <_dtoa_r+0xab4>
    81b0:	e716      	b.n	7fe0 <_dtoa_r+0xab8>
    81b2:	9b01      	ldr	r3, [sp, #4]
    81b4:	2b02      	cmp	r3, #2
    81b6:	f73f ae28 	bgt.w	7e0a <_dtoa_r+0x8e2>
    81ba:	9704      	str	r7, [sp, #16]
    81bc:	e5ba      	b.n	7d34 <_dtoa_r+0x80c>
    81be:	4601      	mov	r1, r0
    81c0:	e78d      	b.n	80de <_dtoa_r+0xbb6>
    81c2:	9b01      	ldr	r3, [sp, #4]
    81c4:	2b02      	cmp	r3, #2
    81c6:	f73f ae20 	bgt.w	7e0a <_dtoa_r+0x8e2>
    81ca:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    81ce:	9704      	str	r7, [sp, #16]
    81d0:	e52b      	b.n	7c2a <_dtoa_r+0x702>
    81d2:	2002      	movs	r0, #2
    81d4:	f7ff baef 	b.w	77b6 <_dtoa_r+0x28e>
    81d8:	4b0b      	ldr	r3, [pc, #44]	; (8208 <_dtoa_r+0xce0>)
    81da:	480c      	ldr	r0, [pc, #48]	; (820c <_dtoa_r+0xce4>)
    81dc:	2200      	movs	r2, #0
    81de:	f240 11af 	movw	r1, #431	; 0x1af
    81e2:	f7ff f8b1 	bl	7348 <__assert_func>
    81e6:	4b08      	ldr	r3, [pc, #32]	; (8208 <_dtoa_r+0xce0>)
    81e8:	4808      	ldr	r0, [pc, #32]	; (820c <_dtoa_r+0xce4>)
    81ea:	463a      	mov	r2, r7
    81ec:	f240 21ef 	movw	r1, #751	; 0x2ef
    81f0:	f7ff f8aa 	bl	7348 <__assert_func>
    81f4:	4b06      	ldr	r3, [pc, #24]	; (8210 <_dtoa_r+0xce8>)
    81f6:	9300      	str	r3, [sp, #0]
    81f8:	f7ff b9d2 	b.w	75a0 <_dtoa_r+0x78>
    81fc:	9b02      	ldr	r3, [sp, #8]
    81fe:	9308      	str	r3, [sp, #32]
    8200:	e4f7      	b.n	7bf2 <_dtoa_r+0x6ca>
    8202:	bf00      	nop
    8204:	200002a8 	.word	0x200002a8
    8208:	200005cc 	.word	0x200005cc
    820c:	20000750 	.word	0x20000750
    8210:	20000740 	.word	0x20000740

00008214 <_wcrtomb_r>:
    8214:	b570      	push	{r4, r5, r6, lr}
    8216:	4605      	mov	r5, r0
    8218:	b084      	sub	sp, #16
    821a:	b15b      	cbz	r3, 8234 <_wcrtomb_r+0x20>
    821c:	461c      	mov	r4, r3
    821e:	b169      	cbz	r1, 823c <_wcrtomb_r+0x28>
    8220:	4b0e      	ldr	r3, [pc, #56]	; (825c <_wcrtomb_r+0x48>)
    8222:	4628      	mov	r0, r5
    8224:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
    8228:	4623      	mov	r3, r4
    822a:	47b0      	blx	r6
    822c:	1c43      	adds	r3, r0, #1
    822e:	d00f      	beq.n	8250 <_wcrtomb_r+0x3c>
    8230:	b004      	add	sp, #16
    8232:	bd70      	pop	{r4, r5, r6, pc}
    8234:	f500 7482 	add.w	r4, r0, #260	; 0x104
    8238:	2900      	cmp	r1, #0
    823a:	d1f1      	bne.n	8220 <_wcrtomb_r+0xc>
    823c:	4a07      	ldr	r2, [pc, #28]	; (825c <_wcrtomb_r+0x48>)
    823e:	4623      	mov	r3, r4
    8240:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
    8244:	4628      	mov	r0, r5
    8246:	460a      	mov	r2, r1
    8248:	a901      	add	r1, sp, #4
    824a:	47b0      	blx	r6
    824c:	1c43      	adds	r3, r0, #1
    824e:	d1ef      	bne.n	8230 <_wcrtomb_r+0x1c>
    8250:	2200      	movs	r2, #0
    8252:	238a      	movs	r3, #138	; 0x8a
    8254:	6022      	str	r2, [r4, #0]
    8256:	602b      	str	r3, [r5, #0]
    8258:	b004      	add	sp, #16
    825a:	bd70      	pop	{r4, r5, r6, pc}
    825c:	20001144 	.word	0x20001144

00008260 <_wcsrtombs_r>:
    8260:	b510      	push	{r4, lr}
    8262:	b082      	sub	sp, #8
    8264:	9c04      	ldr	r4, [sp, #16]
    8266:	e9cd 3400 	strd	r3, r4, [sp]
    826a:	f04f 33ff 	mov.w	r3, #4294967295
    826e:	f001 fbc7 	bl	9a00 <_wcsnrtombs_r>
    8272:	b002      	add	sp, #8
    8274:	bd10      	pop	{r4, pc}
    8276:	bf00      	nop

00008278 <fiprintf>:
    8278:	b40e      	push	{r1, r2, r3}
    827a:	b510      	push	{r4, lr}
    827c:	b083      	sub	sp, #12
    827e:	ab05      	add	r3, sp, #20
    8280:	4c06      	ldr	r4, [pc, #24]	; (829c <fiprintf+0x24>)
    8282:	f853 2b04 	ldr.w	r2, [r3], #4
    8286:	9301      	str	r3, [sp, #4]
    8288:	4601      	mov	r1, r0
    828a:	6820      	ldr	r0, [r4, #0]
    828c:	f000 f8c4 	bl	8418 <_vfiprintf_r>
    8290:	b003      	add	sp, #12
    8292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8296:	b003      	add	sp, #12
    8298:	4770      	bx	lr
    829a:	bf00      	nop
    829c:	200016cc 	.word	0x200016cc

000082a0 <__ssprint_r>:
    82a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    82a4:	6893      	ldr	r3, [r2, #8]
    82a6:	6817      	ldr	r7, [r2, #0]
    82a8:	b083      	sub	sp, #12
    82aa:	4692      	mov	sl, r2
    82ac:	2b00      	cmp	r3, #0
    82ae:	d070      	beq.n	8392 <__ssprint_r+0xf2>
    82b0:	4681      	mov	r9, r0
    82b2:	688a      	ldr	r2, [r1, #8]
    82b4:	6808      	ldr	r0, [r1, #0]
    82b6:	460c      	mov	r4, r1
    82b8:	3708      	adds	r7, #8
    82ba:	e043      	b.n	8344 <__ssprint_r+0xa4>
    82bc:	89a3      	ldrh	r3, [r4, #12]
    82be:	f413 6f90 	tst.w	r3, #1152	; 0x480
    82c2:	d02e      	beq.n	8322 <__ssprint_r+0x82>
    82c4:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
    82c8:	eba0 0801 	sub.w	r8, r0, r1
    82cc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    82d0:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    82d4:	f108 0001 	add.w	r0, r8, #1
    82d8:	1076      	asrs	r6, r6, #1
    82da:	4428      	add	r0, r5
    82dc:	42b0      	cmp	r0, r6
    82de:	4632      	mov	r2, r6
    82e0:	bf84      	itt	hi
    82e2:	4606      	movhi	r6, r0
    82e4:	4632      	movhi	r2, r6
    82e6:	055b      	lsls	r3, r3, #21
    82e8:	d537      	bpl.n	835a <__ssprint_r+0xba>
    82ea:	4611      	mov	r1, r2
    82ec:	4648      	mov	r0, r9
    82ee:	f7fb fa9b 	bl	3828 <_malloc_r>
    82f2:	9001      	str	r0, [sp, #4]
    82f4:	2800      	cmp	r0, #0
    82f6:	d03a      	beq.n	836e <__ssprint_r+0xce>
    82f8:	4642      	mov	r2, r8
    82fa:	6921      	ldr	r1, [r4, #16]
    82fc:	f7f9 fdf6 	bl	1eec <memcpy>
    8300:	89a2      	ldrh	r2, [r4, #12]
    8302:	9b01      	ldr	r3, [sp, #4]
    8304:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    8308:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    830c:	81a2      	strh	r2, [r4, #12]
    830e:	eba6 0208 	sub.w	r2, r6, r8
    8312:	eb03 0008 	add.w	r0, r3, r8
    8316:	6166      	str	r6, [r4, #20]
    8318:	60a2      	str	r2, [r4, #8]
    831a:	6123      	str	r3, [r4, #16]
    831c:	6020      	str	r0, [r4, #0]
    831e:	462e      	mov	r6, r5
    8320:	46a8      	mov	r8, r5
    8322:	4642      	mov	r2, r8
    8324:	4659      	mov	r1, fp
    8326:	f7fc f8c9 	bl	44bc <memmove>
    832a:	f8da 3008 	ldr.w	r3, [sl, #8]
    832e:	68a2      	ldr	r2, [r4, #8]
    8330:	6820      	ldr	r0, [r4, #0]
    8332:	1b92      	subs	r2, r2, r6
    8334:	4440      	add	r0, r8
    8336:	1b5b      	subs	r3, r3, r5
    8338:	60a2      	str	r2, [r4, #8]
    833a:	6020      	str	r0, [r4, #0]
    833c:	f8ca 3008 	str.w	r3, [sl, #8]
    8340:	b33b      	cbz	r3, 8392 <__ssprint_r+0xf2>
    8342:	3708      	adds	r7, #8
    8344:	e957 b502 	ldrd	fp, r5, [r7, #-8]
    8348:	2d00      	cmp	r5, #0
    834a:	d0fa      	beq.n	8342 <__ssprint_r+0xa2>
    834c:	42aa      	cmp	r2, r5
    834e:	4616      	mov	r6, r2
    8350:	4690      	mov	r8, r2
    8352:	d9b3      	bls.n	82bc <__ssprint_r+0x1c>
    8354:	462e      	mov	r6, r5
    8356:	46a8      	mov	r8, r5
    8358:	e7e3      	b.n	8322 <__ssprint_r+0x82>
    835a:	4648      	mov	r0, r9
    835c:	f7fb fd2c 	bl	3db8 <_realloc_r>
    8360:	4603      	mov	r3, r0
    8362:	2800      	cmp	r0, #0
    8364:	d1d3      	bne.n	830e <__ssprint_r+0x6e>
    8366:	6921      	ldr	r1, [r4, #16]
    8368:	4648      	mov	r0, r9
    836a:	f7fc fbab 	bl	4ac4 <_free_r>
    836e:	89a3      	ldrh	r3, [r4, #12]
    8370:	220c      	movs	r2, #12
    8372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8376:	f8c9 2000 	str.w	r2, [r9]
    837a:	f04f 30ff 	mov.w	r0, #4294967295
    837e:	81a3      	strh	r3, [r4, #12]
    8380:	2200      	movs	r2, #0
    8382:	2300      	movs	r3, #0
    8384:	f8ca 2008 	str.w	r2, [sl, #8]
    8388:	f8ca 3004 	str.w	r3, [sl, #4]
    838c:	b003      	add	sp, #12
    838e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8392:	2000      	movs	r0, #0
    8394:	2300      	movs	r3, #0
    8396:	f8ca 3004 	str.w	r3, [sl, #4]
    839a:	b003      	add	sp, #12
    839c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000083a0 <__sprint_r.part.0>:
    83a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    83a4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    83a6:	049c      	lsls	r4, r3, #18
    83a8:	4690      	mov	r8, r2
    83aa:	d52d      	bpl.n	8408 <__sprint_r.part.0+0x68>
    83ac:	6893      	ldr	r3, [r2, #8]
    83ae:	6812      	ldr	r2, [r2, #0]
    83b0:	b343      	cbz	r3, 8404 <__sprint_r.part.0+0x64>
    83b2:	468b      	mov	fp, r1
    83b4:	4606      	mov	r6, r0
    83b6:	f102 0908 	add.w	r9, r2, #8
    83ba:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
    83be:	ea5f 079a 	movs.w	r7, sl, lsr #2
    83c2:	d015      	beq.n	83f0 <__sprint_r.part.0+0x50>
    83c4:	3d04      	subs	r5, #4
    83c6:	2400      	movs	r4, #0
    83c8:	e001      	b.n	83ce <__sprint_r.part.0+0x2e>
    83ca:	42a7      	cmp	r7, r4
    83cc:	d00e      	beq.n	83ec <__sprint_r.part.0+0x4c>
    83ce:	f855 1f04 	ldr.w	r1, [r5, #4]!
    83d2:	465a      	mov	r2, fp
    83d4:	4630      	mov	r0, r6
    83d6:	f001 fa5b 	bl	9890 <_fputwc_r>
    83da:	1c43      	adds	r3, r0, #1
    83dc:	f104 0401 	add.w	r4, r4, #1
    83e0:	d1f3      	bne.n	83ca <__sprint_r.part.0+0x2a>
    83e2:	2300      	movs	r3, #0
    83e4:	e9c8 3301 	strd	r3, r3, [r8, #4]
    83e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    83ec:	f8d8 3008 	ldr.w	r3, [r8, #8]
    83f0:	f02a 0a03 	bic.w	sl, sl, #3
    83f4:	eba3 030a 	sub.w	r3, r3, sl
    83f8:	f8c8 3008 	str.w	r3, [r8, #8]
    83fc:	f109 0908 	add.w	r9, r9, #8
    8400:	2b00      	cmp	r3, #0
    8402:	d1da      	bne.n	83ba <__sprint_r.part.0+0x1a>
    8404:	2000      	movs	r0, #0
    8406:	e7ec      	b.n	83e2 <__sprint_r.part.0+0x42>
    8408:	f001 f80c 	bl	9424 <__sfvwrite_r>
    840c:	2300      	movs	r3, #0
    840e:	e9c8 3301 	strd	r3, r3, [r8, #4]
    8412:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8416:	bf00      	nop

00008418 <_vfiprintf_r>:
    8418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    841c:	ed2d 8b02 	vpush	{d8}
    8420:	b0c5      	sub	sp, #276	; 0x114
    8422:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
    8426:	4683      	mov	fp, r0
    8428:	ee08 1a10 	vmov	s16, r1
    842c:	4616      	mov	r6, r2
    842e:	2100      	movs	r1, #0
    8430:	2208      	movs	r2, #8
    8432:	4650      	mov	r0, sl
    8434:	461c      	mov	r4, r3
    8436:	9307      	str	r3, [sp, #28]
    8438:	f7fc f8bc 	bl	45b4 <memset>
    843c:	f1bb 0f00 	cmp.w	fp, #0
    8440:	d004      	beq.n	844c <_vfiprintf_r+0x34>
    8442:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    8446:	2b00      	cmp	r3, #0
    8448:	f000 86a0 	beq.w	918c <_vfiprintf_r+0xd74>
    844c:	ee18 2a10 	vmov	r2, s16
    8450:	6e53      	ldr	r3, [r2, #100]	; 0x64
    8452:	07db      	lsls	r3, r3, #31
    8454:	f140 8513 	bpl.w	8e7e <_vfiprintf_r+0xa66>
    8458:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    845c:	b28a      	uxth	r2, r1
    845e:	0495      	lsls	r5, r2, #18
    8460:	d40b      	bmi.n	847a <_vfiprintf_r+0x62>
    8462:	ee18 3a10 	vmov	r3, s16
    8466:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    846a:	8199      	strh	r1, [r3, #12]
    846c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    846e:	b28a      	uxth	r2, r1
    8470:	ee18 1a10 	vmov	r1, s16
    8474:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    8478:	664b      	str	r3, [r1, #100]	; 0x64
    847a:	0710      	lsls	r0, r2, #28
    847c:	f140 8105 	bpl.w	868a <_vfiprintf_r+0x272>
    8480:	ee18 3a10 	vmov	r3, s16
    8484:	691b      	ldr	r3, [r3, #16]
    8486:	2b00      	cmp	r3, #0
    8488:	f000 80ff 	beq.w	868a <_vfiprintf_r+0x272>
    848c:	f002 031a 	and.w	r3, r2, #26
    8490:	2b0a      	cmp	r3, #10
    8492:	f000 810a 	beq.w	86aa <_vfiprintf_r+0x292>
    8496:	2300      	movs	r3, #0
    8498:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
    849c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    84a0:	aa1b      	add	r2, sp, #108	; 0x6c
    84a2:	930c      	str	r3, [sp, #48]	; 0x30
    84a4:	9218      	str	r2, [sp, #96]	; 0x60
    84a6:	4691      	mov	r9, r2
    84a8:	930b      	str	r3, [sp, #44]	; 0x2c
    84aa:	9305      	str	r3, [sp, #20]
    84ac:	46b0      	mov	r8, r6
    84ae:	4644      	mov	r4, r8
    84b0:	4ba8      	ldr	r3, [pc, #672]	; (8754 <_vfiprintf_r+0x33c>)
    84b2:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    84b6:	f7fc f901 	bl	46bc <__locale_mb_cur_max>
    84ba:	4622      	mov	r2, r4
    84bc:	4603      	mov	r3, r0
    84be:	a912      	add	r1, sp, #72	; 0x48
    84c0:	f8cd a000 	str.w	sl, [sp]
    84c4:	4658      	mov	r0, fp
    84c6:	47a8      	blx	r5
    84c8:	2800      	cmp	r0, #0
    84ca:	f000 8145 	beq.w	8758 <_vfiprintf_r+0x340>
    84ce:	f2c0 8139 	blt.w	8744 <_vfiprintf_r+0x32c>
    84d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    84d4:	2a25      	cmp	r2, #37	; 0x25
    84d6:	4603      	mov	r3, r0
    84d8:	d001      	beq.n	84de <_vfiprintf_r+0xc6>
    84da:	441c      	add	r4, r3
    84dc:	e7e8      	b.n	84b0 <_vfiprintf_r+0x98>
    84de:	ebb4 0608 	subs.w	r6, r4, r8
    84e2:	4605      	mov	r5, r0
    84e4:	f040 813c 	bne.w	8760 <_vfiprintf_r+0x348>
    84e8:	2300      	movs	r3, #0
    84ea:	7861      	ldrb	r1, [r4, #1]
    84ec:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    84f0:	f104 0801 	add.w	r8, r4, #1
    84f4:	9306      	str	r3, [sp, #24]
    84f6:	f04f 37ff 	mov.w	r7, #4294967295
    84fa:	461e      	mov	r6, r3
    84fc:	242b      	movs	r4, #43	; 0x2b
    84fe:	f108 0801 	add.w	r8, r8, #1
    8502:	f1a1 0320 	sub.w	r3, r1, #32
    8506:	2b5a      	cmp	r3, #90	; 0x5a
    8508:	f200 8178 	bhi.w	87fc <_vfiprintf_r+0x3e4>
    850c:	e8df f013 	tbh	[pc, r3, lsl #1]
    8510:	017602b5 	.word	0x017602b5
    8514:	02b00176 	.word	0x02b00176
    8518:	01760176 	.word	0x01760176
    851c:	006a0176 	.word	0x006a0176
    8520:	01760176 	.word	0x01760176
    8524:	028d027d 	.word	0x028d027d
    8528:	02880176 	.word	0x02880176
    852c:	01760297 	.word	0x01760297
    8530:	005b0292 	.word	0x005b0292
    8534:	005b005b 	.word	0x005b005b
    8538:	005b005b 	.word	0x005b005b
    853c:	005b005b 	.word	0x005b005b
    8540:	005b005b 	.word	0x005b005b
    8544:	01760176 	.word	0x01760176
    8548:	01760176 	.word	0x01760176
    854c:	01760176 	.word	0x01760176
    8550:	01760176 	.word	0x01760176
    8554:	025c0176 	.word	0x025c0176
    8558:	01760084 	.word	0x01760084
    855c:	01760176 	.word	0x01760176
    8560:	01760176 	.word	0x01760176
    8564:	01760176 	.word	0x01760176
    8568:	01760176 	.word	0x01760176
    856c:	00e80176 	.word	0x00e80176
    8570:	01760176 	.word	0x01760176
    8574:	02330176 	.word	0x02330176
    8578:	02da0176 	.word	0x02da0176
    857c:	01760176 	.word	0x01760176
    8580:	0176058b 	.word	0x0176058b
    8584:	01760176 	.word	0x01760176
    8588:	01760176 	.word	0x01760176
    858c:	01760176 	.word	0x01760176
    8590:	01760176 	.word	0x01760176
    8594:	025c0176 	.word	0x025c0176
    8598:	01760086 	.word	0x01760086
    859c:	01760176 	.word	0x01760176
    85a0:	008602cd 	.word	0x008602cd
    85a4:	0176007f 	.word	0x0176007f
    85a8:	017602c0 	.word	0x017602c0
    85ac:	00ea02fd 	.word	0x00ea02fd
    85b0:	007f02ed 	.word	0x007f02ed
    85b4:	02330176 	.word	0x02330176
    85b8:	0569007c 	.word	0x0569007c
    85bc:	01760176 	.word	0x01760176
    85c0:	0176056b 	.word	0x0176056b
    85c4:	007c      	.short	0x007c
    85c6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    85ca:	2200      	movs	r2, #0
    85cc:	f818 1b01 	ldrb.w	r1, [r8], #1
    85d0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    85d4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    85d8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    85dc:	2b09      	cmp	r3, #9
    85de:	d9f5      	bls.n	85cc <_vfiprintf_r+0x1b4>
    85e0:	9206      	str	r2, [sp, #24]
    85e2:	e78e      	b.n	8502 <_vfiprintf_r+0xea>
    85e4:	4658      	mov	r0, fp
    85e6:	f7fe fe1b 	bl	7220 <_localeconv_r>
    85ea:	6843      	ldr	r3, [r0, #4]
    85ec:	930d      	str	r3, [sp, #52]	; 0x34
    85ee:	4618      	mov	r0, r3
    85f0:	f7fc f966 	bl	48c0 <strlen>
    85f4:	900e      	str	r0, [sp, #56]	; 0x38
    85f6:	4605      	mov	r5, r0
    85f8:	4658      	mov	r0, fp
    85fa:	f7fe fe11 	bl	7220 <_localeconv_r>
    85fe:	6883      	ldr	r3, [r0, #8]
    8600:	930b      	str	r3, [sp, #44]	; 0x2c
    8602:	2d00      	cmp	r5, #0
    8604:	f040 84d6 	bne.w	8fb4 <_vfiprintf_r+0xb9c>
    8608:	f898 1000 	ldrb.w	r1, [r8]
    860c:	e777      	b.n	84fe <_vfiprintf_r+0xe6>
    860e:	f898 1000 	ldrb.w	r1, [r8]
    8612:	f046 0620 	orr.w	r6, r6, #32
    8616:	e772      	b.n	84fe <_vfiprintf_r+0xe6>
    8618:	f046 0610 	orr.w	r6, r6, #16
    861c:	06b4      	lsls	r4, r6, #26
    861e:	f140 818e 	bpl.w	893e <_vfiprintf_r+0x526>
    8622:	9b07      	ldr	r3, [sp, #28]
    8624:	3307      	adds	r3, #7
    8626:	f023 0307 	bic.w	r3, r3, #7
    862a:	461a      	mov	r2, r3
    862c:	6859      	ldr	r1, [r3, #4]
    862e:	f852 3b08 	ldr.w	r3, [r2], #8
    8632:	9207      	str	r2, [sp, #28]
    8634:	460a      	mov	r2, r1
    8636:	2900      	cmp	r1, #0
    8638:	f2c0 8470 	blt.w	8f1c <_vfiprintf_r+0xb04>
    863c:	1c79      	adds	r1, r7, #1
    863e:	f000 85a2 	beq.w	9186 <_vfiprintf_r+0xd6e>
    8642:	f026 0180 	bic.w	r1, r6, #128	; 0x80
    8646:	9103      	str	r1, [sp, #12]
    8648:	ea53 0102 	orrs.w	r1, r3, r2
    864c:	f000 843f 	beq.w	8ece <_vfiprintf_r+0xab6>
    8650:	2b0a      	cmp	r3, #10
    8652:	f172 0100 	sbcs.w	r1, r2, #0
    8656:	f080 8541 	bcs.w	90dc <_vfiprintf_r+0xcc4>
    865a:	3330      	adds	r3, #48	; 0x30
    865c:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    8660:	9e03      	ldr	r6, [sp, #12]
    8662:	2301      	movs	r3, #1
    8664:	9304      	str	r3, [sp, #16]
    8666:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    866a:	9b04      	ldr	r3, [sp, #16]
    866c:	42bb      	cmp	r3, r7
    866e:	bfb8      	it	lt
    8670:	463b      	movlt	r3, r7
    8672:	9303      	str	r3, [sp, #12]
    8674:	2300      	movs	r3, #0
    8676:	9308      	str	r3, [sp, #32]
    8678:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    867c:	2b00      	cmp	r3, #0
    867e:	f000 80cb 	beq.w	8818 <_vfiprintf_r+0x400>
    8682:	9b03      	ldr	r3, [sp, #12]
    8684:	3301      	adds	r3, #1
    8686:	9303      	str	r3, [sp, #12]
    8688:	e0c6      	b.n	8818 <_vfiprintf_r+0x400>
    868a:	ee18 1a10 	vmov	r1, s16
    868e:	4658      	mov	r0, fp
    8690:	ee18 5a10 	vmov	r5, s16
    8694:	f001 f840 	bl	9718 <__swsetup_r>
    8698:	2800      	cmp	r0, #0
    869a:	f040 8652 	bne.w	9342 <_vfiprintf_r+0xf2a>
    869e:	89aa      	ldrh	r2, [r5, #12]
    86a0:	f002 031a 	and.w	r3, r2, #26
    86a4:	2b0a      	cmp	r3, #10
    86a6:	f47f aef6 	bne.w	8496 <_vfiprintf_r+0x7e>
    86aa:	ee18 1a10 	vmov	r1, s16
    86ae:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
    86b2:	2b00      	cmp	r3, #0
    86b4:	f6ff aeef 	blt.w	8496 <_vfiprintf_r+0x7e>
    86b8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    86ba:	07db      	lsls	r3, r3, #31
    86bc:	d402      	bmi.n	86c4 <_vfiprintf_r+0x2ac>
    86be:	0597      	lsls	r7, r2, #22
    86c0:	f140 8612 	bpl.w	92e8 <_vfiprintf_r+0xed0>
    86c4:	ee18 1a10 	vmov	r1, s16
    86c8:	4623      	mov	r3, r4
    86ca:	4632      	mov	r2, r6
    86cc:	4658      	mov	r0, fp
    86ce:	f000 fe69 	bl	93a4 <__sbprintf>
    86d2:	9005      	str	r0, [sp, #20]
    86d4:	9805      	ldr	r0, [sp, #20]
    86d6:	b045      	add	sp, #276	; 0x114
    86d8:	ecbd 8b02 	vpop	{d8}
    86dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    86e0:	f046 0610 	orr.w	r6, r6, #16
    86e4:	f016 0220 	ands.w	r2, r6, #32
    86e8:	f000 8136 	beq.w	8958 <_vfiprintf_r+0x540>
    86ec:	9b07      	ldr	r3, [sp, #28]
    86ee:	3307      	adds	r3, #7
    86f0:	f023 0307 	bic.w	r3, r3, #7
    86f4:	4619      	mov	r1, r3
    86f6:	685a      	ldr	r2, [r3, #4]
    86f8:	f851 3b08 	ldr.w	r3, [r1], #8
    86fc:	9107      	str	r1, [sp, #28]
    86fe:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    8702:	9103      	str	r1, [sp, #12]
    8704:	2100      	movs	r1, #0
    8706:	2000      	movs	r0, #0
    8708:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
    870c:	1c78      	adds	r0, r7, #1
    870e:	f000 8210 	beq.w	8b32 <_vfiprintf_r+0x71a>
    8712:	9803      	ldr	r0, [sp, #12]
    8714:	f020 0680 	bic.w	r6, r0, #128	; 0x80
    8718:	ea53 0002 	orrs.w	r0, r3, r2
    871c:	f040 8208 	bne.w	8b30 <_vfiprintf_r+0x718>
    8720:	2f00      	cmp	r7, #0
    8722:	f040 8538 	bne.w	9196 <_vfiprintf_r+0xd7e>
    8726:	2900      	cmp	r1, #0
    8728:	f040 83d5 	bne.w	8ed6 <_vfiprintf_r+0xabe>
    872c:	9b03      	ldr	r3, [sp, #12]
    872e:	f013 0301 	ands.w	r3, r3, #1
    8732:	9304      	str	r3, [sp, #16]
    8734:	f000 8411 	beq.w	8f5a <_vfiprintf_r+0xb42>
    8738:	2330      	movs	r3, #48	; 0x30
    873a:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    873e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    8742:	e792      	b.n	866a <_vfiprintf_r+0x252>
    8744:	2208      	movs	r2, #8
    8746:	2100      	movs	r1, #0
    8748:	4650      	mov	r0, sl
    874a:	f7fb ff33 	bl	45b4 <memset>
    874e:	2301      	movs	r3, #1
    8750:	441c      	add	r4, r3
    8752:	e6ad      	b.n	84b0 <_vfiprintf_r+0x98>
    8754:	20001144 	.word	0x20001144
    8758:	ebb4 0608 	subs.w	r6, r4, r8
    875c:	4605      	mov	r5, r0
    875e:	d01b      	beq.n	8798 <_vfiprintf_r+0x380>
    8760:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8762:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    8764:	3301      	adds	r3, #1
    8766:	4432      	add	r2, r6
    8768:	2b07      	cmp	r3, #7
    876a:	e9c9 8600 	strd	r8, r6, [r9]
    876e:	921a      	str	r2, [sp, #104]	; 0x68
    8770:	9319      	str	r3, [sp, #100]	; 0x64
    8772:	dd1c      	ble.n	87ae <_vfiprintf_r+0x396>
    8774:	2a00      	cmp	r2, #0
    8776:	f000 83a6 	beq.w	8ec6 <_vfiprintf_r+0xaae>
    877a:	ee18 1a10 	vmov	r1, s16
    877e:	aa18      	add	r2, sp, #96	; 0x60
    8780:	4658      	mov	r0, fp
    8782:	f7ff fe0d 	bl	83a0 <__sprint_r.part.0>
    8786:	bb20      	cbnz	r0, 87d2 <_vfiprintf_r+0x3ba>
    8788:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    878c:	9b05      	ldr	r3, [sp, #20]
    878e:	4433      	add	r3, r6
    8790:	9305      	str	r3, [sp, #20]
    8792:	2d00      	cmp	r5, #0
    8794:	f47f aea8 	bne.w	84e8 <_vfiprintf_r+0xd0>
    8798:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    879a:	2b00      	cmp	r3, #0
    879c:	f040 85c1 	bne.w	9322 <_vfiprintf_r+0xf0a>
    87a0:	ee18 3a10 	vmov	r3, s16
    87a4:	2200      	movs	r2, #0
    87a6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    87aa:	9219      	str	r2, [sp, #100]	; 0x64
    87ac:	e015      	b.n	87da <_vfiprintf_r+0x3c2>
    87ae:	f109 0908 	add.w	r9, r9, #8
    87b2:	e7eb      	b.n	878c <_vfiprintf_r+0x374>
    87b4:	ee18 1a10 	vmov	r1, s16
    87b8:	aa18      	add	r2, sp, #96	; 0x60
    87ba:	4658      	mov	r0, fp
    87bc:	f7ff fdf0 	bl	83a0 <__sprint_r.part.0>
    87c0:	2800      	cmp	r0, #0
    87c2:	f000 80a6 	beq.w	8912 <_vfiprintf_r+0x4fa>
    87c6:	9b08      	ldr	r3, [sp, #32]
    87c8:	b11b      	cbz	r3, 87d2 <_vfiprintf_r+0x3ba>
    87ca:	9908      	ldr	r1, [sp, #32]
    87cc:	4658      	mov	r0, fp
    87ce:	f7fc f979 	bl	4ac4 <_free_r>
    87d2:	ee18 3a10 	vmov	r3, s16
    87d6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    87da:	ee18 2a10 	vmov	r2, s16
    87de:	6e52      	ldr	r2, [r2, #100]	; 0x64
    87e0:	f012 0f01 	tst.w	r2, #1
    87e4:	b29a      	uxth	r2, r3
    87e6:	f000 80a0 	beq.w	892a <_vfiprintf_r+0x512>
    87ea:	0650      	lsls	r0, r2, #25
    87ec:	f100 85b2 	bmi.w	9354 <_vfiprintf_r+0xf3c>
    87f0:	9805      	ldr	r0, [sp, #20]
    87f2:	b045      	add	sp, #276	; 0x114
    87f4:	ecbd 8b02 	vpop	{d8}
    87f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    87fc:	2900      	cmp	r1, #0
    87fe:	d0cb      	beq.n	8798 <_vfiprintf_r+0x380>
    8800:	2300      	movs	r3, #0
    8802:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    8806:	2301      	movs	r3, #1
    8808:	e9cd 3303 	strd	r3, r3, [sp, #12]
    880c:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
    8810:	ac2b      	add	r4, sp, #172	; 0xac
    8812:	2300      	movs	r3, #0
    8814:	9308      	str	r3, [sp, #32]
    8816:	461f      	mov	r7, r3
    8818:	f016 0302 	ands.w	r3, r6, #2
    881c:	9309      	str	r3, [sp, #36]	; 0x24
    881e:	d002      	beq.n	8826 <_vfiprintf_r+0x40e>
    8820:	9b03      	ldr	r3, [sp, #12]
    8822:	3302      	adds	r3, #2
    8824:	9303      	str	r3, [sp, #12]
    8826:	f016 0384 	ands.w	r3, r6, #132	; 0x84
    882a:	930a      	str	r3, [sp, #40]	; 0x28
    882c:	d105      	bne.n	883a <_vfiprintf_r+0x422>
    882e:	9b06      	ldr	r3, [sp, #24]
    8830:	9a03      	ldr	r2, [sp, #12]
    8832:	1a9d      	subs	r5, r3, r2
    8834:	2d00      	cmp	r5, #0
    8836:	f300 827b 	bgt.w	8d30 <_vfiprintf_r+0x918>
    883a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    883e:	1c41      	adds	r1, r0, #1
    8840:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    8844:	b182      	cbz	r2, 8868 <_vfiprintf_r+0x450>
    8846:	2201      	movs	r2, #1
    8848:	3301      	adds	r3, #1
    884a:	f8c9 2004 	str.w	r2, [r9, #4]
    884e:	2907      	cmp	r1, #7
    8850:	f10d 0243 	add.w	r2, sp, #67	; 0x43
    8854:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    8858:	f8c9 2000 	str.w	r2, [r9]
    885c:	f300 824a 	bgt.w	8cf4 <_vfiprintf_r+0x8dc>
    8860:	4608      	mov	r0, r1
    8862:	f109 0908 	add.w	r9, r9, #8
    8866:	3101      	adds	r1, #1
    8868:	9a09      	ldr	r2, [sp, #36]	; 0x24
    886a:	b1e2      	cbz	r2, 88a6 <_vfiprintf_r+0x48e>
    886c:	aa11      	add	r2, sp, #68	; 0x44
    886e:	3302      	adds	r3, #2
    8870:	f8c9 2000 	str.w	r2, [r9]
    8874:	2907      	cmp	r1, #7
    8876:	f04f 0202 	mov.w	r2, #2
    887a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    887e:	f8c9 2004 	str.w	r2, [r9, #4]
    8882:	f340 8250 	ble.w	8d26 <_vfiprintf_r+0x90e>
    8886:	2b00      	cmp	r3, #0
    8888:	f000 8343 	beq.w	8f12 <_vfiprintf_r+0xafa>
    888c:	ee18 1a10 	vmov	r1, s16
    8890:	aa18      	add	r2, sp, #96	; 0x60
    8892:	4658      	mov	r0, fp
    8894:	f7ff fd84 	bl	83a0 <__sprint_r.part.0>
    8898:	2800      	cmp	r0, #0
    889a:	d194      	bne.n	87c6 <_vfiprintf_r+0x3ae>
    889c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    88a0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    88a4:	1c41      	adds	r1, r0, #1
    88a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    88a8:	2a80      	cmp	r2, #128	; 0x80
    88aa:	f000 8184 	beq.w	8bb6 <_vfiprintf_r+0x79e>
    88ae:	9a04      	ldr	r2, [sp, #16]
    88b0:	1abd      	subs	r5, r7, r2
    88b2:	2d00      	cmp	r5, #0
    88b4:	f300 81d7 	bgt.w	8c66 <_vfiprintf_r+0x84e>
    88b8:	9a04      	ldr	r2, [sp, #16]
    88ba:	f8c9 4000 	str.w	r4, [r9]
    88be:	4413      	add	r3, r2
    88c0:	2907      	cmp	r1, #7
    88c2:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    88c6:	f8c9 2004 	str.w	r2, [r9, #4]
    88ca:	f340 816e 	ble.w	8baa <_vfiprintf_r+0x792>
    88ce:	2b00      	cmp	r3, #0
    88d0:	f000 8275 	beq.w	8dbe <_vfiprintf_r+0x9a6>
    88d4:	ee18 1a10 	vmov	r1, s16
    88d8:	aa18      	add	r2, sp, #96	; 0x60
    88da:	4658      	mov	r0, fp
    88dc:	f7ff fd60 	bl	83a0 <__sprint_r.part.0>
    88e0:	2800      	cmp	r0, #0
    88e2:	f47f af70 	bne.w	87c6 <_vfiprintf_r+0x3ae>
    88e6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    88e8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    88ec:	0775      	lsls	r5, r6, #29
    88ee:	d505      	bpl.n	88fc <_vfiprintf_r+0x4e4>
    88f0:	9a06      	ldr	r2, [sp, #24]
    88f2:	9903      	ldr	r1, [sp, #12]
    88f4:	1a54      	subs	r4, r2, r1
    88f6:	2c00      	cmp	r4, #0
    88f8:	f300 826b 	bgt.w	8dd2 <_vfiprintf_r+0x9ba>
    88fc:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
    8900:	9803      	ldr	r0, [sp, #12]
    8902:	4281      	cmp	r1, r0
    8904:	bfac      	ite	ge
    8906:	1852      	addge	r2, r2, r1
    8908:	1812      	addlt	r2, r2, r0
    890a:	9205      	str	r2, [sp, #20]
    890c:	2b00      	cmp	r3, #0
    890e:	f47f af51 	bne.w	87b4 <_vfiprintf_r+0x39c>
    8912:	9908      	ldr	r1, [sp, #32]
    8914:	2300      	movs	r3, #0
    8916:	9319      	str	r3, [sp, #100]	; 0x64
    8918:	2900      	cmp	r1, #0
    891a:	f000 8149 	beq.w	8bb0 <_vfiprintf_r+0x798>
    891e:	4658      	mov	r0, fp
    8920:	f7fc f8d0 	bl	4ac4 <_free_r>
    8924:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8928:	e5c1      	b.n	84ae <_vfiprintf_r+0x96>
    892a:	059c      	lsls	r4, r3, #22
    892c:	f53f af5d 	bmi.w	87ea <_vfiprintf_r+0x3d2>
    8930:	ee18 4a10 	vmov	r4, s16
    8934:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8936:	f7fb ff5d 	bl	47f4 <__retarget_lock_release_recursive>
    893a:	89a2      	ldrh	r2, [r4, #12]
    893c:	e755      	b.n	87ea <_vfiprintf_r+0x3d2>
    893e:	06f0      	lsls	r0, r6, #27
    8940:	9a07      	ldr	r2, [sp, #28]
    8942:	f100 831f 	bmi.w	8f84 <_vfiprintf_r+0xb6c>
    8946:	0671      	lsls	r1, r6, #25
    8948:	f140 8319 	bpl.w	8f7e <_vfiprintf_r+0xb66>
    894c:	f932 3b04 	ldrsh.w	r3, [r2], #4
    8950:	9207      	str	r2, [sp, #28]
    8952:	17da      	asrs	r2, r3, #31
    8954:	4611      	mov	r1, r2
    8956:	e66e      	b.n	8636 <_vfiprintf_r+0x21e>
    8958:	f016 0310 	ands.w	r3, r6, #16
    895c:	9907      	ldr	r1, [sp, #28]
    895e:	f040 8309 	bne.w	8f74 <_vfiprintf_r+0xb5c>
    8962:	f016 0040 	ands.w	r0, r6, #64	; 0x40
    8966:	f000 8301 	beq.w	8f6c <_vfiprintf_r+0xb54>
    896a:	461a      	mov	r2, r3
    896c:	f851 3b04 	ldr.w	r3, [r1], #4
    8970:	9107      	str	r1, [sp, #28]
    8972:	b29b      	uxth	r3, r3
    8974:	e6c3      	b.n	86fe <_vfiprintf_r+0x2e6>
    8976:	9b07      	ldr	r3, [sp, #28]
    8978:	461a      	mov	r2, r3
    897a:	2300      	movs	r3, #0
    897c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    8980:	4613      	mov	r3, r2
    8982:	f853 4b04 	ldr.w	r4, [r3], #4
    8986:	9303      	str	r3, [sp, #12]
    8988:	2c00      	cmp	r4, #0
    898a:	f000 8412 	beq.w	91b2 <_vfiprintf_r+0xd9a>
    898e:	2953      	cmp	r1, #83	; 0x53
    8990:	f000 8365 	beq.w	905e <_vfiprintf_r+0xc46>
    8994:	f016 0510 	ands.w	r5, r6, #16
    8998:	f040 8361 	bne.w	905e <_vfiprintf_r+0xc46>
    899c:	1c7b      	adds	r3, r7, #1
    899e:	f000 84b3 	beq.w	9308 <_vfiprintf_r+0xef0>
    89a2:	463a      	mov	r2, r7
    89a4:	4629      	mov	r1, r5
    89a6:	4620      	mov	r0, r4
    89a8:	f7fe fc42 	bl	7230 <memchr>
    89ac:	9008      	str	r0, [sp, #32]
    89ae:	2800      	cmp	r0, #0
    89b0:	f000 849f 	beq.w	92f2 <_vfiprintf_r+0xeda>
    89b4:	1b03      	subs	r3, r0, r4
    89b6:	9a03      	ldr	r2, [sp, #12]
    89b8:	9304      	str	r3, [sp, #16]
    89ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    89be:	462f      	mov	r7, r5
    89c0:	9207      	str	r2, [sp, #28]
    89c2:	9303      	str	r3, [sp, #12]
    89c4:	9508      	str	r5, [sp, #32]
    89c6:	e657      	b.n	8678 <_vfiprintf_r+0x260>
    89c8:	2943      	cmp	r1, #67	; 0x43
    89ca:	d002      	beq.n	89d2 <_vfiprintf_r+0x5ba>
    89cc:	06f5      	lsls	r5, r6, #27
    89ce:	f140 832d 	bpl.w	902c <_vfiprintf_r+0xc14>
    89d2:	9d07      	ldr	r5, [sp, #28]
    89d4:	2208      	movs	r2, #8
    89d6:	2100      	movs	r1, #0
    89d8:	a816      	add	r0, sp, #88	; 0x58
    89da:	ac2b      	add	r4, sp, #172	; 0xac
    89dc:	f7fb fdea 	bl	45b4 <memset>
    89e0:	ab16      	add	r3, sp, #88	; 0x58
    89e2:	f855 2b04 	ldr.w	r2, [r5], #4
    89e6:	4621      	mov	r1, r4
    89e8:	4658      	mov	r0, fp
    89ea:	f7ff fc13 	bl	8214 <_wcrtomb_r>
    89ee:	4603      	mov	r3, r0
    89f0:	3301      	adds	r3, #1
    89f2:	9004      	str	r0, [sp, #16]
    89f4:	f000 84b3 	beq.w	935e <_vfiprintf_r+0xf46>
    89f8:	9b04      	ldr	r3, [sp, #16]
    89fa:	9507      	str	r5, [sp, #28]
    89fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    8a00:	9303      	str	r3, [sp, #12]
    8a02:	2300      	movs	r3, #0
    8a04:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    8a08:	e703      	b.n	8812 <_vfiprintf_r+0x3fa>
    8a0a:	9b07      	ldr	r3, [sp, #28]
    8a0c:	f853 2b04 	ldr.w	r2, [r3], #4
    8a10:	9206      	str	r2, [sp, #24]
    8a12:	2a00      	cmp	r2, #0
    8a14:	f280 829c 	bge.w	8f50 <_vfiprintf_r+0xb38>
    8a18:	9a06      	ldr	r2, [sp, #24]
    8a1a:	4252      	negs	r2, r2
    8a1c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    8a20:	f898 1000 	ldrb.w	r1, [r8]
    8a24:	f046 0604 	orr.w	r6, r6, #4
    8a28:	e569      	b.n	84fe <_vfiprintf_r+0xe6>
    8a2a:	f898 1000 	ldrb.w	r1, [r8]
    8a2e:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
    8a32:	e564      	b.n	84fe <_vfiprintf_r+0xe6>
    8a34:	f898 1000 	ldrb.w	r1, [r8]
    8a38:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    8a3c:	e55f      	b.n	84fe <_vfiprintf_r+0xe6>
    8a3e:	4642      	mov	r2, r8
    8a40:	f812 1b01 	ldrb.w	r1, [r2], #1
    8a44:	292a      	cmp	r1, #42	; 0x2a
    8a46:	f000 8496 	beq.w	9376 <_vfiprintf_r+0xf5e>
    8a4a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    8a4e:	2b09      	cmp	r3, #9
    8a50:	4690      	mov	r8, r2
    8a52:	f04f 0700 	mov.w	r7, #0
    8a56:	f63f ad54 	bhi.w	8502 <_vfiprintf_r+0xea>
    8a5a:	f818 1b01 	ldrb.w	r1, [r8], #1
    8a5e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    8a62:	eb03 0747 	add.w	r7, r3, r7, lsl #1
    8a66:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    8a6a:	2b09      	cmp	r3, #9
    8a6c:	d9f5      	bls.n	8a5a <_vfiprintf_r+0x642>
    8a6e:	e548      	b.n	8502 <_vfiprintf_r+0xea>
    8a70:	f898 1000 	ldrb.w	r1, [r8]
    8a74:	f046 0601 	orr.w	r6, r6, #1
    8a78:	e541      	b.n	84fe <_vfiprintf_r+0xe6>
    8a7a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    8a7e:	2b00      	cmp	r3, #0
    8a80:	f47f adc2 	bne.w	8608 <_vfiprintf_r+0x1f0>
    8a84:	2320      	movs	r3, #32
    8a86:	f898 1000 	ldrb.w	r1, [r8]
    8a8a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    8a8e:	e536      	b.n	84fe <_vfiprintf_r+0xe6>
    8a90:	f898 1000 	ldrb.w	r1, [r8]
    8a94:	296c      	cmp	r1, #108	; 0x6c
    8a96:	bf03      	ittte	eq
    8a98:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    8a9c:	f046 0620 	orreq.w	r6, r6, #32
    8aa0:	f108 0801 	addeq.w	r8, r8, #1
    8aa4:	f046 0610 	orrne.w	r6, r6, #16
    8aa8:	e529      	b.n	84fe <_vfiprintf_r+0xe6>
    8aaa:	f898 1000 	ldrb.w	r1, [r8]
    8aae:	2968      	cmp	r1, #104	; 0x68
    8ab0:	bf03      	ittte	eq
    8ab2:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    8ab6:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
    8aba:	f108 0801 	addeq.w	r8, r8, #1
    8abe:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
    8ac2:	e51c      	b.n	84fe <_vfiprintf_r+0xe6>
    8ac4:	f046 0310 	orr.w	r3, r6, #16
    8ac8:	9303      	str	r3, [sp, #12]
    8aca:	9b03      	ldr	r3, [sp, #12]
    8acc:	f013 0220 	ands.w	r2, r3, #32
    8ad0:	f000 8206 	beq.w	8ee0 <_vfiprintf_r+0xac8>
    8ad4:	9b07      	ldr	r3, [sp, #28]
    8ad6:	3307      	adds	r3, #7
    8ad8:	f023 0307 	bic.w	r3, r3, #7
    8adc:	4619      	mov	r1, r3
    8ade:	685a      	ldr	r2, [r3, #4]
    8ae0:	f851 3b08 	ldr.w	r3, [r1], #8
    8ae4:	9107      	str	r1, [sp, #28]
    8ae6:	2101      	movs	r1, #1
    8ae8:	e60d      	b.n	8706 <_vfiprintf_r+0x2ee>
    8aea:	9a07      	ldr	r2, [sp, #28]
    8aec:	f046 0302 	orr.w	r3, r6, #2
    8af0:	9303      	str	r3, [sp, #12]
    8af2:	f852 3b04 	ldr.w	r3, [r2], #4
    8af6:	9207      	str	r2, [sp, #28]
    8af8:	f647 0230 	movw	r2, #30768	; 0x7830
    8afc:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
    8b00:	4ab8      	ldr	r2, [pc, #736]	; (8de4 <_vfiprintf_r+0x9cc>)
    8b02:	920c      	str	r2, [sp, #48]	; 0x30
    8b04:	2102      	movs	r1, #2
    8b06:	2200      	movs	r2, #0
    8b08:	e5fd      	b.n	8706 <_vfiprintf_r+0x2ee>
    8b0a:	06b7      	lsls	r7, r6, #26
    8b0c:	f100 8248 	bmi.w	8fa0 <_vfiprintf_r+0xb88>
    8b10:	06f5      	lsls	r5, r6, #27
    8b12:	f100 8346 	bmi.w	91a2 <_vfiprintf_r+0xd8a>
    8b16:	0674      	lsls	r4, r6, #25
    8b18:	f100 83d5 	bmi.w	92c6 <_vfiprintf_r+0xeae>
    8b1c:	05b0      	lsls	r0, r6, #22
    8b1e:	f140 8340 	bpl.w	91a2 <_vfiprintf_r+0xd8a>
    8b22:	9b07      	ldr	r3, [sp, #28]
    8b24:	9905      	ldr	r1, [sp, #20]
    8b26:	f853 2b04 	ldr.w	r2, [r3], #4
    8b2a:	9307      	str	r3, [sp, #28]
    8b2c:	7011      	strb	r1, [r2, #0]
    8b2e:	e4be      	b.n	84ae <_vfiprintf_r+0x96>
    8b30:	9603      	str	r6, [sp, #12]
    8b32:	2901      	cmp	r1, #1
    8b34:	f43f ad8c 	beq.w	8650 <_vfiprintf_r+0x238>
    8b38:	2902      	cmp	r1, #2
    8b3a:	ac44      	add	r4, sp, #272	; 0x110
    8b3c:	d111      	bne.n	8b62 <_vfiprintf_r+0x74a>
    8b3e:	980c      	ldr	r0, [sp, #48]	; 0x30
    8b40:	f003 010f 	and.w	r1, r3, #15
    8b44:	091b      	lsrs	r3, r3, #4
    8b46:	5c41      	ldrb	r1, [r0, r1]
    8b48:	f804 1d01 	strb.w	r1, [r4, #-1]!
    8b4c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    8b50:	0912      	lsrs	r2, r2, #4
    8b52:	ea53 0102 	orrs.w	r1, r3, r2
    8b56:	d1f3      	bne.n	8b40 <_vfiprintf_r+0x728>
    8b58:	9e03      	ldr	r6, [sp, #12]
    8b5a:	ab44      	add	r3, sp, #272	; 0x110
    8b5c:	1b1b      	subs	r3, r3, r4
    8b5e:	9304      	str	r3, [sp, #16]
    8b60:	e583      	b.n	866a <_vfiprintf_r+0x252>
    8b62:	f003 0107 	and.w	r1, r3, #7
    8b66:	08db      	lsrs	r3, r3, #3
    8b68:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    8b6c:	08d2      	lsrs	r2, r2, #3
    8b6e:	3130      	adds	r1, #48	; 0x30
    8b70:	ea53 0502 	orrs.w	r5, r3, r2
    8b74:	4620      	mov	r0, r4
    8b76:	f804 1d01 	strb.w	r1, [r4, #-1]!
    8b7a:	d1f2      	bne.n	8b62 <_vfiprintf_r+0x74a>
    8b7c:	9e03      	ldr	r6, [sp, #12]
    8b7e:	07f3      	lsls	r3, r6, #31
    8b80:	d5eb      	bpl.n	8b5a <_vfiprintf_r+0x742>
    8b82:	2930      	cmp	r1, #48	; 0x30
    8b84:	d0e8      	beq.n	8b58 <_vfiprintf_r+0x740>
    8b86:	2330      	movs	r3, #48	; 0x30
    8b88:	3802      	subs	r0, #2
    8b8a:	f804 3c01 	strb.w	r3, [r4, #-1]
    8b8e:	ab44      	add	r3, sp, #272	; 0x110
    8b90:	1a1b      	subs	r3, r3, r0
    8b92:	9e03      	ldr	r6, [sp, #12]
    8b94:	9304      	str	r3, [sp, #16]
    8b96:	4604      	mov	r4, r0
    8b98:	e567      	b.n	866a <_vfiprintf_r+0x252>
    8b9a:	9b04      	ldr	r3, [sp, #16]
    8b9c:	941b      	str	r4, [sp, #108]	; 0x6c
    8b9e:	2201      	movs	r2, #1
    8ba0:	931c      	str	r3, [sp, #112]	; 0x70
    8ba2:	931a      	str	r3, [sp, #104]	; 0x68
    8ba4:	9219      	str	r2, [sp, #100]	; 0x64
    8ba6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8baa:	f109 0908 	add.w	r9, r9, #8
    8bae:	e69d      	b.n	88ec <_vfiprintf_r+0x4d4>
    8bb0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8bb4:	e47b      	b.n	84ae <_vfiprintf_r+0x96>
    8bb6:	9a06      	ldr	r2, [sp, #24]
    8bb8:	9d03      	ldr	r5, [sp, #12]
    8bba:	1b55      	subs	r5, r2, r5
    8bbc:	2d00      	cmp	r5, #0
    8bbe:	f77f ae76 	ble.w	88ae <_vfiprintf_r+0x496>
    8bc2:	2d10      	cmp	r5, #16
    8bc4:	f340 83bb 	ble.w	933e <_vfiprintf_r+0xf26>
    8bc8:	9409      	str	r4, [sp, #36]	; 0x24
    8bca:	ee18 4a10 	vmov	r4, s16
    8bce:	e007      	b.n	8be0 <_vfiprintf_r+0x7c8>
    8bd0:	f100 0c02 	add.w	ip, r0, #2
    8bd4:	f109 0908 	add.w	r9, r9, #8
    8bd8:	4610      	mov	r0, r2
    8bda:	3d10      	subs	r5, #16
    8bdc:	2d10      	cmp	r5, #16
    8bde:	dd1e      	ble.n	8c1e <_vfiprintf_r+0x806>
    8be0:	4981      	ldr	r1, [pc, #516]	; (8de8 <_vfiprintf_r+0x9d0>)
    8be2:	f8c9 1000 	str.w	r1, [r9]
    8be6:	1c42      	adds	r2, r0, #1
    8be8:	3310      	adds	r3, #16
    8bea:	2110      	movs	r1, #16
    8bec:	2a07      	cmp	r2, #7
    8bee:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    8bf2:	f8c9 1004 	str.w	r1, [r9, #4]
    8bf6:	ddeb      	ble.n	8bd0 <_vfiprintf_r+0x7b8>
    8bf8:	aa18      	add	r2, sp, #96	; 0x60
    8bfa:	2b00      	cmp	r3, #0
    8bfc:	d074      	beq.n	8ce8 <_vfiprintf_r+0x8d0>
    8bfe:	4621      	mov	r1, r4
    8c00:	4658      	mov	r0, fp
    8c02:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8c06:	f7ff fbcb 	bl	83a0 <__sprint_r.part.0>
    8c0a:	2800      	cmp	r0, #0
    8c0c:	f47f addb 	bne.w	87c6 <_vfiprintf_r+0x3ae>
    8c10:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    8c14:	3d10      	subs	r5, #16
    8c16:	2d10      	cmp	r5, #16
    8c18:	f100 0c01 	add.w	ip, r0, #1
    8c1c:	dce0      	bgt.n	8be0 <_vfiprintf_r+0x7c8>
    8c1e:	9c09      	ldr	r4, [sp, #36]	; 0x24
    8c20:	4a71      	ldr	r2, [pc, #452]	; (8de8 <_vfiprintf_r+0x9d0>)
    8c22:	f8c9 5004 	str.w	r5, [r9, #4]
    8c26:	442b      	add	r3, r5
    8c28:	f1bc 0f07 	cmp.w	ip, #7
    8c2c:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
    8c30:	f8c9 2000 	str.w	r2, [r9]
    8c34:	f340 8194 	ble.w	8f60 <_vfiprintf_r+0xb48>
    8c38:	2b00      	cmp	r3, #0
    8c3a:	f000 831f 	beq.w	927c <_vfiprintf_r+0xe64>
    8c3e:	ee18 1a10 	vmov	r1, s16
    8c42:	aa18      	add	r2, sp, #96	; 0x60
    8c44:	4658      	mov	r0, fp
    8c46:	f7ff fbab 	bl	83a0 <__sprint_r.part.0>
    8c4a:	2800      	cmp	r0, #0
    8c4c:	f47f adbb 	bne.w	87c6 <_vfiprintf_r+0x3ae>
    8c50:	9a04      	ldr	r2, [sp, #16]
    8c52:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    8c56:	1abd      	subs	r5, r7, r2
    8c58:	2d00      	cmp	r5, #0
    8c5a:	f100 0101 	add.w	r1, r0, #1
    8c5e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8c62:	f77f ae29 	ble.w	88b8 <_vfiprintf_r+0x4a0>
    8c66:	2d10      	cmp	r5, #16
    8c68:	dd29      	ble.n	8cbe <_vfiprintf_r+0x8a6>
    8c6a:	9409      	str	r4, [sp, #36]	; 0x24
    8c6c:	2710      	movs	r7, #16
    8c6e:	ee18 4a10 	vmov	r4, s16
    8c72:	e007      	b.n	8c84 <_vfiprintf_r+0x86c>
    8c74:	f100 0c02 	add.w	ip, r0, #2
    8c78:	f109 0908 	add.w	r9, r9, #8
    8c7c:	4610      	mov	r0, r2
    8c7e:	3d10      	subs	r5, #16
    8c80:	2d10      	cmp	r5, #16
    8c82:	dd1a      	ble.n	8cba <_vfiprintf_r+0x8a2>
    8c84:	1c42      	adds	r2, r0, #1
    8c86:	4958      	ldr	r1, [pc, #352]	; (8de8 <_vfiprintf_r+0x9d0>)
    8c88:	3310      	adds	r3, #16
    8c8a:	2a07      	cmp	r2, #7
    8c8c:	e9c9 1700 	strd	r1, r7, [r9]
    8c90:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    8c94:	ddee      	ble.n	8c74 <_vfiprintf_r+0x85c>
    8c96:	aa18      	add	r2, sp, #96	; 0x60
    8c98:	b303      	cbz	r3, 8cdc <_vfiprintf_r+0x8c4>
    8c9a:	4621      	mov	r1, r4
    8c9c:	4658      	mov	r0, fp
    8c9e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8ca2:	f7ff fb7d 	bl	83a0 <__sprint_r.part.0>
    8ca6:	2800      	cmp	r0, #0
    8ca8:	f47f ad8d 	bne.w	87c6 <_vfiprintf_r+0x3ae>
    8cac:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    8cb0:	3d10      	subs	r5, #16
    8cb2:	2d10      	cmp	r5, #16
    8cb4:	f100 0c01 	add.w	ip, r0, #1
    8cb8:	dce4      	bgt.n	8c84 <_vfiprintf_r+0x86c>
    8cba:	9c09      	ldr	r4, [sp, #36]	; 0x24
    8cbc:	4661      	mov	r1, ip
    8cbe:	4a4a      	ldr	r2, [pc, #296]	; (8de8 <_vfiprintf_r+0x9d0>)
    8cc0:	f8c9 5004 	str.w	r5, [r9, #4]
    8cc4:	442b      	add	r3, r5
    8cc6:	2907      	cmp	r1, #7
    8cc8:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    8ccc:	f8c9 2000 	str.w	r2, [r9]
    8cd0:	f300 80e7 	bgt.w	8ea2 <_vfiprintf_r+0xa8a>
    8cd4:	f109 0908 	add.w	r9, r9, #8
    8cd8:	3101      	adds	r1, #1
    8cda:	e5ed      	b.n	88b8 <_vfiprintf_r+0x4a0>
    8cdc:	f04f 0c01 	mov.w	ip, #1
    8ce0:	4618      	mov	r0, r3
    8ce2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8ce6:	e7ca      	b.n	8c7e <_vfiprintf_r+0x866>
    8ce8:	f04f 0c01 	mov.w	ip, #1
    8cec:	4618      	mov	r0, r3
    8cee:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8cf2:	e772      	b.n	8bda <_vfiprintf_r+0x7c2>
    8cf4:	2b00      	cmp	r3, #0
    8cf6:	f000 8104 	beq.w	8f02 <_vfiprintf_r+0xaea>
    8cfa:	ee18 1a10 	vmov	r1, s16
    8cfe:	aa18      	add	r2, sp, #96	; 0x60
    8d00:	4658      	mov	r0, fp
    8d02:	f7ff fb4d 	bl	83a0 <__sprint_r.part.0>
    8d06:	2800      	cmp	r0, #0
    8d08:	f47f ad5d 	bne.w	87c6 <_vfiprintf_r+0x3ae>
    8d0c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    8d10:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8d14:	1c41      	adds	r1, r0, #1
    8d16:	e5a7      	b.n	8868 <_vfiprintf_r+0x450>
    8d18:	2302      	movs	r3, #2
    8d1a:	aa11      	add	r2, sp, #68	; 0x44
    8d1c:	931c      	str	r3, [sp, #112]	; 0x70
    8d1e:	921b      	str	r2, [sp, #108]	; 0x6c
    8d20:	2101      	movs	r1, #1
    8d22:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8d26:	4608      	mov	r0, r1
    8d28:	f109 0908 	add.w	r9, r9, #8
    8d2c:	1c41      	adds	r1, r0, #1
    8d2e:	e5ba      	b.n	88a6 <_vfiprintf_r+0x48e>
    8d30:	2d10      	cmp	r5, #16
    8d32:	f340 82e5 	ble.w	9300 <_vfiprintf_r+0xee8>
    8d36:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    8d3a:	940f      	str	r4, [sp, #60]	; 0x3c
    8d3c:	4608      	mov	r0, r1
    8d3e:	ee18 4a10 	vmov	r4, s16
    8d42:	e007      	b.n	8d54 <_vfiprintf_r+0x93c>
    8d44:	f100 0c02 	add.w	ip, r0, #2
    8d48:	f109 0908 	add.w	r9, r9, #8
    8d4c:	4610      	mov	r0, r2
    8d4e:	3d10      	subs	r5, #16
    8d50:	2d10      	cmp	r5, #16
    8d52:	dd1d      	ble.n	8d90 <_vfiprintf_r+0x978>
    8d54:	4925      	ldr	r1, [pc, #148]	; (8dec <_vfiprintf_r+0x9d4>)
    8d56:	f8c9 1000 	str.w	r1, [r9]
    8d5a:	1c42      	adds	r2, r0, #1
    8d5c:	3310      	adds	r3, #16
    8d5e:	2110      	movs	r1, #16
    8d60:	2a07      	cmp	r2, #7
    8d62:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    8d66:	f8c9 1004 	str.w	r1, [r9, #4]
    8d6a:	ddeb      	ble.n	8d44 <_vfiprintf_r+0x92c>
    8d6c:	aa18      	add	r2, sp, #96	; 0x60
    8d6e:	b303      	cbz	r3, 8db2 <_vfiprintf_r+0x99a>
    8d70:	4621      	mov	r1, r4
    8d72:	4658      	mov	r0, fp
    8d74:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8d78:	f7ff fb12 	bl	83a0 <__sprint_r.part.0>
    8d7c:	2800      	cmp	r0, #0
    8d7e:	f47f ad22 	bne.w	87c6 <_vfiprintf_r+0x3ae>
    8d82:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    8d86:	3d10      	subs	r5, #16
    8d88:	2d10      	cmp	r5, #16
    8d8a:	f100 0c01 	add.w	ip, r0, #1
    8d8e:	dce1      	bgt.n	8d54 <_vfiprintf_r+0x93c>
    8d90:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    8d92:	4660      	mov	r0, ip
    8d94:	4a15      	ldr	r2, [pc, #84]	; (8dec <_vfiprintf_r+0x9d4>)
    8d96:	f8c9 5004 	str.w	r5, [r9, #4]
    8d9a:	442b      	add	r3, r5
    8d9c:	2807      	cmp	r0, #7
    8d9e:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    8da2:	f8c9 2000 	str.w	r2, [r9]
    8da6:	f300 80c1 	bgt.w	8f2c <_vfiprintf_r+0xb14>
    8daa:	f109 0908 	add.w	r9, r9, #8
    8dae:	1c41      	adds	r1, r0, #1
    8db0:	e546      	b.n	8840 <_vfiprintf_r+0x428>
    8db2:	4618      	mov	r0, r3
    8db4:	f04f 0c01 	mov.w	ip, #1
    8db8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8dbc:	e7c7      	b.n	8d4e <_vfiprintf_r+0x936>
    8dbe:	0776      	lsls	r6, r6, #29
    8dc0:	9319      	str	r3, [sp, #100]	; 0x64
    8dc2:	d553      	bpl.n	8e6c <_vfiprintf_r+0xa54>
    8dc4:	9a06      	ldr	r2, [sp, #24]
    8dc6:	9903      	ldr	r1, [sp, #12]
    8dc8:	1a54      	subs	r4, r2, r1
    8dca:	2c00      	cmp	r4, #0
    8dcc:	dd4e      	ble.n	8e6c <_vfiprintf_r+0xa54>
    8dce:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8dd2:	2c10      	cmp	r4, #16
    8dd4:	f340 82b0 	ble.w	9338 <_vfiprintf_r+0xf20>
    8dd8:	9919      	ldr	r1, [sp, #100]	; 0x64
    8dda:	ee18 6a10 	vmov	r6, s16
    8dde:	2510      	movs	r5, #16
    8de0:	e00d      	b.n	8dfe <_vfiprintf_r+0x9e6>
    8de2:	bf00      	nop
    8de4:	200007bc 	.word	0x200007bc
    8de8:	20000d98 	.word	0x20000d98
    8dec:	20000800 	.word	0x20000800
    8df0:	1c88      	adds	r0, r1, #2
    8df2:	f109 0908 	add.w	r9, r9, #8
    8df6:	4611      	mov	r1, r2
    8df8:	3c10      	subs	r4, #16
    8dfa:	2c10      	cmp	r4, #16
    8dfc:	dd1a      	ble.n	8e34 <_vfiprintf_r+0xa1c>
    8dfe:	1c4a      	adds	r2, r1, #1
    8e00:	48b3      	ldr	r0, [pc, #716]	; (90d0 <_vfiprintf_r+0xcb8>)
    8e02:	3310      	adds	r3, #16
    8e04:	2a07      	cmp	r2, #7
    8e06:	e9c9 0500 	strd	r0, r5, [r9]
    8e0a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    8e0e:	ddef      	ble.n	8df0 <_vfiprintf_r+0x9d8>
    8e10:	aa18      	add	r2, sp, #96	; 0x60
    8e12:	b333      	cbz	r3, 8e62 <_vfiprintf_r+0xa4a>
    8e14:	4631      	mov	r1, r6
    8e16:	4658      	mov	r0, fp
    8e18:	f7ff fac2 	bl	83a0 <__sprint_r.part.0>
    8e1c:	2800      	cmp	r0, #0
    8e1e:	f47f acd2 	bne.w	87c6 <_vfiprintf_r+0x3ae>
    8e22:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    8e26:	3c10      	subs	r4, #16
    8e28:	2c10      	cmp	r4, #16
    8e2a:	f101 0001 	add.w	r0, r1, #1
    8e2e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8e32:	dce4      	bgt.n	8dfe <_vfiprintf_r+0x9e6>
    8e34:	4aa6      	ldr	r2, [pc, #664]	; (90d0 <_vfiprintf_r+0xcb8>)
    8e36:	f8c9 4004 	str.w	r4, [r9, #4]
    8e3a:	4423      	add	r3, r4
    8e3c:	2807      	cmp	r0, #7
    8e3e:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    8e42:	f8c9 2000 	str.w	r2, [r9]
    8e46:	f77f ad59 	ble.w	88fc <_vfiprintf_r+0x4e4>
    8e4a:	b17b      	cbz	r3, 8e6c <_vfiprintf_r+0xa54>
    8e4c:	ee18 1a10 	vmov	r1, s16
    8e50:	aa18      	add	r2, sp, #96	; 0x60
    8e52:	4658      	mov	r0, fp
    8e54:	f7ff faa4 	bl	83a0 <__sprint_r.part.0>
    8e58:	2800      	cmp	r0, #0
    8e5a:	f47f acb4 	bne.w	87c6 <_vfiprintf_r+0x3ae>
    8e5e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8e60:	e54c      	b.n	88fc <_vfiprintf_r+0x4e4>
    8e62:	2001      	movs	r0, #1
    8e64:	4619      	mov	r1, r3
    8e66:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8e6a:	e7c5      	b.n	8df8 <_vfiprintf_r+0x9e0>
    8e6c:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    8e70:	9903      	ldr	r1, [sp, #12]
    8e72:	428a      	cmp	r2, r1
    8e74:	bfac      	ite	ge
    8e76:	189b      	addge	r3, r3, r2
    8e78:	185b      	addlt	r3, r3, r1
    8e7a:	9305      	str	r3, [sp, #20]
    8e7c:	e549      	b.n	8912 <_vfiprintf_r+0x4fa>
    8e7e:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    8e82:	058f      	lsls	r7, r1, #22
    8e84:	ee18 3a10 	vmov	r3, s16
    8e88:	b28a      	uxth	r2, r1
    8e8a:	f53f aae8 	bmi.w	845e <_vfiprintf_r+0x46>
    8e8e:	ee18 5a10 	vmov	r5, s16
    8e92:	6d98      	ldr	r0, [r3, #88]	; 0x58
    8e94:	f7fb fcac 	bl	47f0 <__retarget_lock_acquire_recursive>
    8e98:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
    8e9c:	b28a      	uxth	r2, r1
    8e9e:	f7ff bade 	b.w	845e <_vfiprintf_r+0x46>
    8ea2:	2b00      	cmp	r3, #0
    8ea4:	f43f ae79 	beq.w	8b9a <_vfiprintf_r+0x782>
    8ea8:	ee18 1a10 	vmov	r1, s16
    8eac:	aa18      	add	r2, sp, #96	; 0x60
    8eae:	4658      	mov	r0, fp
    8eb0:	f7ff fa76 	bl	83a0 <__sprint_r.part.0>
    8eb4:	2800      	cmp	r0, #0
    8eb6:	f47f ac86 	bne.w	87c6 <_vfiprintf_r+0x3ae>
    8eba:	9919      	ldr	r1, [sp, #100]	; 0x64
    8ebc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8ebe:	3101      	adds	r1, #1
    8ec0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8ec4:	e4f8      	b.n	88b8 <_vfiprintf_r+0x4a0>
    8ec6:	9219      	str	r2, [sp, #100]	; 0x64
    8ec8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8ecc:	e45e      	b.n	878c <_vfiprintf_r+0x374>
    8ece:	2f00      	cmp	r7, #0
    8ed0:	f47f abc3 	bne.w	865a <_vfiprintf_r+0x242>
    8ed4:	9e03      	ldr	r6, [sp, #12]
    8ed6:	2700      	movs	r7, #0
    8ed8:	9704      	str	r7, [sp, #16]
    8eda:	ac44      	add	r4, sp, #272	; 0x110
    8edc:	f7ff bbc5 	b.w	866a <_vfiprintf_r+0x252>
    8ee0:	9b03      	ldr	r3, [sp, #12]
    8ee2:	f013 0310 	ands.w	r3, r3, #16
    8ee6:	d154      	bne.n	8f92 <_vfiprintf_r+0xb7a>
    8ee8:	9a03      	ldr	r2, [sp, #12]
    8eea:	f012 0040 	ands.w	r0, r2, #64	; 0x40
    8eee:	f000 816b 	beq.w	91c8 <_vfiprintf_r+0xdb0>
    8ef2:	9907      	ldr	r1, [sp, #28]
    8ef4:	461a      	mov	r2, r3
    8ef6:	f851 3b04 	ldr.w	r3, [r1], #4
    8efa:	9107      	str	r1, [sp, #28]
    8efc:	b29b      	uxth	r3, r3
    8efe:	2101      	movs	r1, #1
    8f00:	e401      	b.n	8706 <_vfiprintf_r+0x2ee>
    8f02:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8f04:	2a00      	cmp	r2, #0
    8f06:	d164      	bne.n	8fd2 <_vfiprintf_r+0xbba>
    8f08:	4618      	mov	r0, r3
    8f0a:	2101      	movs	r1, #1
    8f0c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8f10:	e4c9      	b.n	88a6 <_vfiprintf_r+0x48e>
    8f12:	2101      	movs	r1, #1
    8f14:	4618      	mov	r0, r3
    8f16:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8f1a:	e4c4      	b.n	88a6 <_vfiprintf_r+0x48e>
    8f1c:	425b      	negs	r3, r3
    8f1e:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
    8f22:	9603      	str	r6, [sp, #12]
    8f24:	202d      	movs	r0, #45	; 0x2d
    8f26:	2101      	movs	r1, #1
    8f28:	f7ff bbee 	b.w	8708 <_vfiprintf_r+0x2f0>
    8f2c:	2b00      	cmp	r3, #0
    8f2e:	f000 8088 	beq.w	9042 <_vfiprintf_r+0xc2a>
    8f32:	ee18 1a10 	vmov	r1, s16
    8f36:	aa18      	add	r2, sp, #96	; 0x60
    8f38:	4658      	mov	r0, fp
    8f3a:	f7ff fa31 	bl	83a0 <__sprint_r.part.0>
    8f3e:	2800      	cmp	r0, #0
    8f40:	f47f ac41 	bne.w	87c6 <_vfiprintf_r+0x3ae>
    8f44:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    8f48:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8f4c:	1c41      	adds	r1, r0, #1
    8f4e:	e477      	b.n	8840 <_vfiprintf_r+0x428>
    8f50:	f898 1000 	ldrb.w	r1, [r8]
    8f54:	9307      	str	r3, [sp, #28]
    8f56:	f7ff bad2 	b.w	84fe <_vfiprintf_r+0xe6>
    8f5a:	ac44      	add	r4, sp, #272	; 0x110
    8f5c:	f7ff bb85 	b.w	866a <_vfiprintf_r+0x252>
    8f60:	f109 0908 	add.w	r9, r9, #8
    8f64:	f10c 0101 	add.w	r1, ip, #1
    8f68:	4660      	mov	r0, ip
    8f6a:	e4a0      	b.n	88ae <_vfiprintf_r+0x496>
    8f6c:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    8f70:	f040 8197 	bne.w	92a2 <_vfiprintf_r+0xe8a>
    8f74:	f851 3b04 	ldr.w	r3, [r1], #4
    8f78:	9107      	str	r1, [sp, #28]
    8f7a:	f7ff bbc0 	b.w	86fe <_vfiprintf_r+0x2e6>
    8f7e:	05b3      	lsls	r3, r6, #22
    8f80:	f100 8188 	bmi.w	9294 <_vfiprintf_r+0xe7c>
    8f84:	f852 3b04 	ldr.w	r3, [r2], #4
    8f88:	9207      	str	r2, [sp, #28]
    8f8a:	17da      	asrs	r2, r3, #31
    8f8c:	4611      	mov	r1, r2
    8f8e:	f7ff bb52 	b.w	8636 <_vfiprintf_r+0x21e>
    8f92:	9907      	ldr	r1, [sp, #28]
    8f94:	f851 3b04 	ldr.w	r3, [r1], #4
    8f98:	9107      	str	r1, [sp, #28]
    8f9a:	2101      	movs	r1, #1
    8f9c:	f7ff bbb3 	b.w	8706 <_vfiprintf_r+0x2ee>
    8fa0:	9b07      	ldr	r3, [sp, #28]
    8fa2:	9805      	ldr	r0, [sp, #20]
    8fa4:	f853 1b04 	ldr.w	r1, [r3], #4
    8fa8:	9307      	str	r3, [sp, #28]
    8faa:	17c2      	asrs	r2, r0, #31
    8fac:	e9c1 0200 	strd	r0, r2, [r1]
    8fb0:	f7ff ba7d 	b.w	84ae <_vfiprintf_r+0x96>
    8fb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8fb6:	2b00      	cmp	r3, #0
    8fb8:	f43f ab26 	beq.w	8608 <_vfiprintf_r+0x1f0>
    8fbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8fbe:	781b      	ldrb	r3, [r3, #0]
    8fc0:	2b00      	cmp	r3, #0
    8fc2:	f43f ab21 	beq.w	8608 <_vfiprintf_r+0x1f0>
    8fc6:	f898 1000 	ldrb.w	r1, [r8]
    8fca:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
    8fce:	f7ff ba96 	b.w	84fe <_vfiprintf_r+0xe6>
    8fd2:	2302      	movs	r3, #2
    8fd4:	aa11      	add	r2, sp, #68	; 0x44
    8fd6:	931c      	str	r3, [sp, #112]	; 0x70
    8fd8:	921b      	str	r2, [sp, #108]	; 0x6c
    8fda:	2001      	movs	r0, #1
    8fdc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8fe0:	e6a2      	b.n	8d28 <_vfiprintf_r+0x910>
    8fe2:	9603      	str	r6, [sp, #12]
    8fe4:	e571      	b.n	8aca <_vfiprintf_r+0x6b2>
    8fe6:	4b3b      	ldr	r3, [pc, #236]	; (90d4 <_vfiprintf_r+0xcbc>)
    8fe8:	930c      	str	r3, [sp, #48]	; 0x30
    8fea:	f016 0220 	ands.w	r2, r6, #32
    8fee:	d059      	beq.n	90a4 <_vfiprintf_r+0xc8c>
    8ff0:	9b07      	ldr	r3, [sp, #28]
    8ff2:	3307      	adds	r3, #7
    8ff4:	f023 0307 	bic.w	r3, r3, #7
    8ff8:	4618      	mov	r0, r3
    8ffa:	685a      	ldr	r2, [r3, #4]
    8ffc:	f850 3b08 	ldr.w	r3, [r0], #8
    9000:	9007      	str	r0, [sp, #28]
    9002:	07f4      	lsls	r4, r6, #31
    9004:	d509      	bpl.n	901a <_vfiprintf_r+0xc02>
    9006:	ea53 0002 	orrs.w	r0, r3, r2
    900a:	d006      	beq.n	901a <_vfiprintf_r+0xc02>
    900c:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    9010:	2130      	movs	r1, #48	; 0x30
    9012:	f046 0602 	orr.w	r6, r6, #2
    9016:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
    901a:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    901e:	9103      	str	r1, [sp, #12]
    9020:	2102      	movs	r1, #2
    9022:	f7ff bb70 	b.w	8706 <_vfiprintf_r+0x2ee>
    9026:	4b2c      	ldr	r3, [pc, #176]	; (90d8 <_vfiprintf_r+0xcc0>)
    9028:	930c      	str	r3, [sp, #48]	; 0x30
    902a:	e7de      	b.n	8fea <_vfiprintf_r+0xbd2>
    902c:	9b07      	ldr	r3, [sp, #28]
    902e:	2101      	movs	r1, #1
    9030:	f853 2b04 	ldr.w	r2, [r3], #4
    9034:	9103      	str	r1, [sp, #12]
    9036:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
    903a:	9307      	str	r3, [sp, #28]
    903c:	9104      	str	r1, [sp, #16]
    903e:	ac2b      	add	r4, sp, #172	; 0xac
    9040:	e4df      	b.n	8a02 <_vfiprintf_r+0x5ea>
    9042:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    9046:	2a00      	cmp	r2, #0
    9048:	f040 8132 	bne.w	92b0 <_vfiprintf_r+0xe98>
    904c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    904e:	2a00      	cmp	r2, #0
    9050:	f47f ae62 	bne.w	8d18 <_vfiprintf_r+0x900>
    9054:	4618      	mov	r0, r3
    9056:	2101      	movs	r1, #1
    9058:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    905c:	e427      	b.n	88ae <_vfiprintf_r+0x496>
    905e:	2100      	movs	r1, #0
    9060:	2208      	movs	r2, #8
    9062:	a816      	add	r0, sp, #88	; 0x58
    9064:	9413      	str	r4, [sp, #76]	; 0x4c
    9066:	f7fb faa5 	bl	45b4 <memset>
    906a:	1c79      	adds	r1, r7, #1
    906c:	f000 80bc 	beq.w	91e8 <_vfiprintf_r+0xdd0>
    9070:	2500      	movs	r5, #0
    9072:	9407      	str	r4, [sp, #28]
    9074:	462c      	mov	r4, r5
    9076:	e00c      	b.n	9092 <_vfiprintf_r+0xc7a>
    9078:	a92b      	add	r1, sp, #172	; 0xac
    907a:	4658      	mov	r0, fp
    907c:	f7ff f8ca 	bl	8214 <_wcrtomb_r>
    9080:	1c42      	adds	r2, r0, #1
    9082:	4420      	add	r0, r4
    9084:	f000 816b 	beq.w	935e <_vfiprintf_r+0xf46>
    9088:	42b8      	cmp	r0, r7
    908a:	dc08      	bgt.n	909e <_vfiprintf_r+0xc86>
    908c:	f000 8170 	beq.w	9370 <_vfiprintf_r+0xf58>
    9090:	4604      	mov	r4, r0
    9092:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9094:	5952      	ldr	r2, [r2, r5]
    9096:	ab16      	add	r3, sp, #88	; 0x58
    9098:	3504      	adds	r5, #4
    909a:	2a00      	cmp	r2, #0
    909c:	d1ec      	bne.n	9078 <_vfiprintf_r+0xc60>
    909e:	9404      	str	r4, [sp, #16]
    90a0:	9c07      	ldr	r4, [sp, #28]
    90a2:	e0af      	b.n	9204 <_vfiprintf_r+0xdec>
    90a4:	f016 0310 	ands.w	r3, r6, #16
    90a8:	9807      	ldr	r0, [sp, #28]
    90aa:	d10c      	bne.n	90c6 <_vfiprintf_r+0xcae>
    90ac:	f016 0440 	ands.w	r4, r6, #64	; 0x40
    90b0:	d005      	beq.n	90be <_vfiprintf_r+0xca6>
    90b2:	461a      	mov	r2, r3
    90b4:	f850 3b04 	ldr.w	r3, [r0], #4
    90b8:	9007      	str	r0, [sp, #28]
    90ba:	b29b      	uxth	r3, r3
    90bc:	e7a1      	b.n	9002 <_vfiprintf_r+0xbea>
    90be:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    90c2:	f040 80e1 	bne.w	9288 <_vfiprintf_r+0xe70>
    90c6:	f850 3b04 	ldr.w	r3, [r0], #4
    90ca:	9007      	str	r0, [sp, #28]
    90cc:	e799      	b.n	9002 <_vfiprintf_r+0xbea>
    90ce:	bf00      	nop
    90d0:	20000800 	.word	0x20000800
    90d4:	200007bc 	.word	0x200007bc
    90d8:	200007d0 	.word	0x200007d0
    90dc:	9903      	ldr	r1, [sp, #12]
    90de:	9704      	str	r7, [sp, #16]
    90e0:	ac44      	add	r4, sp, #272	; 0x110
    90e2:	469e      	mov	lr, r3
    90e4:	ee08 ba90 	vmov	s17, fp
    90e8:	f401 6680 	and.w	r6, r1, #1024	; 0x400
    90ec:	f04f 0c00 	mov.w	ip, #0
    90f0:	4623      	mov	r3, r4
    90f2:	e006      	b.n	9102 <_vfiprintf_r+0xcea>
    90f4:	f1be 0f0a 	cmp.w	lr, #10
    90f8:	f172 0200 	sbcs.w	r2, r2, #0
    90fc:	d339      	bcc.n	9172 <_vfiprintf_r+0xd5a>
    90fe:	46a6      	mov	lr, r4
    9100:	462a      	mov	r2, r5
    9102:	49a6      	ldr	r1, [pc, #664]	; (939c <_vfiprintf_r+0xf84>)
    9104:	eb1e 0002 	adds.w	r0, lr, r2
    9108:	f140 0000 	adc.w	r0, r0, #0
    910c:	460f      	mov	r7, r1
    910e:	fba1 1400 	umull	r1, r4, r1, r0
    9112:	f024 0103 	bic.w	r1, r4, #3
    9116:	eb01 0194 	add.w	r1, r1, r4, lsr #2
    911a:	1a40      	subs	r0, r0, r1
    911c:	ebbe 0100 	subs.w	r1, lr, r0
    9120:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
    9124:	f162 0400 	sbc.w	r4, r2, #0
    9128:	fb05 f501 	mul.w	r5, r5, r1
    912c:	fb07 5504 	mla	r5, r7, r4, r5
    9130:	fba1 4107 	umull	r4, r1, r1, r7
    9134:	440d      	add	r5, r1
    9136:	2705      	movs	r7, #5
    9138:	f004 0101 	and.w	r1, r4, #1
    913c:	fba1 1b07 	umull	r1, fp, r1, r7
    9140:	1809      	adds	r1, r1, r0
    9142:	0864      	lsrs	r4, r4, #1
    9144:	3130      	adds	r1, #48	; 0x30
    9146:	f803 1c01 	strb.w	r1, [r3, #-1]
    914a:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
    914e:	f10c 0c01 	add.w	ip, ip, #1
    9152:	3b01      	subs	r3, #1
    9154:	086d      	lsrs	r5, r5, #1
    9156:	2e00      	cmp	r6, #0
    9158:	d0cc      	beq.n	90f4 <_vfiprintf_r+0xcdc>
    915a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    915c:	7809      	ldrb	r1, [r1, #0]
    915e:	4561      	cmp	r1, ip
    9160:	d1c8      	bne.n	90f4 <_vfiprintf_r+0xcdc>
    9162:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    9166:	d0c5      	beq.n	90f4 <_vfiprintf_r+0xcdc>
    9168:	f1be 0f0a 	cmp.w	lr, #10
    916c:	f172 0200 	sbcs.w	r2, r2, #0
    9170:	d26c      	bcs.n	924c <_vfiprintf_r+0xe34>
    9172:	461c      	mov	r4, r3
    9174:	ab44      	add	r3, sp, #272	; 0x110
    9176:	1b1b      	subs	r3, r3, r4
    9178:	9f04      	ldr	r7, [sp, #16]
    917a:	9e03      	ldr	r6, [sp, #12]
    917c:	9304      	str	r3, [sp, #16]
    917e:	ee18 ba90 	vmov	fp, s17
    9182:	f7ff ba72 	b.w	866a <_vfiprintf_r+0x252>
    9186:	9603      	str	r6, [sp, #12]
    9188:	f7ff ba62 	b.w	8650 <_vfiprintf_r+0x238>
    918c:	4658      	mov	r0, fp
    918e:	f7fb f89b 	bl	42c8 <__sinit>
    9192:	f7ff b95b 	b.w	844c <_vfiprintf_r+0x34>
    9196:	2901      	cmp	r1, #1
    9198:	9603      	str	r6, [sp, #12]
    919a:	f47f accd 	bne.w	8b38 <_vfiprintf_r+0x720>
    919e:	f7ff ba5c 	b.w	865a <_vfiprintf_r+0x242>
    91a2:	9b07      	ldr	r3, [sp, #28]
    91a4:	9905      	ldr	r1, [sp, #20]
    91a6:	f853 2b04 	ldr.w	r2, [r3], #4
    91aa:	6011      	str	r1, [r2, #0]
    91ac:	9307      	str	r3, [sp, #28]
    91ae:	f7ff b97e 	b.w	84ae <_vfiprintf_r+0x96>
    91b2:	2f06      	cmp	r7, #6
    91b4:	463b      	mov	r3, r7
    91b6:	9a03      	ldr	r2, [sp, #12]
    91b8:	4c79      	ldr	r4, [pc, #484]	; (93a0 <_vfiprintf_r+0xf88>)
    91ba:	9207      	str	r2, [sp, #28]
    91bc:	bf28      	it	cs
    91be:	2306      	movcs	r3, #6
    91c0:	9304      	str	r3, [sp, #16]
    91c2:	9303      	str	r3, [sp, #12]
    91c4:	f7ff bb25 	b.w	8812 <_vfiprintf_r+0x3fa>
    91c8:	9b03      	ldr	r3, [sp, #12]
    91ca:	9907      	ldr	r1, [sp, #28]
    91cc:	f413 7200 	ands.w	r2, r3, #512	; 0x200
    91d0:	bf14      	ite	ne
    91d2:	f851 3b04 	ldrne.w	r3, [r1], #4
    91d6:	f851 3b04 	ldreq.w	r3, [r1], #4
    91da:	9107      	str	r1, [sp, #28]
    91dc:	bf1c      	itt	ne
    91de:	4602      	movne	r2, r0
    91e0:	b2db      	uxtbne	r3, r3
    91e2:	2101      	movs	r1, #1
    91e4:	f7ff ba8f 	b.w	8706 <_vfiprintf_r+0x2ee>
    91e8:	ab16      	add	r3, sp, #88	; 0x58
    91ea:	9300      	str	r3, [sp, #0]
    91ec:	2300      	movs	r3, #0
    91ee:	4619      	mov	r1, r3
    91f0:	aa13      	add	r2, sp, #76	; 0x4c
    91f2:	4658      	mov	r0, fp
    91f4:	f7ff f834 	bl	8260 <_wcsrtombs_r>
    91f8:	4603      	mov	r3, r0
    91fa:	3301      	adds	r3, #1
    91fc:	9004      	str	r0, [sp, #16]
    91fe:	f000 80ae 	beq.w	935e <_vfiprintf_r+0xf46>
    9202:	9413      	str	r4, [sp, #76]	; 0x4c
    9204:	9b04      	ldr	r3, [sp, #16]
    9206:	2b00      	cmp	r3, #0
    9208:	d030      	beq.n	926c <_vfiprintf_r+0xe54>
    920a:	2b63      	cmp	r3, #99	; 0x63
    920c:	dc63      	bgt.n	92d6 <_vfiprintf_r+0xebe>
    920e:	2300      	movs	r3, #0
    9210:	9308      	str	r3, [sp, #32]
    9212:	ac2b      	add	r4, sp, #172	; 0xac
    9214:	2208      	movs	r2, #8
    9216:	2100      	movs	r1, #0
    9218:	a816      	add	r0, sp, #88	; 0x58
    921a:	f7fb f9cb 	bl	45b4 <memset>
    921e:	9d04      	ldr	r5, [sp, #16]
    9220:	ab16      	add	r3, sp, #88	; 0x58
    9222:	9300      	str	r3, [sp, #0]
    9224:	aa13      	add	r2, sp, #76	; 0x4c
    9226:	462b      	mov	r3, r5
    9228:	4621      	mov	r1, r4
    922a:	4658      	mov	r0, fp
    922c:	f7ff f818 	bl	8260 <_wcsrtombs_r>
    9230:	4285      	cmp	r5, r0
    9232:	f040 80ab 	bne.w	938c <_vfiprintf_r+0xf74>
    9236:	9b03      	ldr	r3, [sp, #12]
    9238:	9a04      	ldr	r2, [sp, #16]
    923a:	9307      	str	r3, [sp, #28]
    923c:	2300      	movs	r3, #0
    923e:	54a3      	strb	r3, [r4, r2]
    9240:	461f      	mov	r7, r3
    9242:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    9246:	9303      	str	r3, [sp, #12]
    9248:	f7ff ba16 	b.w	8678 <_vfiprintf_r+0x260>
    924c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    924e:	990d      	ldr	r1, [sp, #52]	; 0x34
    9250:	1a9b      	subs	r3, r3, r2
    9252:	4618      	mov	r0, r3
    9254:	9308      	str	r3, [sp, #32]
    9256:	f7fb f9ff 	bl	4658 <strncpy>
    925a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    925c:	9b08      	ldr	r3, [sp, #32]
    925e:	784a      	ldrb	r2, [r1, #1]
    9260:	b10a      	cbz	r2, 9266 <_vfiprintf_r+0xe4e>
    9262:	3101      	adds	r1, #1
    9264:	910b      	str	r1, [sp, #44]	; 0x2c
    9266:	f04f 0c00 	mov.w	ip, #0
    926a:	e748      	b.n	90fe <_vfiprintf_r+0xce6>
    926c:	9b03      	ldr	r3, [sp, #12]
    926e:	9307      	str	r3, [sp, #28]
    9270:	9b04      	ldr	r3, [sp, #16]
    9272:	9303      	str	r3, [sp, #12]
    9274:	461f      	mov	r7, r3
    9276:	9308      	str	r3, [sp, #32]
    9278:	f7ff b9fe 	b.w	8678 <_vfiprintf_r+0x260>
    927c:	2101      	movs	r1, #1
    927e:	4618      	mov	r0, r3
    9280:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9284:	f7ff bb13 	b.w	88ae <_vfiprintf_r+0x496>
    9288:	f850 3b04 	ldr.w	r3, [r0], #4
    928c:	9007      	str	r0, [sp, #28]
    928e:	4622      	mov	r2, r4
    9290:	b2db      	uxtb	r3, r3
    9292:	e6b6      	b.n	9002 <_vfiprintf_r+0xbea>
    9294:	f912 3b04 	ldrsb.w	r3, [r2], #4
    9298:	9207      	str	r2, [sp, #28]
    929a:	17da      	asrs	r2, r3, #31
    929c:	4611      	mov	r1, r2
    929e:	f7ff b9ca 	b.w	8636 <_vfiprintf_r+0x21e>
    92a2:	f851 3b04 	ldr.w	r3, [r1], #4
    92a6:	9107      	str	r1, [sp, #28]
    92a8:	4602      	mov	r2, r0
    92aa:	b2db      	uxtb	r3, r3
    92ac:	f7ff ba27 	b.w	86fe <_vfiprintf_r+0x2e6>
    92b0:	2301      	movs	r3, #1
    92b2:	931c      	str	r3, [sp, #112]	; 0x70
    92b4:	2101      	movs	r1, #1
    92b6:	f10d 0343 	add.w	r3, sp, #67	; 0x43
    92ba:	931b      	str	r3, [sp, #108]	; 0x6c
    92bc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    92c0:	460b      	mov	r3, r1
    92c2:	f7ff bacd 	b.w	8860 <_vfiprintf_r+0x448>
    92c6:	9b07      	ldr	r3, [sp, #28]
    92c8:	9905      	ldr	r1, [sp, #20]
    92ca:	f853 2b04 	ldr.w	r2, [r3], #4
    92ce:	9307      	str	r3, [sp, #28]
    92d0:	8011      	strh	r1, [r2, #0]
    92d2:	f7ff b8ec 	b.w	84ae <_vfiprintf_r+0x96>
    92d6:	1c59      	adds	r1, r3, #1
    92d8:	4658      	mov	r0, fp
    92da:	f7fa faa5 	bl	3828 <_malloc_r>
    92de:	4604      	mov	r4, r0
    92e0:	2800      	cmp	r0, #0
    92e2:	d03c      	beq.n	935e <_vfiprintf_r+0xf46>
    92e4:	9008      	str	r0, [sp, #32]
    92e6:	e795      	b.n	9214 <_vfiprintf_r+0xdfc>
    92e8:	6d88      	ldr	r0, [r1, #88]	; 0x58
    92ea:	f7fb fa83 	bl	47f4 <__retarget_lock_release_recursive>
    92ee:	f7ff b9e9 	b.w	86c4 <_vfiprintf_r+0x2ac>
    92f2:	9b03      	ldr	r3, [sp, #12]
    92f4:	9307      	str	r3, [sp, #28]
    92f6:	e9cd 7703 	strd	r7, r7, [sp, #12]
    92fa:	9f08      	ldr	r7, [sp, #32]
    92fc:	f7ff b9bc 	b.w	8678 <_vfiprintf_r+0x260>
    9300:	9819      	ldr	r0, [sp, #100]	; 0x64
    9302:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9304:	3001      	adds	r0, #1
    9306:	e545      	b.n	8d94 <_vfiprintf_r+0x97c>
    9308:	9b03      	ldr	r3, [sp, #12]
    930a:	9307      	str	r3, [sp, #28]
    930c:	4620      	mov	r0, r4
    930e:	f7fb fad7 	bl	48c0 <strlen>
    9312:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
    9316:	462f      	mov	r7, r5
    9318:	9004      	str	r0, [sp, #16]
    931a:	9303      	str	r3, [sp, #12]
    931c:	9508      	str	r5, [sp, #32]
    931e:	f7ff b9ab 	b.w	8678 <_vfiprintf_r+0x260>
    9322:	ee18 1a10 	vmov	r1, s16
    9326:	aa18      	add	r2, sp, #96	; 0x60
    9328:	4658      	mov	r0, fp
    932a:	f7ff f839 	bl	83a0 <__sprint_r.part.0>
    932e:	2800      	cmp	r0, #0
    9330:	f43f aa36 	beq.w	87a0 <_vfiprintf_r+0x388>
    9334:	f7ff ba4d 	b.w	87d2 <_vfiprintf_r+0x3ba>
    9338:	9819      	ldr	r0, [sp, #100]	; 0x64
    933a:	3001      	adds	r0, #1
    933c:	e57a      	b.n	8e34 <_vfiprintf_r+0xa1c>
    933e:	468c      	mov	ip, r1
    9340:	e46e      	b.n	8c20 <_vfiprintf_r+0x808>
    9342:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    9344:	07d9      	lsls	r1, r3, #31
    9346:	d405      	bmi.n	9354 <_vfiprintf_r+0xf3c>
    9348:	89ab      	ldrh	r3, [r5, #12]
    934a:	059a      	lsls	r2, r3, #22
    934c:	d402      	bmi.n	9354 <_vfiprintf_r+0xf3c>
    934e:	6da8      	ldr	r0, [r5, #88]	; 0x58
    9350:	f7fb fa50 	bl	47f4 <__retarget_lock_release_recursive>
    9354:	f04f 33ff 	mov.w	r3, #4294967295
    9358:	9305      	str	r3, [sp, #20]
    935a:	f7ff ba49 	b.w	87f0 <_vfiprintf_r+0x3d8>
    935e:	ee18 2a10 	vmov	r2, s16
    9362:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    9366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    936a:	8193      	strh	r3, [r2, #12]
    936c:	f7ff ba35 	b.w	87da <_vfiprintf_r+0x3c2>
    9370:	9c07      	ldr	r4, [sp, #28]
    9372:	9704      	str	r7, [sp, #16]
    9374:	e746      	b.n	9204 <_vfiprintf_r+0xdec>
    9376:	9b07      	ldr	r3, [sp, #28]
    9378:	f898 1001 	ldrb.w	r1, [r8, #1]
    937c:	f853 7b04 	ldr.w	r7, [r3], #4
    9380:	9307      	str	r3, [sp, #28]
    9382:	4690      	mov	r8, r2
    9384:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
    9388:	f7ff b8b9 	b.w	84fe <_vfiprintf_r+0xe6>
    938c:	ee18 2a10 	vmov	r2, s16
    9390:	8993      	ldrh	r3, [r2, #12]
    9392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9396:	8193      	strh	r3, [r2, #12]
    9398:	f7ff ba15 	b.w	87c6 <_vfiprintf_r+0x3ae>
    939c:	cccccccd 	.word	0xcccccccd
    93a0:	200007e4 	.word	0x200007e4

000093a4 <__sbprintf>:
    93a4:	b570      	push	{r4, r5, r6, lr}
    93a6:	460c      	mov	r4, r1
    93a8:	8989      	ldrh	r1, [r1, #12]
    93aa:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
    93ae:	f021 0102 	bic.w	r1, r1, #2
    93b2:	f8ad 1014 	strh.w	r1, [sp, #20]
    93b6:	6e61      	ldr	r1, [r4, #100]	; 0x64
    93b8:	911b      	str	r1, [sp, #108]	; 0x6c
    93ba:	89e1      	ldrh	r1, [r4, #14]
    93bc:	f8ad 1016 	strh.w	r1, [sp, #22]
    93c0:	69e1      	ldr	r1, [r4, #28]
    93c2:	9109      	str	r1, [sp, #36]	; 0x24
    93c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    93c6:	910b      	str	r1, [sp, #44]	; 0x2c
    93c8:	a91c      	add	r1, sp, #112	; 0x70
    93ca:	9102      	str	r1, [sp, #8]
    93cc:	9106      	str	r1, [sp, #24]
    93ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
    93d2:	4606      	mov	r6, r0
    93d4:	9104      	str	r1, [sp, #16]
    93d6:	9107      	str	r1, [sp, #28]
    93d8:	a818      	add	r0, sp, #96	; 0x60
    93da:	2100      	movs	r1, #0
    93dc:	e9cd 3200 	strd	r3, r2, [sp]
    93e0:	9108      	str	r1, [sp, #32]
    93e2:	f7fb fa01 	bl	47e8 <__retarget_lock_init_recursive>
    93e6:	e9dd 3200 	ldrd	r3, r2, [sp]
    93ea:	a902      	add	r1, sp, #8
    93ec:	4630      	mov	r0, r6
    93ee:	f7ff f813 	bl	8418 <_vfiprintf_r>
    93f2:	1e05      	subs	r5, r0, #0
    93f4:	db07      	blt.n	9406 <__sbprintf+0x62>
    93f6:	a902      	add	r1, sp, #8
    93f8:	4630      	mov	r0, r6
    93fa:	f7fd fee7 	bl	71cc <_fflush_r>
    93fe:	2800      	cmp	r0, #0
    9400:	bf18      	it	ne
    9402:	f04f 35ff 	movne.w	r5, #4294967295
    9406:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    940a:	065b      	lsls	r3, r3, #25
    940c:	d503      	bpl.n	9416 <__sbprintf+0x72>
    940e:	89a3      	ldrh	r3, [r4, #12]
    9410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9414:	81a3      	strh	r3, [r4, #12]
    9416:	9818      	ldr	r0, [sp, #96]	; 0x60
    9418:	f7fb f9e8 	bl	47ec <__retarget_lock_close_recursive>
    941c:	4628      	mov	r0, r5
    941e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
    9422:	bd70      	pop	{r4, r5, r6, pc}

00009424 <__sfvwrite_r>:
    9424:	6893      	ldr	r3, [r2, #8]
    9426:	2b00      	cmp	r3, #0
    9428:	f000 8085 	beq.w	9536 <__sfvwrite_r+0x112>
    942c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9430:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    9434:	460c      	mov	r4, r1
    9436:	0719      	lsls	r1, r3, #28
    9438:	4680      	mov	r8, r0
    943a:	b083      	sub	sp, #12
    943c:	4617      	mov	r7, r2
    943e:	b298      	uxth	r0, r3
    9440:	d525      	bpl.n	948e <__sfvwrite_r+0x6a>
    9442:	6923      	ldr	r3, [r4, #16]
    9444:	b31b      	cbz	r3, 948e <__sfvwrite_r+0x6a>
    9446:	f010 0302 	ands.w	r3, r0, #2
    944a:	683d      	ldr	r5, [r7, #0]
    944c:	d02d      	beq.n	94aa <__sfvwrite_r+0x86>
    944e:	f04f 0a00 	mov.w	sl, #0
    9452:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 9714 <__sfvwrite_r+0x2f0>
    9456:	4656      	mov	r6, sl
    9458:	46b9      	mov	r9, r7
    945a:	455e      	cmp	r6, fp
    945c:	4633      	mov	r3, r6
    945e:	4652      	mov	r2, sl
    9460:	bf28      	it	cs
    9462:	465b      	movcs	r3, fp
    9464:	4640      	mov	r0, r8
    9466:	2e00      	cmp	r6, #0
    9468:	d052      	beq.n	9510 <__sfvwrite_r+0xec>
    946a:	69e1      	ldr	r1, [r4, #28]
    946c:	6a67      	ldr	r7, [r4, #36]	; 0x24
    946e:	47b8      	blx	r7
    9470:	2800      	cmp	r0, #0
    9472:	dd56      	ble.n	9522 <__sfvwrite_r+0xfe>
    9474:	f8d9 3008 	ldr.w	r3, [r9, #8]
    9478:	1a1b      	subs	r3, r3, r0
    947a:	4482      	add	sl, r0
    947c:	1a36      	subs	r6, r6, r0
    947e:	f8c9 3008 	str.w	r3, [r9, #8]
    9482:	2b00      	cmp	r3, #0
    9484:	d1e9      	bne.n	945a <__sfvwrite_r+0x36>
    9486:	2000      	movs	r0, #0
    9488:	b003      	add	sp, #12
    948a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    948e:	4621      	mov	r1, r4
    9490:	4640      	mov	r0, r8
    9492:	f000 f941 	bl	9718 <__swsetup_r>
    9496:	2800      	cmp	r0, #0
    9498:	f040 8138 	bne.w	970c <__sfvwrite_r+0x2e8>
    949c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    94a0:	683d      	ldr	r5, [r7, #0]
    94a2:	b298      	uxth	r0, r3
    94a4:	f010 0302 	ands.w	r3, r0, #2
    94a8:	d1d1      	bne.n	944e <__sfvwrite_r+0x2a>
    94aa:	f010 0901 	ands.w	r9, r0, #1
    94ae:	d144      	bne.n	953a <__sfvwrite_r+0x116>
    94b0:	464e      	mov	r6, r9
    94b2:	9700      	str	r7, [sp, #0]
    94b4:	b346      	cbz	r6, 9508 <__sfvwrite_r+0xe4>
    94b6:	0582      	lsls	r2, r0, #22
    94b8:	f8d4 b008 	ldr.w	fp, [r4, #8]
    94bc:	f140 8085 	bpl.w	95ca <__sfvwrite_r+0x1a6>
    94c0:	45b3      	cmp	fp, r6
    94c2:	465a      	mov	r2, fp
    94c4:	f200 80b4 	bhi.w	9630 <__sfvwrite_r+0x20c>
    94c8:	f410 6f90 	tst.w	r0, #1152	; 0x480
    94cc:	f040 80c1 	bne.w	9652 <__sfvwrite_r+0x22e>
    94d0:	6820      	ldr	r0, [r4, #0]
    94d2:	9201      	str	r2, [sp, #4]
    94d4:	4649      	mov	r1, r9
    94d6:	f7fa fff1 	bl	44bc <memmove>
    94da:	68a3      	ldr	r3, [r4, #8]
    94dc:	9a01      	ldr	r2, [sp, #4]
    94de:	eba3 010b 	sub.w	r1, r3, fp
    94e2:	6823      	ldr	r3, [r4, #0]
    94e4:	60a1      	str	r1, [r4, #8]
    94e6:	4413      	add	r3, r2
    94e8:	46b2      	mov	sl, r6
    94ea:	6023      	str	r3, [r4, #0]
    94ec:	2600      	movs	r6, #0
    94ee:	9a00      	ldr	r2, [sp, #0]
    94f0:	6893      	ldr	r3, [r2, #8]
    94f2:	eba3 030a 	sub.w	r3, r3, sl
    94f6:	44d1      	add	r9, sl
    94f8:	6093      	str	r3, [r2, #8]
    94fa:	2b00      	cmp	r3, #0
    94fc:	d0c3      	beq.n	9486 <__sfvwrite_r+0x62>
    94fe:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    9502:	b280      	uxth	r0, r0
    9504:	2e00      	cmp	r6, #0
    9506:	d1d6      	bne.n	94b6 <__sfvwrite_r+0x92>
    9508:	e9d5 9600 	ldrd	r9, r6, [r5]
    950c:	3508      	adds	r5, #8
    950e:	e7d1      	b.n	94b4 <__sfvwrite_r+0x90>
    9510:	e9d5 a600 	ldrd	sl, r6, [r5]
    9514:	3508      	adds	r5, #8
    9516:	e7a0      	b.n	945a <__sfvwrite_r+0x36>
    9518:	4621      	mov	r1, r4
    951a:	4640      	mov	r0, r8
    951c:	f7fd fe56 	bl	71cc <_fflush_r>
    9520:	b388      	cbz	r0, 9586 <__sfvwrite_r+0x162>
    9522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    952a:	f04f 30ff 	mov.w	r0, #4294967295
    952e:	81a3      	strh	r3, [r4, #12]
    9530:	b003      	add	sp, #12
    9532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9536:	2000      	movs	r0, #0
    9538:	4770      	bx	lr
    953a:	461e      	mov	r6, r3
    953c:	46ba      	mov	sl, r7
    953e:	4699      	mov	r9, r3
    9540:	4618      	mov	r0, r3
    9542:	9500      	str	r5, [sp, #0]
    9544:	461f      	mov	r7, r3
    9546:	b366      	cbz	r6, 95a2 <__sfvwrite_r+0x17e>
    9548:	2800      	cmp	r0, #0
    954a:	d032      	beq.n	95b2 <__sfvwrite_r+0x18e>
    954c:	464a      	mov	r2, r9
    954e:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    9552:	6820      	ldr	r0, [r4, #0]
    9554:	68a5      	ldr	r5, [r4, #8]
    9556:	42b2      	cmp	r2, r6
    9558:	bf28      	it	cs
    955a:	4632      	movcs	r2, r6
    955c:	4288      	cmp	r0, r1
    955e:	d904      	bls.n	956a <__sfvwrite_r+0x146>
    9560:	eb05 0b03 	add.w	fp, r5, r3
    9564:	455a      	cmp	r2, fp
    9566:	f300 80a7 	bgt.w	96b8 <__sfvwrite_r+0x294>
    956a:	4293      	cmp	r3, r2
    956c:	dc64      	bgt.n	9638 <__sfvwrite_r+0x214>
    956e:	69e1      	ldr	r1, [r4, #28]
    9570:	6a65      	ldr	r5, [r4, #36]	; 0x24
    9572:	463a      	mov	r2, r7
    9574:	4640      	mov	r0, r8
    9576:	47a8      	blx	r5
    9578:	f1b0 0b00 	subs.w	fp, r0, #0
    957c:	ddd1      	ble.n	9522 <__sfvwrite_r+0xfe>
    957e:	ebb9 090b 	subs.w	r9, r9, fp
    9582:	d0c9      	beq.n	9518 <__sfvwrite_r+0xf4>
    9584:	2001      	movs	r0, #1
    9586:	f8da 3008 	ldr.w	r3, [sl, #8]
    958a:	eba3 030b 	sub.w	r3, r3, fp
    958e:	445f      	add	r7, fp
    9590:	eba6 060b 	sub.w	r6, r6, fp
    9594:	f8ca 3008 	str.w	r3, [sl, #8]
    9598:	2b00      	cmp	r3, #0
    959a:	f43f af74 	beq.w	9486 <__sfvwrite_r+0x62>
    959e:	2e00      	cmp	r6, #0
    95a0:	d1d2      	bne.n	9548 <__sfvwrite_r+0x124>
    95a2:	9a00      	ldr	r2, [sp, #0]
    95a4:	6856      	ldr	r6, [r2, #4]
    95a6:	4613      	mov	r3, r2
    95a8:	3208      	adds	r2, #8
    95aa:	9200      	str	r2, [sp, #0]
    95ac:	2e00      	cmp	r6, #0
    95ae:	d0f8      	beq.n	95a2 <__sfvwrite_r+0x17e>
    95b0:	681f      	ldr	r7, [r3, #0]
    95b2:	4632      	mov	r2, r6
    95b4:	210a      	movs	r1, #10
    95b6:	4638      	mov	r0, r7
    95b8:	f7fd fe3a 	bl	7230 <memchr>
    95bc:	2800      	cmp	r0, #0
    95be:	f000 809c 	beq.w	96fa <__sfvwrite_r+0x2d6>
    95c2:	3001      	adds	r0, #1
    95c4:	eba0 0907 	sub.w	r9, r0, r7
    95c8:	e7c0      	b.n	954c <__sfvwrite_r+0x128>
    95ca:	6820      	ldr	r0, [r4, #0]
    95cc:	6923      	ldr	r3, [r4, #16]
    95ce:	4298      	cmp	r0, r3
    95d0:	d816      	bhi.n	9600 <__sfvwrite_r+0x1dc>
    95d2:	6962      	ldr	r2, [r4, #20]
    95d4:	42b2      	cmp	r2, r6
    95d6:	d813      	bhi.n	9600 <__sfvwrite_r+0x1dc>
    95d8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    95dc:	42b3      	cmp	r3, r6
    95de:	bf28      	it	cs
    95e0:	4633      	movcs	r3, r6
    95e2:	69e1      	ldr	r1, [r4, #28]
    95e4:	fb93 f3f2 	sdiv	r3, r3, r2
    95e8:	6a67      	ldr	r7, [r4, #36]	; 0x24
    95ea:	fb02 f303 	mul.w	r3, r2, r3
    95ee:	4640      	mov	r0, r8
    95f0:	464a      	mov	r2, r9
    95f2:	47b8      	blx	r7
    95f4:	f1b0 0a00 	subs.w	sl, r0, #0
    95f8:	dd93      	ble.n	9522 <__sfvwrite_r+0xfe>
    95fa:	eba6 060a 	sub.w	r6, r6, sl
    95fe:	e776      	b.n	94ee <__sfvwrite_r+0xca>
    9600:	45b3      	cmp	fp, r6
    9602:	46da      	mov	sl, fp
    9604:	bf28      	it	cs
    9606:	46b2      	movcs	sl, r6
    9608:	4652      	mov	r2, sl
    960a:	4649      	mov	r1, r9
    960c:	f7fa ff56 	bl	44bc <memmove>
    9610:	68a3      	ldr	r3, [r4, #8]
    9612:	6822      	ldr	r2, [r4, #0]
    9614:	eba3 030a 	sub.w	r3, r3, sl
    9618:	4452      	add	r2, sl
    961a:	60a3      	str	r3, [r4, #8]
    961c:	6022      	str	r2, [r4, #0]
    961e:	2b00      	cmp	r3, #0
    9620:	d1eb      	bne.n	95fa <__sfvwrite_r+0x1d6>
    9622:	4621      	mov	r1, r4
    9624:	4640      	mov	r0, r8
    9626:	f7fd fdd1 	bl	71cc <_fflush_r>
    962a:	2800      	cmp	r0, #0
    962c:	d0e5      	beq.n	95fa <__sfvwrite_r+0x1d6>
    962e:	e778      	b.n	9522 <__sfvwrite_r+0xfe>
    9630:	6820      	ldr	r0, [r4, #0]
    9632:	46b3      	mov	fp, r6
    9634:	4632      	mov	r2, r6
    9636:	e74c      	b.n	94d2 <__sfvwrite_r+0xae>
    9638:	4639      	mov	r1, r7
    963a:	9201      	str	r2, [sp, #4]
    963c:	f7fa ff3e 	bl	44bc <memmove>
    9640:	9a01      	ldr	r2, [sp, #4]
    9642:	68a3      	ldr	r3, [r4, #8]
    9644:	1a9b      	subs	r3, r3, r2
    9646:	60a3      	str	r3, [r4, #8]
    9648:	6823      	ldr	r3, [r4, #0]
    964a:	4413      	add	r3, r2
    964c:	6023      	str	r3, [r4, #0]
    964e:	4693      	mov	fp, r2
    9650:	e795      	b.n	957e <__sfvwrite_r+0x15a>
    9652:	6823      	ldr	r3, [r4, #0]
    9654:	6921      	ldr	r1, [r4, #16]
    9656:	eba3 0b01 	sub.w	fp, r3, r1
    965a:	6963      	ldr	r3, [r4, #20]
    965c:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
    9660:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
    9664:	f10b 0301 	add.w	r3, fp, #1
    9668:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    966c:	4433      	add	r3, r6
    966e:	4553      	cmp	r3, sl
    9670:	4652      	mov	r2, sl
    9672:	bf84      	itt	hi
    9674:	469a      	movhi	sl, r3
    9676:	4652      	movhi	r2, sl
    9678:	0543      	lsls	r3, r0, #21
    967a:	d52c      	bpl.n	96d6 <__sfvwrite_r+0x2b2>
    967c:	4611      	mov	r1, r2
    967e:	4640      	mov	r0, r8
    9680:	f7fa f8d2 	bl	3828 <_malloc_r>
    9684:	2800      	cmp	r0, #0
    9686:	d03b      	beq.n	9700 <__sfvwrite_r+0x2dc>
    9688:	465a      	mov	r2, fp
    968a:	6921      	ldr	r1, [r4, #16]
    968c:	9001      	str	r0, [sp, #4]
    968e:	f7f8 fc2d 	bl	1eec <memcpy>
    9692:	89a2      	ldrh	r2, [r4, #12]
    9694:	9b01      	ldr	r3, [sp, #4]
    9696:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    969a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    969e:	81a2      	strh	r2, [r4, #12]
    96a0:	eb03 000b 	add.w	r0, r3, fp
    96a4:	6123      	str	r3, [r4, #16]
    96a6:	ebaa 030b 	sub.w	r3, sl, fp
    96aa:	f8c4 a014 	str.w	sl, [r4, #20]
    96ae:	60a3      	str	r3, [r4, #8]
    96b0:	6020      	str	r0, [r4, #0]
    96b2:	46b3      	mov	fp, r6
    96b4:	4632      	mov	r2, r6
    96b6:	e70c      	b.n	94d2 <__sfvwrite_r+0xae>
    96b8:	4639      	mov	r1, r7
    96ba:	465a      	mov	r2, fp
    96bc:	f7fa fefe 	bl	44bc <memmove>
    96c0:	6823      	ldr	r3, [r4, #0]
    96c2:	445b      	add	r3, fp
    96c4:	6023      	str	r3, [r4, #0]
    96c6:	4621      	mov	r1, r4
    96c8:	4640      	mov	r0, r8
    96ca:	f7fd fd7f 	bl	71cc <_fflush_r>
    96ce:	2800      	cmp	r0, #0
    96d0:	f43f af55 	beq.w	957e <__sfvwrite_r+0x15a>
    96d4:	e725      	b.n	9522 <__sfvwrite_r+0xfe>
    96d6:	4640      	mov	r0, r8
    96d8:	f7fa fb6e 	bl	3db8 <_realloc_r>
    96dc:	4603      	mov	r3, r0
    96de:	2800      	cmp	r0, #0
    96e0:	d1de      	bne.n	96a0 <__sfvwrite_r+0x27c>
    96e2:	6921      	ldr	r1, [r4, #16]
    96e4:	4640      	mov	r0, r8
    96e6:	f7fb f9ed 	bl	4ac4 <_free_r>
    96ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    96ee:	220c      	movs	r2, #12
    96f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    96f4:	f8c8 2000 	str.w	r2, [r8]
    96f8:	e715      	b.n	9526 <__sfvwrite_r+0x102>
    96fa:	1c72      	adds	r2, r6, #1
    96fc:	4691      	mov	r9, r2
    96fe:	e726      	b.n	954e <__sfvwrite_r+0x12a>
    9700:	220c      	movs	r2, #12
    9702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9706:	f8c8 2000 	str.w	r2, [r8]
    970a:	e70c      	b.n	9526 <__sfvwrite_r+0x102>
    970c:	f04f 30ff 	mov.w	r0, #4294967295
    9710:	e6ba      	b.n	9488 <__sfvwrite_r+0x64>
    9712:	bf00      	nop
    9714:	7ffffc00 	.word	0x7ffffc00

00009718 <__swsetup_r>:
    9718:	b538      	push	{r3, r4, r5, lr}
    971a:	4b31      	ldr	r3, [pc, #196]	; (97e0 <__swsetup_r+0xc8>)
    971c:	681b      	ldr	r3, [r3, #0]
    971e:	4605      	mov	r5, r0
    9720:	460c      	mov	r4, r1
    9722:	b113      	cbz	r3, 972a <__swsetup_r+0x12>
    9724:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    9726:	2a00      	cmp	r2, #0
    9728:	d04e      	beq.n	97c8 <__swsetup_r+0xb0>
    972a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    972e:	0718      	lsls	r0, r3, #28
    9730:	b29a      	uxth	r2, r3
    9732:	d51c      	bpl.n	976e <__swsetup_r+0x56>
    9734:	6921      	ldr	r1, [r4, #16]
    9736:	b329      	cbz	r1, 9784 <__swsetup_r+0x6c>
    9738:	f012 0001 	ands.w	r0, r2, #1
    973c:	d007      	beq.n	974e <__swsetup_r+0x36>
    973e:	2000      	movs	r0, #0
    9740:	60a0      	str	r0, [r4, #8]
    9742:	6960      	ldr	r0, [r4, #20]
    9744:	4240      	negs	r0, r0
    9746:	61a0      	str	r0, [r4, #24]
    9748:	b139      	cbz	r1, 975a <__swsetup_r+0x42>
    974a:	2000      	movs	r0, #0
    974c:	bd38      	pop	{r3, r4, r5, pc}
    974e:	0795      	lsls	r5, r2, #30
    9750:	bf58      	it	pl
    9752:	6960      	ldrpl	r0, [r4, #20]
    9754:	60a0      	str	r0, [r4, #8]
    9756:	2900      	cmp	r1, #0
    9758:	d1f7      	bne.n	974a <__swsetup_r+0x32>
    975a:	0612      	lsls	r2, r2, #24
    975c:	bf58      	it	pl
    975e:	4608      	movpl	r0, r1
    9760:	d5f4      	bpl.n	974c <__swsetup_r+0x34>
    9762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9766:	81a3      	strh	r3, [r4, #12]
    9768:	f04f 30ff 	mov.w	r0, #4294967295
    976c:	bd38      	pop	{r3, r4, r5, pc}
    976e:	06d1      	lsls	r1, r2, #27
    9770:	d52e      	bpl.n	97d0 <__swsetup_r+0xb8>
    9772:	0752      	lsls	r2, r2, #29
    9774:	d414      	bmi.n	97a0 <__swsetup_r+0x88>
    9776:	6921      	ldr	r1, [r4, #16]
    9778:	f043 0308 	orr.w	r3, r3, #8
    977c:	81a3      	strh	r3, [r4, #12]
    977e:	b29a      	uxth	r2, r3
    9780:	2900      	cmp	r1, #0
    9782:	d1d9      	bne.n	9738 <__swsetup_r+0x20>
    9784:	f402 7020 	and.w	r0, r2, #640	; 0x280
    9788:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    978c:	d0d4      	beq.n	9738 <__swsetup_r+0x20>
    978e:	4621      	mov	r1, r4
    9790:	4628      	mov	r0, r5
    9792:	f000 f947 	bl	9a24 <__smakebuf_r>
    9796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    979a:	6921      	ldr	r1, [r4, #16]
    979c:	b29a      	uxth	r2, r3
    979e:	e7cb      	b.n	9738 <__swsetup_r+0x20>
    97a0:	6b21      	ldr	r1, [r4, #48]	; 0x30
    97a2:	b151      	cbz	r1, 97ba <__swsetup_r+0xa2>
    97a4:	f104 0240 	add.w	r2, r4, #64	; 0x40
    97a8:	4291      	cmp	r1, r2
    97aa:	d004      	beq.n	97b6 <__swsetup_r+0x9e>
    97ac:	4628      	mov	r0, r5
    97ae:	f7fb f989 	bl	4ac4 <_free_r>
    97b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    97b6:	2200      	movs	r2, #0
    97b8:	6322      	str	r2, [r4, #48]	; 0x30
    97ba:	6921      	ldr	r1, [r4, #16]
    97bc:	2200      	movs	r2, #0
    97be:	e9c4 1200 	strd	r1, r2, [r4]
    97c2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    97c6:	e7d7      	b.n	9778 <__swsetup_r+0x60>
    97c8:	4618      	mov	r0, r3
    97ca:	f7fa fd7d 	bl	42c8 <__sinit>
    97ce:	e7ac      	b.n	972a <__swsetup_r+0x12>
    97d0:	2209      	movs	r2, #9
    97d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    97d6:	602a      	str	r2, [r5, #0]
    97d8:	f04f 30ff 	mov.w	r0, #4294967295
    97dc:	81a3      	strh	r3, [r4, #12]
    97de:	bd38      	pop	{r3, r4, r5, pc}
    97e0:	200016cc 	.word	0x200016cc

000097e4 <__fputwc>:
    97e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    97e8:	b082      	sub	sp, #8
    97ea:	4682      	mov	sl, r0
    97ec:	4688      	mov	r8, r1
    97ee:	4614      	mov	r4, r2
    97f0:	f7fa ff64 	bl	46bc <__locale_mb_cur_max>
    97f4:	2801      	cmp	r0, #1
    97f6:	d103      	bne.n	9800 <__fputwc+0x1c>
    97f8:	f108 33ff 	add.w	r3, r8, #4294967295
    97fc:	2bfe      	cmp	r3, #254	; 0xfe
    97fe:	d936      	bls.n	986e <__fputwc+0x8a>
    9800:	f10d 0904 	add.w	r9, sp, #4
    9804:	4642      	mov	r2, r8
    9806:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    980a:	4649      	mov	r1, r9
    980c:	4650      	mov	r0, sl
    980e:	f7fe fd01 	bl	8214 <_wcrtomb_r>
    9812:	1c42      	adds	r2, r0, #1
    9814:	4606      	mov	r6, r0
    9816:	d032      	beq.n	987e <__fputwc+0x9a>
    9818:	b320      	cbz	r0, 9864 <__fputwc+0x80>
    981a:	f89d c004 	ldrb.w	ip, [sp, #4]
    981e:	2500      	movs	r5, #0
    9820:	e009      	b.n	9836 <__fputwc+0x52>
    9822:	6823      	ldr	r3, [r4, #0]
    9824:	1c5a      	adds	r2, r3, #1
    9826:	6022      	str	r2, [r4, #0]
    9828:	f883 c000 	strb.w	ip, [r3]
    982c:	3501      	adds	r5, #1
    982e:	42b5      	cmp	r5, r6
    9830:	d218      	bcs.n	9864 <__fputwc+0x80>
    9832:	f819 cf01 	ldrb.w	ip, [r9, #1]!
    9836:	68a3      	ldr	r3, [r4, #8]
    9838:	3b01      	subs	r3, #1
    983a:	2b00      	cmp	r3, #0
    983c:	60a3      	str	r3, [r4, #8]
    983e:	daf0      	bge.n	9822 <__fputwc+0x3e>
    9840:	69a7      	ldr	r7, [r4, #24]
    9842:	42bb      	cmp	r3, r7
    9844:	4661      	mov	r1, ip
    9846:	4622      	mov	r2, r4
    9848:	4650      	mov	r0, sl
    984a:	db02      	blt.n	9852 <__fputwc+0x6e>
    984c:	f1bc 0f0a 	cmp.w	ip, #10
    9850:	d1e7      	bne.n	9822 <__fputwc+0x3e>
    9852:	f000 f953 	bl	9afc <__swbuf_r>
    9856:	1c43      	adds	r3, r0, #1
    9858:	d1e8      	bne.n	982c <__fputwc+0x48>
    985a:	4606      	mov	r6, r0
    985c:	4630      	mov	r0, r6
    985e:	b002      	add	sp, #8
    9860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9864:	4646      	mov	r6, r8
    9866:	4630      	mov	r0, r6
    9868:	b002      	add	sp, #8
    986a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    986e:	fa5f fc88 	uxtb.w	ip, r8
    9872:	f88d c004 	strb.w	ip, [sp, #4]
    9876:	4606      	mov	r6, r0
    9878:	f10d 0904 	add.w	r9, sp, #4
    987c:	e7cf      	b.n	981e <__fputwc+0x3a>
    987e:	89a3      	ldrh	r3, [r4, #12]
    9880:	4630      	mov	r0, r6
    9882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9886:	81a3      	strh	r3, [r4, #12]
    9888:	b002      	add	sp, #8
    988a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    988e:	bf00      	nop

00009890 <_fputwc_r>:
    9890:	b530      	push	{r4, r5, lr}
    9892:	6e53      	ldr	r3, [r2, #100]	; 0x64
    9894:	f013 0f01 	tst.w	r3, #1
    9898:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    989c:	4614      	mov	r4, r2
    989e:	b083      	sub	sp, #12
    98a0:	4605      	mov	r5, r0
    98a2:	b29a      	uxth	r2, r3
    98a4:	d101      	bne.n	98aa <_fputwc_r+0x1a>
    98a6:	0598      	lsls	r0, r3, #22
    98a8:	d51c      	bpl.n	98e4 <_fputwc_r+0x54>
    98aa:	0490      	lsls	r0, r2, #18
    98ac:	d406      	bmi.n	98bc <_fputwc_r+0x2c>
    98ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
    98b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    98b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    98b8:	81a3      	strh	r3, [r4, #12]
    98ba:	6662      	str	r2, [r4, #100]	; 0x64
    98bc:	4622      	mov	r2, r4
    98be:	4628      	mov	r0, r5
    98c0:	f7ff ff90 	bl	97e4 <__fputwc>
    98c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
    98c6:	07da      	lsls	r2, r3, #31
    98c8:	4605      	mov	r5, r0
    98ca:	d402      	bmi.n	98d2 <_fputwc_r+0x42>
    98cc:	89a3      	ldrh	r3, [r4, #12]
    98ce:	059b      	lsls	r3, r3, #22
    98d0:	d502      	bpl.n	98d8 <_fputwc_r+0x48>
    98d2:	4628      	mov	r0, r5
    98d4:	b003      	add	sp, #12
    98d6:	bd30      	pop	{r4, r5, pc}
    98d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    98da:	f7fa ff8b 	bl	47f4 <__retarget_lock_release_recursive>
    98de:	4628      	mov	r0, r5
    98e0:	b003      	add	sp, #12
    98e2:	bd30      	pop	{r4, r5, pc}
    98e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    98e6:	9101      	str	r1, [sp, #4]
    98e8:	f7fa ff82 	bl	47f0 <__retarget_lock_acquire_recursive>
    98ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    98f0:	9901      	ldr	r1, [sp, #4]
    98f2:	b29a      	uxth	r2, r3
    98f4:	e7d9      	b.n	98aa <_fputwc_r+0x1a>
    98f6:	bf00      	nop

000098f8 <_wcsnrtombs_l>:
    98f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    98fc:	b08b      	sub	sp, #44	; 0x2c
    98fe:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
    9902:	9f14      	ldr	r7, [sp, #80]	; 0x50
    9904:	9103      	str	r1, [sp, #12]
    9906:	4681      	mov	r9, r0
    9908:	9205      	str	r2, [sp, #20]
    990a:	461e      	mov	r6, r3
    990c:	f1b8 0f00 	cmp.w	r8, #0
    9910:	d05c      	beq.n	99cc <_wcsnrtombs_l+0xd4>
    9912:	9b03      	ldr	r3, [sp, #12]
    9914:	2b00      	cmp	r3, #0
    9916:	d05e      	beq.n	99d6 <_wcsnrtombs_l+0xde>
    9918:	9b05      	ldr	r3, [sp, #20]
    991a:	681d      	ldr	r5, [r3, #0]
    991c:	2f00      	cmp	r7, #0
    991e:	d06a      	beq.n	99f6 <_wcsnrtombs_l+0xfe>
    9920:	1e74      	subs	r4, r6, #1
    9922:	b34e      	cbz	r6, 9978 <_wcsnrtombs_l+0x80>
    9924:	9b03      	ldr	r3, [sp, #12]
    9926:	9304      	str	r3, [sp, #16]
    9928:	3d04      	subs	r5, #4
    992a:	2600      	movs	r6, #0
    992c:	9501      	str	r5, [sp, #4]
    992e:	e00b      	b.n	9948 <_wcsnrtombs_l+0x50>
    9930:	9b03      	ldr	r3, [sp, #12]
    9932:	bb2b      	cbnz	r3, 9980 <_wcsnrtombs_l+0x88>
    9934:	9b01      	ldr	r3, [sp, #4]
    9936:	681a      	ldr	r2, [r3, #0]
    9938:	2a00      	cmp	r2, #0
    993a:	d03a      	beq.n	99b2 <_wcsnrtombs_l+0xba>
    993c:	45bc      	cmp	ip, r7
    993e:	d25c      	bcs.n	99fa <_wcsnrtombs_l+0x102>
    9940:	3c01      	subs	r4, #1
    9942:	1c63      	adds	r3, r4, #1
    9944:	4666      	mov	r6, ip
    9946:	d017      	beq.n	9978 <_wcsnrtombs_l+0x80>
    9948:	f8d8 3000 	ldr.w	r3, [r8]
    994c:	9302      	str	r3, [sp, #8]
    994e:	9b01      	ldr	r3, [sp, #4]
    9950:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
    9954:	f853 2f04 	ldr.w	r2, [r3, #4]!
    9958:	9301      	str	r3, [sp, #4]
    995a:	a907      	add	r1, sp, #28
    995c:	4643      	mov	r3, r8
    995e:	4648      	mov	r0, r9
    9960:	f8d8 b004 	ldr.w	fp, [r8, #4]
    9964:	47a8      	blx	r5
    9966:	1c42      	adds	r2, r0, #1
    9968:	d03a      	beq.n	99e0 <_wcsnrtombs_l+0xe8>
    996a:	eb00 0c06 	add.w	ip, r0, r6
    996e:	45bc      	cmp	ip, r7
    9970:	d9de      	bls.n	9930 <_wcsnrtombs_l+0x38>
    9972:	9b02      	ldr	r3, [sp, #8]
    9974:	e9c8 3b00 	strd	r3, fp, [r8]
    9978:	4630      	mov	r0, r6
    997a:	b00b      	add	sp, #44	; 0x2c
    997c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9980:	2800      	cmp	r0, #0
    9982:	dd0e      	ble.n	99a2 <_wcsnrtombs_l+0xaa>
    9984:	9b04      	ldr	r3, [sp, #16]
    9986:	9d01      	ldr	r5, [sp, #4]
    9988:	4418      	add	r0, r3
    998a:	1e5a      	subs	r2, r3, #1
    998c:	a907      	add	r1, sp, #28
    998e:	f100 3eff 	add.w	lr, r0, #4294967295
    9992:	f811 3b01 	ldrb.w	r3, [r1], #1
    9996:	f802 3f01 	strb.w	r3, [r2, #1]!
    999a:	4572      	cmp	r2, lr
    999c:	d1f9      	bne.n	9992 <_wcsnrtombs_l+0x9a>
    999e:	9501      	str	r5, [sp, #4]
    99a0:	9004      	str	r0, [sp, #16]
    99a2:	9b05      	ldr	r3, [sp, #20]
    99a4:	681a      	ldr	r2, [r3, #0]
    99a6:	3204      	adds	r2, #4
    99a8:	601a      	str	r2, [r3, #0]
    99aa:	9b01      	ldr	r3, [sp, #4]
    99ac:	681a      	ldr	r2, [r3, #0]
    99ae:	2a00      	cmp	r2, #0
    99b0:	d1c4      	bne.n	993c <_wcsnrtombs_l+0x44>
    99b2:	9b03      	ldr	r3, [sp, #12]
    99b4:	b10b      	cbz	r3, 99ba <_wcsnrtombs_l+0xc2>
    99b6:	9b05      	ldr	r3, [sp, #20]
    99b8:	601a      	str	r2, [r3, #0]
    99ba:	f10c 36ff 	add.w	r6, ip, #4294967295
    99be:	2200      	movs	r2, #0
    99c0:	4630      	mov	r0, r6
    99c2:	f8c8 2000 	str.w	r2, [r8]
    99c6:	b00b      	add	sp, #44	; 0x2c
    99c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99cc:	9b03      	ldr	r3, [sp, #12]
    99ce:	f500 7886 	add.w	r8, r0, #268	; 0x10c
    99d2:	2b00      	cmp	r3, #0
    99d4:	d1a0      	bne.n	9918 <_wcsnrtombs_l+0x20>
    99d6:	9b05      	ldr	r3, [sp, #20]
    99d8:	f04f 37ff 	mov.w	r7, #4294967295
    99dc:	681d      	ldr	r5, [r3, #0]
    99de:	e79f      	b.n	9920 <_wcsnrtombs_l+0x28>
    99e0:	4606      	mov	r6, r0
    99e2:	218a      	movs	r1, #138	; 0x8a
    99e4:	2200      	movs	r2, #0
    99e6:	4630      	mov	r0, r6
    99e8:	f8c9 1000 	str.w	r1, [r9]
    99ec:	f8c8 2000 	str.w	r2, [r8]
    99f0:	b00b      	add	sp, #44	; 0x2c
    99f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99f6:	463e      	mov	r6, r7
    99f8:	e7be      	b.n	9978 <_wcsnrtombs_l+0x80>
    99fa:	4666      	mov	r6, ip
    99fc:	e7bc      	b.n	9978 <_wcsnrtombs_l+0x80>
    99fe:	bf00      	nop

00009a00 <_wcsnrtombs_r>:
    9a00:	b510      	push	{r4, lr}
    9a02:	b084      	sub	sp, #16
    9a04:	4c05      	ldr	r4, [pc, #20]	; (9a1c <_wcsnrtombs_r+0x1c>)
    9a06:	9806      	ldr	r0, [sp, #24]
    9a08:	9000      	str	r0, [sp, #0]
    9a0a:	9807      	ldr	r0, [sp, #28]
    9a0c:	9001      	str	r0, [sp, #4]
    9a0e:	4804      	ldr	r0, [pc, #16]	; (9a20 <_wcsnrtombs_r+0x20>)
    9a10:	6800      	ldr	r0, [r0, #0]
    9a12:	9402      	str	r4, [sp, #8]
    9a14:	f7ff ff70 	bl	98f8 <_wcsnrtombs_l>
    9a18:	b004      	add	sp, #16
    9a1a:	bd10      	pop	{r4, pc}
    9a1c:	20001144 	.word	0x20001144
    9a20:	200016cc 	.word	0x200016cc

00009a24 <__smakebuf_r>:
    9a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9a28:	898b      	ldrh	r3, [r1, #12]
    9a2a:	460c      	mov	r4, r1
    9a2c:	0799      	lsls	r1, r3, #30
    9a2e:	b096      	sub	sp, #88	; 0x58
    9a30:	d508      	bpl.n	9a44 <__smakebuf_r+0x20>
    9a32:	f104 0343 	add.w	r3, r4, #67	; 0x43
    9a36:	2201      	movs	r2, #1
    9a38:	e9c4 3204 	strd	r3, r2, [r4, #16]
    9a3c:	6023      	str	r3, [r4, #0]
    9a3e:	b016      	add	sp, #88	; 0x58
    9a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9a44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    9a48:	2900      	cmp	r1, #0
    9a4a:	4606      	mov	r6, r0
    9a4c:	db25      	blt.n	9a9a <__smakebuf_r+0x76>
    9a4e:	466a      	mov	r2, sp
    9a50:	f000 f8ac 	bl	9bac <_fstat_r>
    9a54:	2800      	cmp	r0, #0
    9a56:	db1f      	blt.n	9a98 <__smakebuf_r+0x74>
    9a58:	9d01      	ldr	r5, [sp, #4]
    9a5a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
    9a5e:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
    9a62:	fab5 f585 	clz	r5, r5
    9a66:	f44f 6880 	mov.w	r8, #1024	; 0x400
    9a6a:	096d      	lsrs	r5, r5, #5
    9a6c:	f44f 6700 	mov.w	r7, #2048	; 0x800
    9a70:	4641      	mov	r1, r8
    9a72:	4630      	mov	r0, r6
    9a74:	f7f9 fed8 	bl	3828 <_malloc_r>
    9a78:	b1e0      	cbz	r0, 9ab4 <__smakebuf_r+0x90>
    9a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9a7e:	f8c4 8014 	str.w	r8, [r4, #20]
    9a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    9a86:	6020      	str	r0, [r4, #0]
    9a88:	6120      	str	r0, [r4, #16]
    9a8a:	81a3      	strh	r3, [r4, #12]
    9a8c:	bb35      	cbnz	r5, 9adc <__smakebuf_r+0xb8>
    9a8e:	433b      	orrs	r3, r7
    9a90:	81a3      	strh	r3, [r4, #12]
    9a92:	b016      	add	sp, #88	; 0x58
    9a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9a98:	89a3      	ldrh	r3, [r4, #12]
    9a9a:	f013 0580 	ands.w	r5, r3, #128	; 0x80
    9a9e:	d019      	beq.n	9ad4 <__smakebuf_r+0xb0>
    9aa0:	f04f 0840 	mov.w	r8, #64	; 0x40
    9aa4:	2500      	movs	r5, #0
    9aa6:	4641      	mov	r1, r8
    9aa8:	4630      	mov	r0, r6
    9aaa:	462f      	mov	r7, r5
    9aac:	f7f9 febc 	bl	3828 <_malloc_r>
    9ab0:	2800      	cmp	r0, #0
    9ab2:	d1e2      	bne.n	9a7a <__smakebuf_r+0x56>
    9ab4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9ab8:	059a      	lsls	r2, r3, #22
    9aba:	d4c0      	bmi.n	9a3e <__smakebuf_r+0x1a>
    9abc:	f023 0303 	bic.w	r3, r3, #3
    9ac0:	f104 0243 	add.w	r2, r4, #67	; 0x43
    9ac4:	f043 0302 	orr.w	r3, r3, #2
    9ac8:	2101      	movs	r1, #1
    9aca:	e9c4 2104 	strd	r2, r1, [r4, #16]
    9ace:	81a3      	strh	r3, [r4, #12]
    9ad0:	6022      	str	r2, [r4, #0]
    9ad2:	e7b4      	b.n	9a3e <__smakebuf_r+0x1a>
    9ad4:	f44f 6880 	mov.w	r8, #1024	; 0x400
    9ad8:	462f      	mov	r7, r5
    9ada:	e7c9      	b.n	9a70 <__smakebuf_r+0x4c>
    9adc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    9ae0:	4630      	mov	r0, r6
    9ae2:	f000 f879 	bl	9bd8 <_isatty_r>
    9ae6:	b910      	cbnz	r0, 9aee <__smakebuf_r+0xca>
    9ae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9aec:	e7cf      	b.n	9a8e <__smakebuf_r+0x6a>
    9aee:	89a3      	ldrh	r3, [r4, #12]
    9af0:	f023 0303 	bic.w	r3, r3, #3
    9af4:	f043 0301 	orr.w	r3, r3, #1
    9af8:	b21b      	sxth	r3, r3
    9afa:	e7c8      	b.n	9a8e <__smakebuf_r+0x6a>

00009afc <__swbuf_r>:
    9afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9afe:	460d      	mov	r5, r1
    9b00:	4614      	mov	r4, r2
    9b02:	4606      	mov	r6, r0
    9b04:	b110      	cbz	r0, 9b0c <__swbuf_r+0x10>
    9b06:	6b43      	ldr	r3, [r0, #52]	; 0x34
    9b08:	2b00      	cmp	r3, #0
    9b0a:	d04c      	beq.n	9ba6 <__swbuf_r+0xaa>
    9b0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    9b10:	69a3      	ldr	r3, [r4, #24]
    9b12:	60a3      	str	r3, [r4, #8]
    9b14:	0717      	lsls	r7, r2, #28
    9b16:	b290      	uxth	r0, r2
    9b18:	d51b      	bpl.n	9b52 <__swbuf_r+0x56>
    9b1a:	6923      	ldr	r3, [r4, #16]
    9b1c:	b1cb      	cbz	r3, 9b52 <__swbuf_r+0x56>
    9b1e:	b2ed      	uxtb	r5, r5
    9b20:	0481      	lsls	r1, r0, #18
    9b22:	462f      	mov	r7, r5
    9b24:	d522      	bpl.n	9b6c <__swbuf_r+0x70>
    9b26:	6822      	ldr	r2, [r4, #0]
    9b28:	6961      	ldr	r1, [r4, #20]
    9b2a:	1ad3      	subs	r3, r2, r3
    9b2c:	4299      	cmp	r1, r3
    9b2e:	dd29      	ble.n	9b84 <__swbuf_r+0x88>
    9b30:	3301      	adds	r3, #1
    9b32:	68a1      	ldr	r1, [r4, #8]
    9b34:	3901      	subs	r1, #1
    9b36:	60a1      	str	r1, [r4, #8]
    9b38:	1c51      	adds	r1, r2, #1
    9b3a:	6021      	str	r1, [r4, #0]
    9b3c:	7015      	strb	r5, [r2, #0]
    9b3e:	6962      	ldr	r2, [r4, #20]
    9b40:	429a      	cmp	r2, r3
    9b42:	d027      	beq.n	9b94 <__swbuf_r+0x98>
    9b44:	89a3      	ldrh	r3, [r4, #12]
    9b46:	07db      	lsls	r3, r3, #31
    9b48:	d501      	bpl.n	9b4e <__swbuf_r+0x52>
    9b4a:	2d0a      	cmp	r5, #10
    9b4c:	d022      	beq.n	9b94 <__swbuf_r+0x98>
    9b4e:	4638      	mov	r0, r7
    9b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9b52:	4621      	mov	r1, r4
    9b54:	4630      	mov	r0, r6
    9b56:	f7ff fddf 	bl	9718 <__swsetup_r>
    9b5a:	bb08      	cbnz	r0, 9ba0 <__swbuf_r+0xa4>
    9b5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    9b60:	6923      	ldr	r3, [r4, #16]
    9b62:	b290      	uxth	r0, r2
    9b64:	b2ed      	uxtb	r5, r5
    9b66:	0481      	lsls	r1, r0, #18
    9b68:	462f      	mov	r7, r5
    9b6a:	d4dc      	bmi.n	9b26 <__swbuf_r+0x2a>
    9b6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    9b70:	81a2      	strh	r2, [r4, #12]
    9b72:	6e62      	ldr	r2, [r4, #100]	; 0x64
    9b74:	6961      	ldr	r1, [r4, #20]
    9b76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    9b7a:	6662      	str	r2, [r4, #100]	; 0x64
    9b7c:	6822      	ldr	r2, [r4, #0]
    9b7e:	1ad3      	subs	r3, r2, r3
    9b80:	4299      	cmp	r1, r3
    9b82:	dcd5      	bgt.n	9b30 <__swbuf_r+0x34>
    9b84:	4621      	mov	r1, r4
    9b86:	4630      	mov	r0, r6
    9b88:	f7fd fb20 	bl	71cc <_fflush_r>
    9b8c:	b940      	cbnz	r0, 9ba0 <__swbuf_r+0xa4>
    9b8e:	6822      	ldr	r2, [r4, #0]
    9b90:	2301      	movs	r3, #1
    9b92:	e7ce      	b.n	9b32 <__swbuf_r+0x36>
    9b94:	4621      	mov	r1, r4
    9b96:	4630      	mov	r0, r6
    9b98:	f7fd fb18 	bl	71cc <_fflush_r>
    9b9c:	2800      	cmp	r0, #0
    9b9e:	d0d6      	beq.n	9b4e <__swbuf_r+0x52>
    9ba0:	f04f 37ff 	mov.w	r7, #4294967295
    9ba4:	e7d3      	b.n	9b4e <__swbuf_r+0x52>
    9ba6:	f7fa fb8f 	bl	42c8 <__sinit>
    9baa:	e7af      	b.n	9b0c <__swbuf_r+0x10>

00009bac <_fstat_r>:
    9bac:	b570      	push	{r4, r5, r6, lr}
    9bae:	460c      	mov	r4, r1
    9bb0:	4d08      	ldr	r5, [pc, #32]	; (9bd4 <_fstat_r+0x28>)
    9bb2:	4603      	mov	r3, r0
    9bb4:	2600      	movs	r6, #0
    9bb6:	4620      	mov	r0, r4
    9bb8:	4611      	mov	r1, r2
    9bba:	461c      	mov	r4, r3
    9bbc:	602e      	str	r6, [r5, #0]
    9bbe:	f7f8 fcc7 	bl	2550 <_fstat>
    9bc2:	1c43      	adds	r3, r0, #1
    9bc4:	d000      	beq.n	9bc8 <_fstat_r+0x1c>
    9bc6:	bd70      	pop	{r4, r5, r6, pc}
    9bc8:	682b      	ldr	r3, [r5, #0]
    9bca:	2b00      	cmp	r3, #0
    9bcc:	d0fb      	beq.n	9bc6 <_fstat_r+0x1a>
    9bce:	6023      	str	r3, [r4, #0]
    9bd0:	bd70      	pop	{r4, r5, r6, pc}
    9bd2:	bf00      	nop
    9bd4:	200025b0 	.word	0x200025b0

00009bd8 <_isatty_r>:
    9bd8:	b538      	push	{r3, r4, r5, lr}
    9bda:	4d07      	ldr	r5, [pc, #28]	; (9bf8 <_isatty_r+0x20>)
    9bdc:	2200      	movs	r2, #0
    9bde:	4604      	mov	r4, r0
    9be0:	4608      	mov	r0, r1
    9be2:	602a      	str	r2, [r5, #0]
    9be4:	f7f8 fcba 	bl	255c <_isatty>
    9be8:	1c43      	adds	r3, r0, #1
    9bea:	d000      	beq.n	9bee <_isatty_r+0x16>
    9bec:	bd38      	pop	{r3, r4, r5, pc}
    9bee:	682b      	ldr	r3, [r5, #0]
    9bf0:	2b00      	cmp	r3, #0
    9bf2:	d0fb      	beq.n	9bec <_isatty_r+0x14>
    9bf4:	6023      	str	r3, [r4, #0]
    9bf6:	bd38      	pop	{r3, r4, r5, pc}
    9bf8:	200025b0 	.word	0x200025b0
    9bfc:	00000000 	.word	0x00000000

00009c00 <___reboot_Teensyduino__veneer>:
    9c00:	f85f f000 	ldr.w	pc, [pc]	; 9c04 <___reboot_Teensyduino__veneer+0x4>
    9c04:	60001a21 	.word	0x60001a21

00009c08 <___init_veneer>:
    9c08:	f85f f000 	ldr.w	pc, [pc]	; 9c0c <___init_veneer+0x4>
    9c0c:	60001a75 	.word	0x60001a75

Disassembly of section .fini:

00009c10 <_fini>:
    9c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9c12:	bf00      	nop
